; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=5
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort Int_int_fun$ 0)
(declare-sort Int_nat_fun$ 0)
(declare-sort Nat_int_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Bool_int_fun$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Int_bool_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Bool_int_fun_int_fun$ 0)
(declare-sort Bool_int_fun_nat_fun$ 0)
(declare-sort Bool_nat_fun_int_fun$ 0)
(declare-sort Bool_nat_fun_nat_fun$ 0)
(declare-sort Int_bool_int_fun_fun$ 0)
(declare-sort Int_bool_nat_fun_fun$ 0)
(declare-sort Int_int_bool_fun_fun$ 0)
(declare-sort Nat_bool_int_fun_fun$ 0)
(declare-sort Nat_bool_nat_fun_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-fun f$ () Nat_nat_fun$)
(declare-fun i$ () Nat$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun less$ () Nat_nat_bool_fun_fun$)
(declare-fun zero$ () Nat$)
(declare-fun of_nat$ () Nat_nat_fun$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ () Nat_nat_bool_fun_fun$)
(declare-fun of_nat$a () Nat_int_fun$)
(declare-fun antimono$ (Nat_nat_fun$) Bool)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$c (Nat_bool_int_fun_fun$ Nat$) Bool_int_fun$)
(declare-fun fun_app$d (Nat_bool_nat_fun_fun$ Nat$) Bool_nat_fun$)
(declare-fun fun_app$e (Nat_int_fun$ Nat$) Int)
(declare-fun fun_app$f (Int_bool_fun$ Int) Bool)
(declare-fun fun_app$g (Int_int_bool_fun_fun$ Int) Int_bool_fun$)
(declare-fun fun_app$h (Int_nat_fun$ Int) Nat$)
(declare-fun fun_app$i (Int_int_fun$ Int) Int)
(declare-fun fun_app$j (Int_bool_int_fun_fun$ Int) Bool_int_fun$)
(declare-fun fun_app$k (Int_bool_nat_fun_fun$ Int) Bool_nat_fun$)
(declare-fun fun_app$l (Bool_int_fun_nat_fun$ Bool_int_fun$) Nat$)
(declare-fun fun_app$m (Bool_int_fun_int_fun$ Bool_int_fun$) Int)
(declare-fun fun_app$n (Bool_nat_fun_nat_fun$ Bool_nat_fun$) Nat$)
(declare-fun fun_app$o (Bool_nat_fun_int_fun$ Bool_nat_fun$) Int)
(declare-fun fun_app$p (Bool_int_fun$ Bool) Int)
(declare-fun fun_app$q (Bool_nat_fun$ Bool) Nat$)
(declare-fun greatest$ (Int_bool_fun$) Int)
(declare-fun less_eq$a (Bool_int_fun$ Bool_int_fun$) Bool)
(declare-fun less_eq$b (Bool_nat_fun$ Bool_nat_fun$) Bool)
(declare-fun antimono$a (Nat_int_fun$) Bool)
(declare-fun antimono$b (Int_nat_fun$) Bool)
(declare-fun antimono$c (Int_int_fun$) Bool)
(declare-fun greatest$a (Nat_bool_fun$) Nat$)
(assert (! (not (exists ((?v0 Nat$)) (and (fun_app$ (fun_app$a less_eq$ i$) ?v0) (not (= (fun_app$b f$ ?v0) (fun_app$b f$ (fun_app$b suc$ ?v0))))))) :named a0))
(assert (! (not (exists ((?v0 Nat$)) (forall ((?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$b f$ ?v1) (fun_app$b f$ (fun_app$b suc$ ?v1))))))) :named a1))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b f$ (fun_app$b suc$ ?v0))) (fun_app$b f$ ?v0))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (fun_app$a less_eq$ (fun_app$b suc$ ?v0)) (fun_app$b suc$ ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a3))
(assert (! (forall ((?v0 Nat_bool_int_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$a (fun_app$c ?v0 ?v3) (fun_app$c ?v0 (fun_app$b suc$ ?v3)))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (less_eq$a (fun_app$c ?v0 ?v1) (fun_app$c ?v0 ?v2)))) :named a4))
(assert (! (forall ((?v0 Nat_bool_nat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$b (fun_app$d ?v0 ?v3) (fun_app$d ?v0 (fun_app$b suc$ ?v3)))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (less_eq$b (fun_app$d ?v0 ?v1) (fun_app$d ?v0 ?v2)))) :named a5))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 ?v3)) (fun_app$b ?v0 (fun_app$b suc$ ?v3)))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 ?v1)) (fun_app$b ?v0 ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat_int_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (<= (fun_app$e ?v0 ?v3) (fun_app$e ?v0 (fun_app$b suc$ ?v3)))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (<= (fun_app$e ?v0 ?v1) (fun_app$e ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat_bool_int_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$a (fun_app$c ?v0 (fun_app$b suc$ ?v3)) (fun_app$c ?v0 ?v3))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (less_eq$a (fun_app$c ?v0 ?v2) (fun_app$c ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat_bool_nat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$b (fun_app$d ?v0 (fun_app$b suc$ ?v3)) (fun_app$d ?v0 ?v3))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (less_eq$b (fun_app$d ?v0 ?v2) (fun_app$d ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 (fun_app$b suc$ ?v3))) (fun_app$b ?v0 ?v3))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 ?v2)) (fun_app$b ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 Nat_int_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (<= (fun_app$e ?v0 (fun_app$b suc$ ?v3)) (fun_app$e ?v0 ?v3))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (<= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$b suc$ ?v0) (fun_app$b suc$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$b suc$ ?v0) (fun_app$b suc$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Bool_int_fun$)) (less_eq$a ?v0 ?v0)) :named a14))
(assert (! (forall ((?v0 Bool_nat_fun$)) (less_eq$b ?v0 ?v0)) :named a15))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a16))
(assert (! (forall ((?v0 Int)) (<= ?v0 ?v0)) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$b suc$ ?v0)) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b suc$ ?v1)) (and (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) false) (=> (= ?v0 (fun_app$b suc$ ?v1)) false))) false)) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b suc$ ?v1)))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$b suc$ ?v0)) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$b suc$ ?v2))))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b suc$ ?v1)) (or (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v0 (fun_app$b suc$ ?v1))))) :named a22))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v1 ?v0))) :named a23))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)) (= ?v1 ?v0))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v1 ?v0))) :named a25))
(assert (! (forall ((?v0 Int) (?v1 Int)) (=> (and (<= ?v0 ?v1) (<= ?v1 ?v0)) (= ?v1 ?v0))) :named a26))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (= (= ?v0 ?v1) (and (less_eq$a ?v1 ?v0) (less_eq$a ?v0 ?v1)))) :named a27))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (= (= ?v0 ?v1) (and (less_eq$b ?v1 ?v0) (less_eq$b ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)))) :named a29))
(assert (! (forall ((?v0 Int) (?v1 Int)) (= (= ?v0 ?v1) (and (<= ?v1 ?v0) (<= ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v0)) (less_eq$a ?v2 ?v1))) :named a31))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$) (?v2 Bool_nat_fun$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v2 ?v0)) (less_eq$b ?v2 ?v1))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1))) :named a33))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (=> (and (<= ?v0 ?v1) (<= ?v2 ?v0)) (<= ?v2 ?v1))) :named a34))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v3) ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)))) (fun_app$ (fun_app$a ?v0 ?v1) ?v2))) :named a35))
(assert (! (forall ((?v0 Int_int_bool_fun_fun$) (?v1 Int) (?v2 Int)) (=> (and (forall ((?v3 Int) (?v4 Int)) (=> (<= ?v3 ?v4) (fun_app$f (fun_app$g ?v0 ?v3) ?v4))) (forall ((?v3 Int) (?v4 Int)) (=> (fun_app$f (fun_app$g ?v0 ?v4) ?v3) (fun_app$f (fun_app$g ?v0 ?v3) ?v4)))) (fun_app$f (fun_app$g ?v0 ?v1) ?v2))) :named a36))
(assert (! (forall ((?v0 Bool_int_fun$)) (less_eq$a ?v0 ?v0)) :named a37))
(assert (! (forall ((?v0 Bool_nat_fun$)) (less_eq$b ?v0 ?v0)) :named a38))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a39))
(assert (! (forall ((?v0 Int)) (<= ?v0 ?v0)) :named a40))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a41))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$) (?v2 Bool_nat_fun$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v2)) (less_eq$b ?v0 ?v2))) :named a42))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a43))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (=> (and (<= ?v0 ?v1) (<= ?v1 ?v2)) (<= ?v0 ?v2))) :named a44))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)) (= ?v0 ?v1))) :named a46))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a47))
(assert (! (forall ((?v0 Int) (?v1 Int)) (=> (and (<= ?v0 ?v1) (<= ?v1 ?v0)) (= ?v0 ?v1))) :named a48))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun$)) (=> (and (less_eq$a ?v0 ?v1) (= ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a49))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$) (?v2 Bool_nat_fun$)) (=> (and (less_eq$b ?v0 ?v1) (= ?v1 ?v2)) (less_eq$b ?v0 ?v2))) :named a50))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a51))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (=> (and (<= ?v0 ?v1) (= ?v1 ?v2)) (<= ?v0 ?v2))) :named a52))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun$)) (=> (and (= ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a53))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$) (?v2 Bool_nat_fun$)) (=> (and (= ?v0 ?v1) (less_eq$b ?v1 ?v2)) (less_eq$b ?v0 ?v2))) :named a54))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a55))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (=> (and (= ?v0 ?v1) (<= ?v1 ?v2)) (<= ?v0 ?v2))) :named a56))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)))) :named a57))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (= (= ?v0 ?v1) (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)))) :named a58))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a59))
(assert (! (forall ((?v0 Int) (?v1 Int)) (= (= ?v0 ?v1) (and (<= ?v0 ?v1) (<= ?v1 ?v0)))) :named a60))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (! (=> (less_eq$a ?v0 ?v1) (= (less_eq$a ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$a ?v1 ?v0)))) :named a61))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (! (=> (less_eq$b ?v0 ?v1) (= (less_eq$b ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$b ?v1 ?v0)))) :named a62))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a63))
(assert (! (forall ((?v0 Int) (?v1 Int)) (=> (<= ?v0 ?v1) (= (<= ?v1 ?v0) (= ?v1 ?v0)))) :named a64))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) false) (=> (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)) false)))))) false)) :named a65))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (=> (and (=> (and (<= ?v0 ?v1) (<= ?v1 ?v2)) false) (and (=> (and (<= ?v1 ?v0) (<= ?v0 ?v2)) false) (and (=> (and (<= ?v0 ?v2) (<= ?v2 ?v1)) false) (and (=> (and (<= ?v2 ?v1) (<= ?v1 ?v0)) false) (and (=> (and (<= ?v1 ?v2) (<= ?v2 ?v0)) false) (=> (and (<= ?v2 ?v0) (<= ?v0 ?v1)) false)))))) false)) :named a66))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a67))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$) (?v2 Bool_nat_fun$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v2)) (less_eq$b ?v0 ?v2))) :named a68))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a69))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (=> (and (<= ?v0 ?v1) (<= ?v1 ?v2)) (<= ?v0 ?v2))) :named a70))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) false) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) false)) false)) :named a71))
(assert (! (forall ((?v0 Int) (?v1 Int)) (=> (and (=> (<= ?v0 ?v1) false) (=> (<= ?v1 ?v0) false)) false)) :named a72))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (=> (= ?v0 ?v1) (less_eq$a ?v0 ?v1))) :named a73))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (=> (= ?v0 ?v1) (less_eq$b ?v0 ?v1))) :named a74))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a75))
(assert (! (forall ((?v0 Int) (?v1 Int)) (=> (= ?v0 ?v1) (<= ?v0 ?v1))) :named a76))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0))) :named a77))
(assert (! (forall ((?v0 Int) (?v1 Int)) (or (<= ?v0 ?v1) (<= ?v1 ?v0))) :named a78))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a79))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)) (= ?v0 ?v1))) :named a80))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a81))
(assert (! (forall ((?v0 Int) (?v1 Int)) (=> (and (<= ?v0 ?v1) (<= ?v1 ?v0)) (= ?v0 ?v1))) :named a82))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)))) :named a83))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (= (= ?v0 ?v1) (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)))) :named a84))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a85))
(assert (! (forall ((?v0 Int) (?v1 Int)) (= (= ?v0 ?v1) (and (<= ?v0 ?v1) (<= ?v1 ?v0)))) :named a86))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$b ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v0)) ?v3))) :named a87))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_int_fun$) (?v3 Int)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$e ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (<= (fun_app$e ?v2 ?v4) (fun_app$e ?v2 ?v5)))))) (<= (fun_app$e ?v2 ?v0) ?v3))) :named a88))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_nat_fun$) (?v3 Nat$)) (=> (and (<= ?v0 ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v2 ?v0)) ?v3))) :named a89))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_int_fun$) (?v3 Int)) (=> (and (<= ?v0 ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (<= (fun_app$i ?v2 ?v4) (fun_app$i ?v2 ?v5)))))) (<= (fun_app$i ?v2 ?v0) ?v3))) :named a90))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_int_fun_fun$) (?v3 Bool_int_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$c ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$c ?v2 ?v4) (fun_app$c ?v2 ?v5)))))) (less_eq$a (fun_app$c ?v2 ?v0) ?v3))) :named a91))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_nat_fun_fun$) (?v3 Bool_nat_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$d ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$b (fun_app$d ?v2 ?v4) (fun_app$d ?v2 ?v5)))))) (less_eq$b (fun_app$d ?v2 ?v0) ?v3))) :named a92))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_bool_int_fun_fun$) (?v3 Bool_int_fun$)) (=> (and (<= ?v0 ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (less_eq$a (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5)))))) (less_eq$a (fun_app$j ?v2 ?v0) ?v3))) :named a93))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_bool_nat_fun_fun$) (?v3 Bool_nat_fun$)) (=> (and (<= ?v0 ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (less_eq$b (fun_app$k ?v2 ?v4) (fun_app$k ?v2 ?v5)))))) (less_eq$b (fun_app$k ?v2 ?v0) ?v3))) :named a94))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun_nat_fun$) (?v3 Nat$)) (=> (and (less_eq$a ?v0 ?v1) (and (= (fun_app$l ?v2 ?v1) ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$l ?v2 ?v4)) (fun_app$l ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$l ?v2 ?v0)) ?v3))) :named a95))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun_int_fun$) (?v3 Int)) (=> (and (less_eq$a ?v0 ?v1) (and (= (fun_app$m ?v2 ?v1) ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (<= (fun_app$m ?v2 ?v4) (fun_app$m ?v2 ?v5)))))) (<= (fun_app$m ?v2 ?v0) ?v3))) :named a96))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v1 ?v4)) (fun_app$b ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b ?v1 ?v3)))) :named a97))
(assert (! (forall ((?v0 Int) (?v1 Nat_int_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (<= (fun_app$e ?v1 ?v4) (fun_app$e ?v1 ?v5)))))) (<= ?v0 (fun_app$e ?v1 ?v3)))) :named a98))
(assert (! (forall ((?v0 Nat$) (?v1 Int_nat_fun$) (?v2 Int) (?v3 Int)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (<= ?v2 ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$h ?v1 ?v3)))) :named a99))
(assert (! (forall ((?v0 Int) (?v1 Int_int_fun$) (?v2 Int) (?v3 Int)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (<= ?v2 ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (<= (fun_app$i ?v1 ?v4) (fun_app$i ?v1 ?v5)))))) (<= ?v0 (fun_app$i ?v1 ?v3)))) :named a100))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Nat_bool_int_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$c ?v1 ?v4) (fun_app$c ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$c ?v1 ?v3)))) :named a101))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Nat_bool_nat_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$b (fun_app$d ?v1 ?v4) (fun_app$d ?v1 ?v5)))))) (less_eq$b ?v0 (fun_app$d ?v1 ?v3)))) :named a102))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Int_bool_int_fun_fun$) (?v2 Int) (?v3 Int)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (<= ?v2 ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (less_eq$a (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$j ?v1 ?v3)))) :named a103))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Int_bool_nat_fun_fun$) (?v2 Int) (?v3 Int)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (<= ?v2 ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (less_eq$b (fun_app$k ?v1 ?v4) (fun_app$k ?v1 ?v5)))))) (less_eq$b ?v0 (fun_app$k ?v1 ?v3)))) :named a104))
(assert (! (forall ((?v0 Nat$) (?v1 Bool_int_fun_nat_fun$) (?v2 Bool_int_fun$) (?v3 Bool_int_fun$)) (=> (and (= ?v0 (fun_app$l ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$l ?v1 ?v4)) (fun_app$l ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$l ?v1 ?v3)))) :named a105))
(assert (! (forall ((?v0 Int) (?v1 Bool_int_fun_int_fun$) (?v2 Bool_int_fun$) (?v3 Bool_int_fun$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (<= (fun_app$m ?v1 ?v4) (fun_app$m ?v1 ?v5)))))) (<= ?v0 (fun_app$m ?v1 ?v3)))) :named a106))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v0)) ?v3))) :named a107))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_int_fun$) (?v3 Int)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (<= (fun_app$e ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (<= (fun_app$e ?v2 ?v4) (fun_app$e ?v2 ?v5)))))) (<= (fun_app$e ?v2 ?v0) ?v3))) :named a108))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_nat_fun$) (?v3 Nat$)) (=> (and (<= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v2 ?v0)) ?v3))) :named a109))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_int_fun$) (?v3 Int)) (=> (and (<= ?v0 ?v1) (and (<= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (<= (fun_app$i ?v2 ?v4) (fun_app$i ?v2 ?v5)))))) (<= (fun_app$i ?v2 ?v0) ?v3))) :named a110))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_int_fun_fun$) (?v3 Bool_int_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (less_eq$a (fun_app$c ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$c ?v2 ?v4) (fun_app$c ?v2 ?v5)))))) (less_eq$a (fun_app$c ?v2 ?v0) ?v3))) :named a111))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_nat_fun_fun$) (?v3 Bool_nat_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (less_eq$b (fun_app$d ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$b (fun_app$d ?v2 ?v4) (fun_app$d ?v2 ?v5)))))) (less_eq$b (fun_app$d ?v2 ?v0) ?v3))) :named a112))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_bool_int_fun_fun$) (?v3 Bool_int_fun$)) (=> (and (<= ?v0 ?v1) (and (less_eq$a (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (less_eq$a (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5)))))) (less_eq$a (fun_app$j ?v2 ?v0) ?v3))) :named a113))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int_bool_nat_fun_fun$) (?v3 Bool_nat_fun$)) (=> (and (<= ?v0 ?v1) (and (less_eq$b (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (less_eq$b (fun_app$k ?v2 ?v4) (fun_app$k ?v2 ?v5)))))) (less_eq$b (fun_app$k ?v2 ?v0) ?v3))) :named a114))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun_nat_fun$) (?v3 Nat$)) (=> (and (less_eq$a ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$l ?v2 ?v1)) ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$l ?v2 ?v4)) (fun_app$l ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$l ?v2 ?v0)) ?v3))) :named a115))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$) (?v2 Bool_int_fun_int_fun$) (?v3 Int)) (=> (and (less_eq$a ?v0 ?v1) (and (<= (fun_app$m ?v2 ?v1) ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (<= (fun_app$m ?v2 ?v4) (fun_app$m ?v2 ?v5)))))) (<= (fun_app$m ?v2 ?v0) ?v3))) :named a116))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v1 ?v4)) (fun_app$b ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b ?v1 ?v3)))) :named a117))
(assert (! (forall ((?v0 Nat$) (?v1 Int_nat_fun$) (?v2 Int) (?v3 Int)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$h ?v1 ?v2)) (and (<= ?v2 ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$h ?v1 ?v3)))) :named a118))
(assert (! (forall ((?v0 Int) (?v1 Nat_int_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (<= ?v0 (fun_app$e ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (<= (fun_app$e ?v1 ?v4) (fun_app$e ?v1 ?v5)))))) (<= ?v0 (fun_app$e ?v1 ?v3)))) :named a119))
(assert (! (forall ((?v0 Int) (?v1 Int_int_fun$) (?v2 Int) (?v3 Int)) (=> (and (<= ?v0 (fun_app$i ?v1 ?v2)) (and (<= ?v2 ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (<= (fun_app$i ?v1 ?v4) (fun_app$i ?v1 ?v5)))))) (<= ?v0 (fun_app$i ?v1 ?v3)))) :named a120))
(assert (! (forall ((?v0 Nat$) (?v1 Bool_int_fun_nat_fun$) (?v2 Bool_int_fun$) (?v3 Bool_int_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$l ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$l ?v1 ?v4)) (fun_app$l ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$l ?v1 ?v3)))) :named a121))
(assert (! (forall ((?v0 Nat$) (?v1 Bool_nat_fun_nat_fun$) (?v2 Bool_nat_fun$) (?v3 Bool_nat_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$n ?v1 ?v2)) (and (less_eq$b ?v2 ?v3) (forall ((?v4 Bool_nat_fun$) (?v5 Bool_nat_fun$)) (=> (less_eq$b ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$n ?v1 ?v4)) (fun_app$n ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$n ?v1 ?v3)))) :named a122))
(assert (! (forall ((?v0 Int) (?v1 Bool_int_fun_int_fun$) (?v2 Bool_int_fun$) (?v3 Bool_int_fun$)) (=> (and (<= ?v0 (fun_app$m ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Bool_int_fun$) (?v5 Bool_int_fun$)) (=> (less_eq$a ?v4 ?v5) (<= (fun_app$m ?v1 ?v4) (fun_app$m ?v1 ?v5)))))) (<= ?v0 (fun_app$m ?v1 ?v3)))) :named a123))
(assert (! (forall ((?v0 Int) (?v1 Bool_nat_fun_int_fun$) (?v2 Bool_nat_fun$) (?v3 Bool_nat_fun$)) (=> (and (<= ?v0 (fun_app$o ?v1 ?v2)) (and (less_eq$b ?v2 ?v3) (forall ((?v4 Bool_nat_fun$) (?v5 Bool_nat_fun$)) (=> (less_eq$b ?v4 ?v5) (<= (fun_app$o ?v1 ?v4) (fun_app$o ?v1 ?v5)))))) (<= ?v0 (fun_app$o ?v1 ?v3)))) :named a124))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Nat_bool_int_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (less_eq$a ?v0 (fun_app$c ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$c ?v1 ?v4) (fun_app$c ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$c ?v1 ?v3)))) :named a125))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Int_bool_int_fun_fun$) (?v2 Int) (?v3 Int)) (=> (and (less_eq$a ?v0 (fun_app$j ?v1 ?v2)) (and (<= ?v2 ?v3) (forall ((?v4 Int) (?v5 Int)) (=> (<= ?v4 ?v5) (less_eq$a (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$j ?v1 ?v3)))) :named a126))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 Bool)) (<= (fun_app$p ?v0 ?v2) (fun_app$p ?v1 ?v2))))) :named a127))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (= (less_eq$b ?v0 ?v1) (forall ((?v2 Bool)) (fun_app$ (fun_app$a less_eq$ (fun_app$q ?v0 ?v2)) (fun_app$q ?v1 ?v2))))) :named a128))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (fun_app$b suc$ ?v0)))) :named a129))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$b suc$ ?v0) (fun_app$b suc$ ?v1)) (= ?v0 ?v1))) :named a130))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$a less_eq$ ?v3) ?v2)))) (exists ((?v3 Nat$)) (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (fun_app$a less_eq$ ?v4) ?v3))))))) :named a131))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0))) :named a132))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a133))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a134))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a135))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a136))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a ?v2 ?v3) ?v3)) (and (forall ((?v3 Nat$) (?v4 Nat$) (?v5 Nat$)) (=> (and (fun_app$ (fun_app$a ?v2 ?v3) ?v4) (fun_app$ (fun_app$a ?v2 ?v4) ?v5)) (fun_app$ (fun_app$a ?v2 ?v3) ?v5))) (forall ((?v3 Nat$)) (fun_app$ (fun_app$a ?v2 ?v3) (fun_app$b suc$ ?v3)))))) (fun_app$ (fun_app$a ?v2 ?v0) ?v1))) :named a137))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (fun_app$ ?v2 ?v0) (forall ((?v3 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v3) (fun_app$ ?v2 ?v3)) (fun_app$ ?v2 (fun_app$b suc$ ?v3)))))) (fun_app$ ?v2 ?v1))) :named a138))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$b suc$ ?v3)) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a139))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)) (fun_app$ (fun_app$a less_eq$ (fun_app$b suc$ ?v1)) ?v0))) :named a140))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$ (fun_app$a less_eq$ (fun_app$b suc$ ?v0)) ?v0))) :named a141))
(assert (! (forall ((?v0 Nat_nat_fun$)) (= (antimono$ ?v0) (forall ((?v1 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 (fun_app$b suc$ ?v1))) (fun_app$b ?v0 ?v1))))) :named a142))
(assert (! (forall ((?v0 Nat_int_fun$)) (= (antimono$a ?v0) (forall ((?v1 Nat$)) (<= (fun_app$e ?v0 (fun_app$b suc$ ?v1)) (fun_app$e ?v0 ?v1))))) :named a143))
(assert (! (forall ((?v0 Int_bool_fun$) (?v1 Int)) (=> (and (fun_app$f ?v0 ?v1) (forall ((?v2 Int)) (=> (fun_app$f ?v0 ?v2) (<= ?v2 ?v1)))) (= (greatest$ ?v0) ?v1))) :named a144))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1)))) (= (greatest$a ?v0) ?v1))) :named a145))
(assert (! (forall ((?v0 Int_bool_fun$) (?v1 Int) (?v2 Int_bool_fun$)) (=> (and (fun_app$f ?v0 ?v1) (and (forall ((?v3 Int)) (=> (fun_app$f ?v0 ?v3) (<= ?v3 ?v1))) (forall ((?v3 Int)) (=> (and (fun_app$f ?v0 ?v3) (forall ((?v4 Int)) (=> (fun_app$f ?v0 ?v4) (<= ?v4 ?v3)))) (fun_app$f ?v2 ?v3))))) (fun_app$f ?v2 (greatest$ ?v0)))) :named a146))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$a less_eq$ ?v3) ?v1))) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (fun_app$a less_eq$ ?v4) ?v3)))) (fun_app$ ?v2 ?v3))))) (fun_app$ ?v2 (greatest$a ?v0)))) :named a147))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$a less_eq$ ?v3) ?v2))) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (fun_app$a less_eq$ ?v4) ?v3)))) false)))) false)) :named a148))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool_nat_fun$)) (! (= (less_eq$b ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$q ?v0 false)) (fun_app$q ?v1 false)) (fun_app$ (fun_app$a less_eq$ (fun_app$q ?v0 true)) (fun_app$q ?v1 true)))) :pattern ((less_eq$b ?v0 ?v1)))) :named a149))
(assert (! (forall ((?v0 Bool_int_fun$) (?v1 Bool_int_fun$)) (! (= (less_eq$a ?v0 ?v1) (and (<= (fun_app$p ?v0 false) (fun_app$p ?v1 false)) (<= (fun_app$p ?v0 true) (fun_app$p ?v1 true)))) :pattern ((less_eq$a ?v0 ?v1)))) :named a150))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (exists ((?v2 Nat$)) (fun_app$ ?v0 ?v2)) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1)))) (fun_app$ ?v0 (greatest$a ?v0)))) :named a151))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$a less_eq$ ?v3) ?v2)))) (fun_app$ (fun_app$a less_eq$ ?v1) (greatest$a ?v0)))) :named a152))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$ ?v0) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 ?v2)) (fun_app$b ?v0 ?v1)))) :named a153))
(assert (! (forall ((?v0 Nat_int_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$a ?v0) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (<= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v1)))) :named a154))
(assert (! (forall ((?v0 Int_nat_fun$) (?v1 Int) (?v2 Int)) (=> (and (antimono$b ?v0) (<= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v0 ?v2)) (fun_app$h ?v0 ?v1)))) :named a155))
(assert (! (forall ((?v0 Int_int_fun$) (?v1 Int) (?v2 Int)) (=> (and (antimono$c ?v0) (<= ?v1 ?v2)) (<= (fun_app$i ?v0 ?v2) (fun_app$i ?v0 ?v1)))) :named a156))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$ ?v0) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 ?v2)) (fun_app$b ?v0 ?v1)) false))) false)) :named a157))
(assert (! (forall ((?v0 Nat_int_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$a ?v0) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (=> (<= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v1)) false))) false)) :named a158))
(assert (! (forall ((?v0 Int_nat_fun$) (?v1 Int) (?v2 Int)) (=> (and (antimono$b ?v0) (and (<= ?v1 ?v2) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v0 ?v2)) (fun_app$h ?v0 ?v1)) false))) false)) :named a159))
(assert (! (forall ((?v0 Int_int_fun$) (?v1 Int) (?v2 Int)) (=> (and (antimono$c ?v0) (and (<= ?v1 ?v2) (=> (<= (fun_app$i ?v0 ?v2) (fun_app$i ?v0 ?v1)) false))) false)) :named a160))
(assert (! (forall ((?v0 Nat_nat_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 ?v2)) (fun_app$b ?v0 ?v1)))) (antimono$ ?v0))) :named a161))
(assert (! (forall ((?v0 Nat_int_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (<= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v1)))) (antimono$a ?v0))) :named a162))
(assert (! (forall ((?v0 Int_nat_fun$)) (=> (forall ((?v1 Int) (?v2 Int)) (=> (<= ?v1 ?v2) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v0 ?v2)) (fun_app$h ?v0 ?v1)))) (antimono$b ?v0))) :named a163))
(assert (! (forall ((?v0 Int_int_fun$)) (=> (forall ((?v1 Int) (?v2 Int)) (=> (<= ?v1 ?v2) (<= (fun_app$i ?v0 ?v2) (fun_app$i ?v0 ?v1)))) (antimono$c ?v0))) :named a164))
(assert (! (forall ((?v0 Nat_nat_fun$)) (= (antimono$ ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v0 ?v2)) (fun_app$b ?v0 ?v1)))))) :named a165))
(assert (! (forall ((?v0 Nat_int_fun$)) (= (antimono$a ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (<= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v1)))))) :named a166))
(assert (! (forall ((?v0 Int_nat_fun$)) (= (antimono$b ?v0) (forall ((?v1 Int) (?v2 Int)) (=> (<= ?v1 ?v2) (fun_app$ (fun_app$a less_eq$ (fun_app$h ?v0 ?v2)) (fun_app$h ?v0 ?v1)))))) :named a167))
(assert (! (forall ((?v0 Int_int_fun$)) (= (antimono$c ?v0) (forall ((?v1 Int) (?v2 Int)) (=> (<= ?v1 ?v2) (<= (fun_app$i ?v0 ?v2) (fun_app$i ?v0 ?v1)))))) :named a168))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$a less_eq$ ?v3) ?v2)))) (fun_app$ ?v0 (greatest$a ?v0)))) :named a169))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (fun_app$a less_eq$ (fun_app$b of_nat$ ?v0)) (fun_app$b of_nat$ ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a170))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (<= (fun_app$e of_nat$a ?v0) (fun_app$e of_nat$a ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a171))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$e of_nat$a ?v0) (fun_app$e of_nat$a ?v1)) (= ?v0 ?v1))) :named a172))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ (fun_app$b of_nat$ ?v0)) (fun_app$b of_nat$ ?v1)))) :named a173))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (<= (fun_app$e of_nat$a ?v0) (fun_app$e of_nat$a ?v1)))) :named a174))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (<= (fun_app$e of_nat$a ?v0) (fun_app$e of_nat$a ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a175))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (<= (fun_app$e of_nat$a ?v0) (fun_app$e of_nat$a ?v1)))) :named a176))
(assert (! (forall ((?v0 Nat$)) (not (= (fun_app$b of_nat$ (fun_app$b suc$ ?v0)) zero$))) :named a177))
(assert (! (forall ((?v0 Nat$)) (not (= (fun_app$e of_nat$a (fun_app$b suc$ ?v0)) 0))) :named a178))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ zero$) (fun_app$b of_nat$ ?v0))) :named a179))
(assert (! (forall ((?v0 Nat$)) (<= 0 (fun_app$e of_nat$a ?v0))) :named a180))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v0) (fun_app$b suc$ ?v1)))) :named a181))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (fun_app$a less$ zero$) ?v0))) :named a182))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (fun_app$a less$ ?v0) zero$) false)) :named a183))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (fun_app$a less$ zero$) ?v0))) :named a184))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ zero$) ?v0)) :named a185))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ zero$) ?v0)) :named a186))
(assert (! (forall ((?v0 Nat$)) (= (= (fun_app$b of_nat$ ?v0) zero$) (= ?v0 zero$))) :named a187))
(assert (! (forall ((?v0 Nat$)) (= (= (fun_app$e of_nat$a ?v0) 0) (= ?v0 zero$))) :named a188))
(check-sat)
;;;;(get-proof)
