; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort A_list$ 0)
(declare-sort A_multiset_list$ 0)
(declare-fun n$ () Nat$)
(declare-fun asa$ () A_list$)
(declare-fun aAsa$ () A_multiset_list$)
(declare-fun size$ (A_multiset_list$) Nat$)
(declare-fun size$a (A_list$) Nat$)
(assert (! (not (= (size$ aAsa$) (size$a asa$))) :named a0))
(assert (! (= (size$ aAsa$) n$) :named a1))
(assert (! (= (size$a asa$) n$) :named a2))
(check-sat)
;;;;(get-proof)
