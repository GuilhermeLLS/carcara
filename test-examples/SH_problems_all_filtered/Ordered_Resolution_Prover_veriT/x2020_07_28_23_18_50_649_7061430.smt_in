; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort Enat$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$ 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$ 0)
(declare-fun c$ () A_literal_multiset$)
(declare-fun d$ () A_literal_multiset$)
(declare-fun i$ () Nat$)
(declare-fun sts$ () A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$)
(declare-fun sup$ (A_literal_multiset_set$ A_literal_multiset_set$) A_literal_multiset_set$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$ Nat$) A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$)
(declare-fun member$ (A_literal_multiset$ A_literal_multiset_set$) Bool)
(declare-fun llength$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$) Enat$)
(declare-fun subsumes$ (A_s_a_fun_fun$ A_literal_multiset$ A_literal_multiset$) Bool)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun n_of_state$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(declare-fun p_of_state$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(declare-fun q_of_state$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(assert (! (not (member$ d$ (sup$ (sup$ (n_of_state$ (lnth$ sts$ i$)) (p_of_state$ (lnth$ sts$ i$))) (q_of_state$ (lnth$ sts$ i$))))) :named a0))
(assert (! (member$ d$ (sup$ (sup$ (n_of_state$ (lnth$ sts$ i$)) (p_of_state$ (lnth$ sts$ i$))) (q_of_state$ (lnth$ sts$ i$)))) :named a1))
(assert (! (subsumes$ subst_atm$ d$ c$) :named a2))
(assert (! (less$ (enat$ i$) (llength$ sts$)) :named a3))
(check-sat)
;;;;(get-proof)
