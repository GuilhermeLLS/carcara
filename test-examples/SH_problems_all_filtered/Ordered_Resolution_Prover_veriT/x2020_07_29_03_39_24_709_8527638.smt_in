; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort A_list$ 0)
(declare-sort S_list$ 0)
(declare-sort A_multiset$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun d$ () A_literal_multiset$)
(declare-fun m$ () A_literal_multiset_set$)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun as$ () A_list$)
(declare-fun hd$ (S_list$) S$)
(declare-fun as0$ () A_list$)
(declare-fun dA0$ () A_literal_multiset$)
(declare-fun neg$ () A_a_literal_fun$)
(declare-fun s_M$ (A_s_a_fun_fun$ A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_set$ A_literal_multiset$) A_literal_multiset$)
(declare-fun cAs0$ () A_literal_multiset_list$)
(declare-fun cons$ (A_literal_multiset$ A_literal_multiset_list$) A_literal_multiset_list$)
(declare-fun mset$ (A_list$) A_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun zero$ () A_literal_multiset$)
(declare-fun fun_app$ (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset$) A_literal_multiset$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun image_mset$ (A_a_literal_fun$ A_multiset$) A_literal_multiset$)
(declare-fun renamings_apart$ (A_literal_multiset_list$) S_list$)
(assert (! (not (= (subst_cls$ subst_atm$ (image_mset$ neg$ (mset$ as0$)) (hd$ (renamings_apart$ (cons$ dA0$ cAs0$)))) (subst_cls$ subst_atm$ (fun_app$ s$ dA0$) (hd$ (renamings_apart$ (cons$ dA0$ cAs0$)))))) :named a0))
(assert (! (=> (not (= (s_M$ subst_atm$ s$ m$ (plus$ d$ (image_mset$ neg$ (mset$ as$)))) zero$)) (= (image_mset$ neg$ (mset$ as0$)) (fun_app$ s$ dA0$))) :named a1))
(assert (! (not (= (s_M$ subst_atm$ s$ m$ (plus$ d$ (image_mset$ neg$ (mset$ as$)))) zero$)) :named a2))
(check-sat)
;;;;(get-proof)
