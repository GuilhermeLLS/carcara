; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_set_llist$ 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$ 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$ 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_a_literal_multiset_set_fun$ 0)
(declare-fun uu$ () A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_a_literal_multiset_set_fun$)
(declare-fun sts$ () A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$)
(declare-fun sup$ (A_literal_multiset_set$ A_literal_multiset_set$) A_literal_multiset_set$)
(declare-fun lmap$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_a_literal_multiset_set_fun$ A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$) A_literal_multiset_set_llist$)
(declare-fun member$ (A_literal_multiset$ A_literal_multiset_set$) Bool)
(declare-fun fun_app$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_a_literal_multiset_set_fun$ A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun n_of_state$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(declare-fun p_of_state$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(declare-fun q_of_state$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(declare-fun liminf_llist$ (A_literal_multiset_set_llist$) A_literal_multiset_set$)
(declare-fun is_ground_cls$ (A_s_a_fun_fun$ A_literal_multiset$) Bool)
(declare-fun grounding_of_clss$ (A_s_a_fun_fun$ A_literal_multiset_set$) A_literal_multiset_set$)
(assert (! (forall ((?v0 A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$)) (! (= (fun_app$ uu$ ?v0) (grounding_of_clss$ subst_atm$ (sup$ (sup$ (n_of_state$ ?v0) (p_of_state$ ?v0)) (q_of_state$ ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (forall ((?v0 A_literal_multiset$)) (=> (member$ ?v0 (liminf_llist$ (lmap$ uu$ sts$))) (is_ground_cls$ subst_atm$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_literal_multiset$)) (=> (member$ ?v0 (liminf_llist$ (lmap$ uu$ sts$))) (is_ground_cls$ subst_atm$ ?v0))) :named a2))
(check-sat)
;;;;(get-proof)
