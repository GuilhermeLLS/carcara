; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort A_list$ 0)
(declare-sort A_literal$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_literal_list$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_a_literal_fun$ 0)
(declare-fun as$ () A_list$)
(declare-fun uu$ () A_literal_a_literal_fun$)
(declare-fun as$a () A_list$)
(declare-fun eta$ () S$)
(declare-fun map$ (A_literal_a_literal_fun$ A_literal_list$) A_literal_list$)
(declare-fun neg$ () A_a_literal_fun$)
(declare-fun sda$ () A_literal_multiset$)
(declare-fun map$a (A_a_literal_fun$ A_list$) A_literal_list$)
(declare-fun mset$ (A_literal_list$) A_literal_multiset$)
(declare-fun fun_app$ (A_literal_a_literal_fun$ A_literal$) A_literal$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_lit$ (A_s_a_fun_fun$ A_literal$ S$) A_literal$)
(assert (! (forall ((?v0 A_literal$)) (! (= (fun_app$ uu$ ?v0) (subst_lit$ subst_atm$ ?v0 eta$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (map$ uu$ (map$a neg$ as$)) (map$a neg$ as$a))) :named a1))
(assert (! (and (= (map$ uu$ (map$a neg$ as$)) (map$a neg$ as$a)) (= (mset$ (map$a neg$ as$)) sda$)) :named a2))
(check-sat)
;;;;(get-proof)
