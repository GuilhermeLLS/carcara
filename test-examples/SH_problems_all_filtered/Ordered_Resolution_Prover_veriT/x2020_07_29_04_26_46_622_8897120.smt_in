; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_list$ 0)
(declare-sort A_multiset$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun d$ () A_literal_multiset$)
(declare-fun asa$ () A_list$)
(declare-fun neg$ () A_a_literal_fun$)
(declare-fun s_G$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun mset$ (A_list$) A_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun eligible$ (A_literal_multiset_a_literal_multiset_fun$ A_list$ A_literal_multiset$) Bool)
(declare-fun image_mset$ (A_a_literal_fun$ A_multiset$) A_literal_multiset$)
(assert (! (not (eligible$ s_G$ asa$ (plus$ d$ (image_mset$ neg$ (mset$ asa$))))) :named a0))
(assert (! (eligible$ s_G$ asa$ (plus$ d$ (image_mset$ neg$ (mset$ asa$)))) :named a1))
(check-sat)
;;;;(get-proof)
