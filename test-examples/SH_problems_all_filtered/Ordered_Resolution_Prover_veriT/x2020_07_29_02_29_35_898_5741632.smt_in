; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_multiset$ 0)
(declare-fun e$ () A_literal_multiset$)
(declare-fun cs$ () A_literal_multiset_list$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun e$a () A_literal_multiset$)
(declare-fun cs$a () A_literal_multiset_list$)
(declare-fun dAa$ () A_literal_multiset$)
(declare-fun mset$ (A_literal_multiset_list$) A_literal_multiset_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun sigma$ () S$)
(declare-fun sigma$a () S$)
(declare-fun sigma$b () S$)
(declare-fun sigma$c () S$)
(declare-fun sum_mset$ (A_literal_multiset_multiset$) A_literal_multiset$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(assert (! (not (= e$ e$a)) :named a0))
(assert (! (= e$a (subst_cls$ subst_atm$ (plus$ (sum_mset$ (mset$ cs$)) da$) sigma$)) :named a1))
(assert (! (= e$ (subst_cls$ subst_atm$ (plus$ (sum_mset$ (mset$ cs$a)) dAa$) sigma$a)) :named a2))
(assert (! (= dAa$ da$) :named a3))
(assert (! (= cs$a cs$) :named a4))
(assert (! (= sigma$b sigma$) :named a5))
(assert (! (= sigma$c sigma$a) :named a6))
(assert (! (= sigma$c sigma$b) :named a7))
(check-sat)
;;;;(get-proof)
