; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort S_list$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-fun i$ () Nat$)
(declare-fun cs$ () A_literal_multiset_list$)
(declare-fun cs0$ () A_literal_multiset_list$)
(declare-fun eta$ () S$)
(declare-fun nth$ (A_literal_multiset_list$ Nat$) A_literal_multiset$)
(declare-fun eta_s0$ () S_list$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls_list$ (A_s_a_fun_fun$ A_literal_multiset_list$ S$) A_literal_multiset_list$)
(declare-fun subst_cls_lists$ (A_s_a_fun_fun$ A_literal_multiset_list$ S_list$) A_literal_multiset_list$)
(assert (! (not (= (nth$ (subst_cls_list$ subst_atm$ cs0$ eta$) i$) (nth$ cs$ i$))) :named a0))
(assert (! (= (nth$ (subst_cls_lists$ subst_atm$ cs0$ eta_s0$) i$) (nth$ cs$ i$)) :named a1))
(assert (! (= (nth$ (subst_cls_lists$ subst_atm$ cs0$ eta_s0$) i$) (nth$ (subst_cls_list$ subst_atm$ cs0$ eta$) i$)) :named a2))
(check-sat)
;;;;(get-proof)
