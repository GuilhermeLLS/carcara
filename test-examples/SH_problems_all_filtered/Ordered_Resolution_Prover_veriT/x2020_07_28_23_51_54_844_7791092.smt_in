; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$ 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$ 0)
(declare-fun j$ () Nat$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun bot$ () A_literal_multiset_set$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun set$ (A_literal_multiset_list$) A_literal_multiset_set$)
(declare-fun sts$ () A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$)
(declare-fun sup$ (A_literal_multiset_set$ A_literal_multiset_set$) A_literal_multiset_set$)
(declare-fun lnth$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist$ Nat$) A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$)
(declare-fun insert$ (A_literal_multiset$ A_literal_multiset_set$) A_literal_multiset_set$)
(declare-fun less_eq$ (A_literal_multiset_set$ A_literal_multiset_set$) Bool)
(declare-fun q_of_state$ (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod$) A_literal_multiset_set$)
(assert (! (not (less_eq$ (sup$ (set$ cAs$) (insert$ da$ bot$)) (q_of_state$ (lnth$ sts$ j$)))) :named a0))
(assert (! (less_eq$ (sup$ (set$ cAs$) (insert$ da$ bot$)) (q_of_state$ (lnth$ sts$ j$))) :named a1))
(check-sat)
;;;;(get-proof)
