; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort A_list$ 0)
(declare-sort S_list$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_multiset_list$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_set_set_s_option_fun$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun e0$ () A_literal_multiset$)
(declare-fun hd$ (S_list$) S$)
(declare-fun tl$ (S_list$) S_list$)
(declare-fun as0$ () A_list$)
(declare-fun dA0$ () A_literal_multiset$)
(declare-fun mgu$ () A_set_set_s_option_fun$)
(declare-fun rho$ () S$)
(declare-fun tau$ () S$)
(declare-fun aAs0$ () A_multiset_list$)
(declare-fun as0$a () A_list$)
(declare-fun cAs0$ () A_literal_multiset_list$)
(declare-fun cons$ (A_literal_multiset$ A_literal_multiset_list$) A_literal_multiset_list$)
(declare-fun dA0$a () A_literal_multiset$)
(declare-fun aAs0$a () A_multiset_list$)
(declare-fun cAs0$a () A_literal_multiset_list$)
(declare-fun rho_s$ () S_list$)
(declare-fun less_atm$ () A_a_bool_fun_fun$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun ord_resolve$ (A_s_a_fun_fun$ A_set_set_s_option_fun$ A_a_bool_fun_fun$ A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_list$ A_literal_multiset$ A_multiset_list$ A_list$ S$ A_literal_multiset$) Bool)
(declare-fun subst_atm_list$ (A_s_a_fun_fun$ A_list$ S$) A_list$)
(declare-fun renamings_apart$ (A_literal_multiset_list$) S_list$)
(declare-fun subst_cls_lists$ (A_s_a_fun_fun$ A_literal_multiset_list$ S_list$) A_literal_multiset_list$)
(declare-fun subst_atm_mset_lists$ (A_s_a_fun_fun$ A_multiset_list$ S_list$) A_multiset_list$)
(assert (! (not (ord_resolve$ subst_atm$ mgu$ less_atm$ s$ (subst_cls_lists$ subst_atm$ cAs0$ rho_s$) (subst_cls$ subst_atm$ dA0$ rho$) (subst_atm_mset_lists$ subst_atm$ aAs0$ rho_s$) (subst_atm_list$ subst_atm$ as0$ rho$) tau$ e0$)) :named a0))
(assert (! (= dA0$a (subst_cls$ subst_atm$ dA0$ rho$)) :named a1))
(assert (! (= cAs0$a (subst_cls_lists$ subst_atm$ cAs0$ rho_s$)) :named a2))
(assert (! (= as0$a (subst_atm_list$ subst_atm$ as0$ rho$)) :named a3))
(assert (! (= aAs0$a (subst_atm_mset_lists$ subst_atm$ aAs0$ rho_s$)) :named a4))
(assert (! (ord_resolve$ subst_atm$ mgu$ less_atm$ s$ cAs0$a dA0$a aAs0$a as0$a tau$ e0$) :named a5))
(assert (! (= rho_s$ (tl$ (renamings_apart$ (cons$ dA0$ cAs0$)))) :named a6))
(assert (! (= rho$ (hd$ (renamings_apart$ (cons$ dA0$ cAs0$)))) :named a7))
(check-sat)
;;;;(get-proof)
