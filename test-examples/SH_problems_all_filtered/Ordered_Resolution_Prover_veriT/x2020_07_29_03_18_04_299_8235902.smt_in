; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort A_list$ 0)
(declare-sort S_a_fun$ 0)
(declare-sort S_option$ 0)
(declare-sort A_set_set$ 0)
(declare-sort A_multiset$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_multiset_set$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_multiset_list$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_multiset_a_set_fun$ 0)
(declare-sort A_a_multiset_prod_list$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_multiset$ 0)
(declare-sort A_a_multiset_a_multiset_fun_fun$ 0)
(declare-sort A_a_multiset_prod_a_multiset_fun$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun d$ () A_literal_multiset$)
(declare-fun e$ () A_literal_multiset$)
(declare-fun m$ () A_literal_multiset_set$)
(declare-fun n$ () Nat$)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun as$ () A_list$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun aAs$ () A_multiset_list$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun map$ (A_a_multiset_prod_a_multiset_fun$ A_a_multiset_prod_list$) A_multiset_list$)
(declare-fun mgu$ (A_set_set$) S_option$)
(declare-fun neg$ () A_a_literal_fun$)
(declare-fun nth$ (A_list$ Nat$) A$)
(declare-fun pos$ () A_a_literal_fun$)
(declare-fun s_M$ (A_s_a_fun_fun$ A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_set$) A_literal_multiset_a_literal_multiset_fun$)
(declare-fun set$ (A_multiset_list$) A_multiset_set$)
(declare-fun zip$ (A_list$ A_multiset_list$) A_a_multiset_prod_list$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun mset$ (A_list$) A_multiset$)
(declare-fun nth$a (A_literal_multiset_list$ Nat$) A_literal_multiset$)
(declare-fun nth$b (A_multiset_list$ Nat$) A_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun size$ (A_literal_multiset_list$) Nat$)
(declare-fun some$ (S$) S_option$)
(declare-fun zero$ () A_literal_multiset$)
(declare-fun image$ (A_multiset_a_set_fun$ A_multiset_set$) A_set_set$)
(declare-fun mset$a (A_literal_multiset_list$) A_literal_multiset_multiset$)
(declare-fun sigma$ () S$)
(declare-fun size$a (A_multiset_list$) Nat$)
(declare-fun size$b (A_list$) Nat$)
(declare-fun zero$a () Nat$)
(declare-fun zero$b () A_multiset$)
(declare-fun d_twin$ () A_literal_multiset$)
(declare-fun n_twin$ () Nat$)
(declare-fun fun_app$ (S_a_fun$ S$) A$)
(declare-fun add_mset$ () A_a_multiset_a_multiset_fun_fun$)
(declare-fun cs_twins$ () A_literal_multiset_list$)
(declare-fun eligible$ (A_s_a_fun_fun$ A_a_bool_fun_fun$ A_literal_multiset_a_literal_multiset_fun$ S$ A_list$ A_literal_multiset$) Bool)
(declare-fun fun_app$a (A_s_a_fun_fun$ A$) S_a_fun$)
(declare-fun fun_app$b (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset$) A_literal_multiset$)
(declare-fun less_atm$ () A_a_bool_fun_fun$)
(declare-fun set_mset$ () A_multiset_a_set_fun$)
(declare-fun sum_mset$ (A_literal_multiset_multiset$) A_literal_multiset$)
(declare-fun case_prod$ (A_a_multiset_a_multiset_fun_fun$) A_a_multiset_prod_a_multiset_fun$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun image_mset$ (A_a_literal_fun$ A_multiset$) A_literal_multiset$)
(declare-fun strictly_maximal_wrt$ (A_a_bool_fun_fun$ A$ A_literal_multiset$) Bool)
(assert (! (not (= n_twin$ n$)) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (less$ ?v0 n_twin$) (strictly_maximal_wrt$ less_atm$ (fun_app$ (fun_app$a subst_atm$ (nth$ as$ ?v0)) sigma$) (subst_cls$ subst_atm$ (nth$a cs_twins$ ?v0) sigma$)))) :named a1))
(assert (! (forall ((?v0 Nat$)) (=> (less$ ?v0 n_twin$) (= (fun_app$b (s_M$ subst_atm$ s$ m$) (nth$a cAs$ ?v0)) zero$))) :named a2))
(assert (! (not (= n_twin$ zero$a)) :named a3))
(assert (! (= (size$ cs_twins$) n_twin$) :named a4))
(assert (! (= (size$a aAs$) n_twin$) :named a5))
(assert (! (forall ((?v0 Nat$)) (! (=> (less$ ?v0 n_twin$) (= (nth$a cAs$ ?v0) (plus$ (nth$a cs_twins$ ?v0) (image_mset$ pos$ (nth$b aAs$ ?v0))))) :pattern ((nth$a cAs$ ?v0)))) :named a6))
(assert (! (= (size$ cAs$) n$) :named a7))
(assert (! (forall ((?v0 Nat$)) (=> (less$ ?v0 n_twin$) (not (= (nth$b aAs$ ?v0) zero$b)))) :named a8))
(assert (! (= (size$ cAs$) n_twin$) :named a9))
(assert (! (= (size$b as$) n_twin$) :named a10))
(assert (! (eligible$ subst_atm$ less_atm$ (s_M$ subst_atm$ s$ m$) sigma$ as$ (plus$ d_twin$ (image_mset$ neg$ (mset$ as$)))) :named a11))
(assert (! (= da$ (plus$ d_twin$ (image_mset$ neg$ (mset$ as$)))) :named a12))
(assert (! (= e$ (subst_cls$ subst_atm$ (plus$ (sum_mset$ (mset$a cs_twins$)) d_twin$) sigma$)) :named a13))
(assert (! (= da$ (plus$ d$ (image_mset$ neg$ (mset$ as$)))) :named a14))
(assert (! (= (some$ sigma$) (mgu$ (image$ set_mset$ (set$ (map$ (case_prod$ add_mset$) (zip$ as$ aAs$)))))) :named a15))
(check-sat)
;;;;(get-proof)
