; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort Enat$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_set_llist$ 0)
(declare-fun c$ () A_literal_multiset$)
(declare-fun i$ () Nat$)
(declare-fun k$ () Nat$)
(declare-fun ns$ () A_literal_multiset_set_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_literal_multiset_set_llist$ Nat$) A_literal_multiset_set$)
(declare-fun member$ (A_literal_multiset$ A_literal_multiset_set$) Bool)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun llength$ (A_literal_multiset_set_llist$) Enat$)
(assert (! (not (member$ c$ (lnth$ ns$ k$))) :named a0))
(assert (! (=> (and (less_eq$ i$ k$) (less$ (enat$ k$) (llength$ ns$))) (member$ c$ (lnth$ ns$ k$))) :named a1))
(assert (! (less_eq$ i$ k$) :named a2))
(assert (! (less$ (enat$ k$) (llength$ ns$)) :named a3))
(check-sat)
;;;;(get-proof)
