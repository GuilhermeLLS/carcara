; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=3
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_a_a_prod_set_fun$ 0)
(declare-sort A_a_a_a_prod_set_fun_fun$ 0)
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun uu$ (Bool A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun wf$ (A_a_prod_set$) Bool)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun wfP$ (A_a_bool_fun_fun$) Bool)
(declare-fun pair$ (A$ A$) A_a_prod$)
(declare-fun member$ (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun collect$ (A_a_prod_bool_fun$) A_a_prod_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$c (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$d (A_a_a_prod_set_fun$ A$) A_a_prod_set$)
(declare-fun fun_app$e (A_a_a_a_prod_set_fun_fun$ A$) A_a_a_prod_set_fun$)
(declare-fun case_prod$ (A_a_bool_fun_fun$) A_a_prod_bool_fun$)
(declare-fun case_prod$a (A_a_a_a_prod_set_fun_fun$ A_a_prod$) A_a_prod_set$)
(assert (! (forall ((?v0 Bool) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$ (fun_app$a (uu$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uu$ ?v0 ?v1) ?v2) ?v3)))) :named a0))
(assert (! (not (= (wf$ (collect$ (case_prod$ r$))) (not (exists ((?v0 Nat_a_fun$)) (forall ((?v1 Nat$)) (member$ (pair$ (fun_app$b ?v0 (suc$ ?v1)) (fun_app$b ?v0 ?v1)) (collect$ (case_prod$ r$)))))))) :named a1))
(assert (! (forall ((?v0 A_a_prod_set$)) (= (wf$ ?v0) (not (exists ((?v1 Nat_a_fun$)) (forall ((?v2 Nat$)) (member$ (pair$ (fun_app$b ?v1 (suc$ ?v2)) (fun_app$b ?v1 ?v2)) ?v0)))))) :named a2))
(assert (! (= (wfP$ r$) (wf$ (collect$ (case_prod$ r$)))) :named a3))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$c (case_prod$ ?v0) (pair$ ?v1 ?v2)))) :named a4))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (=> (= ?v0 (pair$ ?v2 ?v3)) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) (fun_app$c (case_prod$ ?v1) ?v0))) :named a5))
(assert (! (forall ((?v0 A_a_a_a_prod_set_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (case_prod$a ?v0 (pair$ ?v1 ?v2)) (fun_app$d (fun_app$e ?v0 ?v1) ?v2)) :pattern ((case_prod$a ?v0 (pair$ ?v1 ?v2))))) :named a6))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$c (case_prod$ ?v0) (pair$ ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) :pattern ((fun_app$c (case_prod$ ?v0) (pair$ ?v1 ?v2))))) :named a7))
(assert (! (forall ((?v0 Bool) (?v1 A_a_bool_fun_fun$) (?v2 A_a_prod$)) (= (fun_app$c (case_prod$ (uu$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$c (case_prod$ ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_prod_set$) (?v1 Nat_a_fun$)) (=> (and (wf$ ?v0) (forall ((?v2 Nat$)) (=> (not (member$ (pair$ (fun_app$b ?v1 (suc$ ?v2)) (fun_app$b ?v1 ?v2)) ?v0)) false))) false)) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (=> (fun_app$c (case_prod$ ?v0) (pair$ ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2))) :named a14))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_a_a_prod_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 A$)) (=> (= ?v0 (pair$ ?v3 ?v4)) (member$ ?v1 (fun_app$d (fun_app$e ?v2 ?v3) ?v4)))) (member$ ?v1 (case_prod$a ?v2 ?v0)))) :named a15))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_a_a_prod_set_fun_fun$) (?v2 A$) (?v3 A$)) (=> (member$ ?v0 (fun_app$d (fun_app$e ?v1 ?v2) ?v3)) (member$ ?v0 (case_prod$a ?v1 (pair$ ?v2 ?v3))))) :named a16))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_a_a_prod_set_fun_fun$) (?v2 A_a_prod$)) (=> (and (member$ ?v0 (case_prod$a ?v1 ?v2)) (forall ((?v3 A$) (?v4 A$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (member$ ?v0 (fun_app$d (fun_app$e ?v1 ?v3) ?v4))) false))) false)) :named a17))
(assert (! (forall ((?v0 A_a_prod$)) (=> (forall ((?v1 A$) (?v2 A$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a18))
(check-sat)
;;;;(get-proof)
