; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_list$ 0)
(declare-sort A_literal$ 0)
(declare-sort A_multiset$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-fun d$ () A_literal_multiset$)
(declare-fun as$ () A_list$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun neg$ () A_a_literal_fun$)
(declare-fun nth$ (A_list$ Nat$) A$)
(declare-fun mset$ (A_list$) A_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun zero$ () Nat$)
(declare-fun zero$a () A_literal_multiset$)
(declare-fun d_twin$ () A_literal_multiset$)
(declare-fun fun_app$ (A_a_literal_fun$ A$) A_literal$)
(declare-fun add_mset$ (A_literal$ A_literal_multiset$) A_literal_multiset$)
(declare-fun image_mset$ (A_a_literal_fun$ A_multiset$) A_literal_multiset$)
(assert (! (not (= da$ (plus$ d$ (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a)))) :named a0))
(assert (! (= da$ (plus$ d$ (image_mset$ neg$ (mset$ as$)))) :named a1))
(assert (! (= (image_mset$ neg$ (mset$ as$)) (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a)) :named a2))
(assert (! (= d_twin$ d$) :named a3))
(assert (! (= da$ (plus$ d_twin$ (image_mset$ neg$ (mset$ as$)))) :named a4))
(check-sat)
;;;;(get-proof)
