; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort A_list$ 0)
(declare-sort S_list$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_multiset_list$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-fun n$ () Nat$)
(declare-fun as$ () A_list$)
(declare-fun cs$ () A_literal_multiset_list$)
(declare-fun aAs$ () A_multiset_list$)
(declare-fun as0$ () A_list$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun cs0$ () A_literal_multiset_list$)
(declare-fun dA0$ () A_literal_multiset$)
(declare-fun eta$ () S$)
(declare-fun nth$ (A_literal_multiset_list$ Nat$) A_literal_multiset$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun aAs0$ () A_multiset_list$)
(declare-fun as0$a () A_list$)
(declare-fun cAs0$ () A_literal_multiset_list$)
(declare-fun cons$ (A_literal_multiset$ A_literal_multiset_list$) A_literal_multiset_list$)
(declare-fun cs0$a () A_literal_multiset_list$)
(declare-fun dA0$a () A_literal_multiset$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun nth$a (S_list$ Nat$) S$)
(declare-fun size$ (A_literal_multiset_list$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun aAs0$a () A_multiset_list$)
(declare-fun cAs0$a () A_literal_multiset_list$)
(declare-fun cons$a (S$ S_list$) S_list$)
(declare-fun eta_0$ () S$)
(declare-fun rho_s$ () S_list$)
(declare-fun size$a (A_multiset_list$) Nat$)
(declare-fun size$b (A_list$) Nat$)
(declare-fun size$c (S_list$) Nat$)
(declare-fun eta_s0$ () S_list$)
(declare-fun eta_s0$a () S_list$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun subseteq_mset$ (A_literal_multiset$ A_literal_multiset$) Bool)
(declare-fun subst_cls_list$ (A_s_a_fun_fun$ A_literal_multiset_list$ S$) A_literal_multiset_list$)
(declare-fun renamings_apart$ (A_literal_multiset_list$) S_list$)
(declare-fun subst_cls_lists$ (A_s_a_fun_fun$ A_literal_multiset_list$ S_list$) A_literal_multiset_list$)
(assert (! (not (= (subst_cls_list$ subst_atm$ cAs0$ eta$) cAs$)) :named a0))
(assert (! (= (size$ cAs0$) n$) :named a1))
(assert (! (= (size$ cAs$) n$) :named a2))
(assert (! (forall ((?v0 Nat$)) (=> (less$ ?v0 (suc$ n$)) (forall ((?v1 A_literal_multiset$)) (=> (subseteq_mset$ ?v1 (nth$ (cons$ dA0$ cAs0$) ?v0)) (= (subst_cls$ subst_atm$ ?v1 (nth$a (cons$a eta_0$ eta_s0$) ?v0)) (subst_cls$ subst_atm$ ?v1 eta$)))))) :named a3))
(assert (! (= (size$a aAs$) n$) :named a4))
(assert (! (= (size$b as$) n$) :named a5))
(assert (! (= (size$c (renamings_apart$ (cons$ dA0$a cAs0$a))) (suc$ n$)) :named a6))
(assert (! (= (size$ cs$) n$) :named a7))
(assert (! (= (subst_cls_lists$ subst_atm$ cAs0$ eta_s0$) cAs$) :named a8))
(assert (! (not (= n$ zero$)) :named a9))
(assert (! (= (subst_cls_lists$ subst_atm$ cAs0$ eta_s0$) (subst_cls_list$ subst_atm$ cAs0$ eta$)) :named a10))
(assert (! (= (size$b as0$) n$) :named a11))
(assert (! (= (size$a aAs0$) n$) :named a12))
(assert (! (= (size$a aAs0$a) n$) :named a13))
(assert (! (= (size$ cs0$) n$) :named a14))
(assert (! (= (size$b as0$a) n$) :named a15))
(assert (! (= (size$ cs0$a) n$) :named a16))
(assert (! (= (size$ cAs0$a) n$) :named a17))
(assert (! (= (size$c eta_s0$) n$) :named a18))
(assert (! (= (size$c rho_s$) n$) :named a19))
(assert (! (= (size$c eta_s0$a) n$) :named a20))
(check-sat)
;;;;(get-proof)
