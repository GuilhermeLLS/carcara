; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_multiset$ 0)
(declare-fun n$ () Nat$)
(declare-fun cs$ () A_literal_multiset_list$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun nth$ (A_literal_multiset_list$ Nat$) A_literal_multiset$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun mset$ (A_literal_multiset_list$) A_literal_multiset_multiset$)
(declare-fun size$ (A_literal_multiset_list$) Nat$)
(declare-fun sum_mset$ (A_literal_multiset_multiset$) A_literal_multiset$)
(declare-fun subseteq_mset$ (A_literal_multiset$ A_literal_multiset$) Bool)
(assert (! (not (subseteq_mset$ (sum_mset$ (mset$ cs$)) (sum_mset$ (mset$ cAs$)))) :named a0))
(assert (! (forall ((?v0 A_literal_multiset_list$) (?v1 Nat$) (?v2 A_literal_multiset_list$)) (=> (and (= (size$ ?v0) ?v1) (and (= (size$ ?v2) ?v1) (forall ((?v3 Nat$)) (=> (less$ ?v3 ?v1) (subseteq_mset$ (nth$ ?v0 ?v3) (nth$ ?v2 ?v3)))))) (subseteq_mset$ (sum_mset$ (mset$ ?v0)) (sum_mset$ (mset$ ?v2))))) :named a1))
(assert (! (= (size$ cAs$) n$) :named a2))
(assert (! (= (size$ cs$) n$) :named a3))
(assert (! (subseteq_mset$ (sum_mset$ (mset$ cs$)) (sum_mset$ (mset$ cAs$))) :named a4))
(check-sat)
;;;;(get-proof)
