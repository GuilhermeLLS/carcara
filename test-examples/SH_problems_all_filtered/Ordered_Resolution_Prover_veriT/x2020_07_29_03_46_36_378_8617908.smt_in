; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort S_list$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun m$ () A_literal_multiset_set$)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun eta$ () S$)
(declare-fun map$ (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_list$) A_literal_multiset_list$)
(declare-fun s_M$ (A_s_a_fun_fun$ A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_set$) A_literal_multiset_a_literal_multiset_fun$)
(declare-fun cAs0$ () A_literal_multiset_list$)
(declare-fun eta_s0$ () S_list$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls_list$ (A_s_a_fun_fun$ A_literal_multiset_list$ S$) A_literal_multiset_list$)
(declare-fun subst_cls_lists$ (A_s_a_fun_fun$ A_literal_multiset_list$ S_list$) A_literal_multiset_list$)
(assert (! (not (= (subst_cls_list$ subst_atm$ (map$ s$ cAs0$) eta$) (map$ (s_M$ subst_atm$ s$ m$) cAs$))) :named a0))
(assert (! (= (subst_cls_lists$ subst_atm$ (map$ s$ cAs0$) eta_s0$) (subst_cls_list$ subst_atm$ (map$ s$ cAs0$) eta$)) :named a1))
(assert (! (= (subst_cls_lists$ subst_atm$ (map$ s$ cAs0$) eta_s0$) (map$ (s_M$ subst_atm$ s$ m$) cAs$)) :named a2))
(check-sat)
;;;;(get-proof)
