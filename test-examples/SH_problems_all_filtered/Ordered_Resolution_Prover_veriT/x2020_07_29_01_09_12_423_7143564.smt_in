; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort Enat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_set_llist$ 0)
(declare-fun k$ () Nat$)
(declare-fun xs$ () A_set_llist$)
(declare-fun bot$ () A_set$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_set_llist$ Nat$) A_set$)
(declare-fun llast$ (A_set_llist$) A_set$)
(declare-fun lnull$ (A_set_llist$) Bool)
(declare-fun llength$ (A_set_llist$) Enat$)
(declare-fun liminf_upto_llist$ (A_set_llist$ Enat$) A_set$)
(assert (! (not (= (liminf_upto_llist$ xs$ (enat$ k$)) (ite (less$ (enat$ k$) (llength$ xs$)) (lnth$ xs$ k$) (ite (lnull$ xs$) bot$ (llast$ xs$))))) :named a0))
(assert (! (not (lnull$ xs$)) :named a1))
(assert (! (not (less$ (enat$ k$) (llength$ xs$))) :named a2))
(assert (! (= (liminf_upto_llist$ xs$ (enat$ k$)) (llast$ xs$)) :named a3))
(check-sat)
;;;;(get-proof)
