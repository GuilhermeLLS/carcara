; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort S_set$ 0)
(declare-sort A_list$ 0)
(declare-sort S_list$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_multiset_list$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-fun n$ () Nat$)
(declare-fun as$ () A_list$)
(declare-fun cs$ () A_literal_multiset_list$)
(declare-fun aAs$ () A_multiset_list$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun set$ (S_list$) S_set$)
(declare-fun cAs0$ () A_literal_multiset_list$)
(declare-fun size$ (S_list$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun size$a (A_multiset_list$) Nat$)
(declare-fun size$b (A_literal_multiset_list$) Nat$)
(declare-fun size$c (A_list$) Nat$)
(declare-fun eta_s0$ () S_list$)
(declare-fun member$ (S$ S_set$) Bool)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun is_ground_subst$ (A_s_a_fun_fun$ S$) Bool)
(assert (! (not (forall ((?v0 S$)) (=> (member$ ?v0 (set$ eta_s0$)) (is_ground_subst$ subst_atm$ ?v0)))) :named a0))
(assert (! (= (size$ eta_s0$) n$) :named a1))
(assert (! (forall ((?v0 S$)) (=> (member$ ?v0 (set$ eta_s0$)) (is_ground_subst$ subst_atm$ ?v0))) :named a2))
(assert (! (= (size$a aAs$) n$) :named a3))
(assert (! (= (size$b cs$) n$) :named a4))
(assert (! (= (size$c as$) n$) :named a5))
(assert (! (= (size$b cAs0$) n$) :named a6))
(assert (! (= (size$b cAs$) n$) :named a7))
(assert (! (not (= n$ zero$)) :named a8))
(check-sat)
;;;;(get-proof)
