; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=3
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort S_a_fun$ 0)
(declare-sort S_s_fun$ 0)
(declare-sort A_literal$ 0)
(declare-sort A_list_a_fun$ 0)
(declare-sort A_literal_set$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort S_s_s_fun_fun$ 0)
(declare-sort A_literal_bool_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_a_literal_fun$ 0)
(declare-sort S_a_literal_multiset_fun$ 0)
(declare-sort A_literal_multiset_bool_fun$ 0)
(declare-sort A_literal_multiset_list_s_list_fun$ 0)
(declare-fun c$ () A_literal_multiset$)
(declare-fun uu$ (A_s_a_fun_fun$ A_literal_multiset$) A_literal_multiset_bool_fun$)
(declare-fun neg$ (A$) A_literal$)
(declare-fun pos$ (A$) A_literal$)
(declare-fun uua$ (S$) A_literal_a_literal_fun$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun size$ (A_literal_multiset$) Nat$)
(declare-fun less$a (A_literal_set$ A_literal_set$) Bool)
(declare-fun member$ (A_literal$ A_literal_set$) Bool)
(declare-fun collect$ (A_literal_multiset_bool_fun$) A_literal_multiset_set$)
(declare-fun fun_app$ (A_literal_a_literal_fun$ A_literal$) A_literal$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun member$a (A_literal_multiset$ A_literal_multiset_set$) Bool)
(declare-fun collect$a (A_literal_bool_fun$) A_literal_set$)
(declare-fun fun_app$a (A_literal_multiset_bool_fun$ A_literal_multiset$) Bool)
(declare-fun fun_app$b (S_a_literal_multiset_fun$ S$) A_literal_multiset$)
(declare-fun fun_app$c (A_literal_bool_fun$ A_literal$) Bool)
(declare-fun fun_app$d (S_s_fun$ S$) S$)
(declare-fun fun_app$e (S_s_s_fun_fun$ S$) S_s_fun$)
(declare-fun fun_app$f (S_a_fun$ S$) A$)
(declare-fun fun_app$g (A_s_a_fun_fun$ A$) S_a_fun$)
(declare-fun id_subst$ () S$)
(declare-fun less_eq$a (A_literal_multiset_set$ A_literal_multiset_set$) Bool)
(declare-fun less_eq$b (A_literal_set$ A_literal_set$) Bool)
(declare-fun set_mset$ (A_literal_multiset$) A_literal_set$)
(declare-fun subsumes$ (A_s_a_fun_fun$ A_literal_multiset$) A_literal_multiset_bool_fun$)
(declare-fun variants$ (A_s_a_fun_fun$ A_literal_multiset$) A_literal_multiset_bool_fun$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$) S_a_literal_multiset_fun$)
(declare-fun subst_lit$ (A_s_a_fun_fun$ A_literal$ S$) A_literal$)
(declare-fun comp_subst$ () S_s_s_fun_fun$)
(declare-fun image_mset$ (A_literal_a_literal_fun$ A_literal_multiset$) A_literal_multiset$)
(declare-fun generalizes$ (A_s_a_fun_fun$ A_literal_multiset$) A_literal_multiset_bool_fun$)
(declare-fun subset_mset$ (A_literal_multiset$) A_literal_multiset_bool_fun$)
(declare-fun substitution$ (A_s_a_fun_fun$ S$ S_s_s_fun_fun$ A_literal_multiset_list_s_list_fun$ A_list_a_fun$) Bool)
(declare-fun is_ground_cls$ (A_s_a_fun_fun$) A_literal_multiset_bool_fun$)
(declare-fun subseteq_mset$ (A_literal_multiset$) A_literal_multiset_bool_fun$)
(declare-fun is_ground_subst$ (A_s_a_fun_fun$ S$) Bool)
(declare-fun grounding_of_cls$ (A_s_a_fun_fun$ A_literal_multiset$) A_literal_multiset_set$)
(declare-fun strictly_subsumes$ (A_s_a_fun_fun$ A_literal_multiset$) A_literal_multiset_bool_fun$)
(assert (! (forall ((?v0 S$) (?v1 A_literal$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (subst_lit$ subst_atm$ ?v1 ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_s_a_fun_fun$) (?v1 A_literal_multiset$) (?v2 A_literal_multiset$)) (! (= (fun_app$a (uu$ ?v0 ?v1) ?v2) (exists ((?v3 S$)) (and (= ?v2 (fun_app$b (subst_cls$ ?v0 ?v1) ?v3)) (is_ground_subst$ ?v0 ?v3)))) :pattern ((fun_app$a (uu$ ?v0 ?v1) ?v2)))) :named a1))
(assert (! (not (exists ((?v0 S$)) (= (fun_app$b (subst_cls$ subst_atm$ c$) ?v0) c$))) :named a2))
(assert (! (forall ((?v0 A_literal$) (?v1 A_literal_multiset$) (?v2 S$)) (= (member$ ?v0 (set_mset$ (fun_app$b (subst_cls$ subst_atm$ ?v1) ?v2))) (exists ((?v3 A_literal$)) (and (member$ ?v3 (set_mset$ ?v1)) (= ?v0 (subst_lit$ subst_atm$ ?v3 ?v2)))))) :named a3))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$)) (= (fun_app$a (generalizes$ subst_atm$ ?v0) ?v1) (exists ((?v2 S$)) (= (fun_app$b (subst_cls$ subst_atm$ ?v0) ?v2) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 S$)) (= (size$ (fun_app$b (subst_cls$ subst_atm$ ?v0) ?v1)) (size$ ?v0))) :named a5))
(assert (! (forall ((?v0 S$) (?v1 A_literal_multiset$)) (=> (is_ground_subst$ subst_atm$ ?v0) (fun_app$a (is_ground_cls$ subst_atm$) (fun_app$b (subst_cls$ subst_atm$ ?v1) ?v0)))) :named a6))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0))) :named a7))
(assert (! (forall ((?v0 A_literal$) (?v1 A_literal_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$c ?v1 ?v0))) :named a8))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$) (?v2 S$)) (= (fun_app$b (subst_cls$ subst_atm$ (plus$ ?v0 ?v1)) ?v2) (plus$ (fun_app$b (subst_cls$ subst_atm$ ?v0) ?v2) (fun_app$b (subst_cls$ subst_atm$ ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 S$) (?v2 S$)) (= (fun_app$b (subst_cls$ subst_atm$ ?v0) (fun_app$d (fun_app$e comp_subst$ ?v1) ?v2)) (fun_app$b (subst_cls$ subst_atm$ (fun_app$b (subst_cls$ subst_atm$ ?v0) ?v1)) ?v2))) :named a10))
(assert (! (forall ((?v0 A_literal_multiset$)) (! (= (fun_app$b (subst_cls$ subst_atm$ ?v0) id_subst$) ?v0) :pattern ((subst_cls$ subst_atm$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_s_a_fun_fun$) (?v1 A_literal_multiset$) (?v2 A_literal_multiset$)) (= (fun_app$a (subsumes$ ?v0 ?v1) ?v2) (exists ((?v3 S$)) (fun_app$a (subseteq_mset$ (fun_app$b (subst_cls$ ?v0 ?v1) ?v3)) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_s_a_fun_fun$) (?v1 S$) (?v2 S_s_s_fun_fun$) (?v3 A_literal_multiset_list_s_list_fun$) (?v4 A_list_a_fun$) (?v5 A_literal_multiset$) (?v6 S$)) (=> (substitution$ ?v0 ?v1 ?v2 ?v3 ?v4) (= (size$ (fun_app$b (subst_cls$ ?v0 ?v5) ?v6)) (size$ ?v5)))) :named a13))
(assert (! (forall ((?v0 A_s_a_fun_fun$) (?v1 A_literal_multiset$)) (= (grounding_of_cls$ ?v0 ?v1) (collect$ (uu$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_s_a_fun_fun$) (?v1 A_literal_multiset$) (?v2 A_literal_multiset$)) (! (= (fun_app$a (variants$ ?v0 ?v1) ?v2) (and (fun_app$a (generalizes$ ?v0 ?v1) ?v2) (fun_app$a (generalizes$ ?v0 ?v2) ?v1))) :pattern ((fun_app$a (variants$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$)) (=> (fun_app$a (subseteq_mset$ ?v0) ?v1) (less_eq$ (size$ ?v0) (size$ ?v1)))) :named a16))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$)) (= (fun_app$a (subseteq_mset$ ?v0) ?v1) (exists ((?v2 A_literal_multiset$)) (= ?v1 (plus$ ?v0 ?v2))))) :named a17))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$)) (= (fun_app$a (subsumes$ subst_atm$ ?v0) ?v1) (exists ((?v2 S$)) (fun_app$a (subseteq_mset$ (fun_app$b (subst_cls$ subst_atm$ ?v0) ?v2)) ?v1)))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 S$) (?v2 A$)) (= (= (subst_lit$ subst_atm$ (neg$ ?v0) ?v1) (neg$ ?v2)) (= (fun_app$f (fun_app$g subst_atm$ ?v0) ?v1) ?v2))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 S$) (?v2 A$)) (= (= (subst_lit$ subst_atm$ (pos$ ?v0) ?v1) (pos$ ?v2)) (= (fun_app$f (fun_app$g subst_atm$ ?v0) ?v1) ?v2))) :named a20))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$)) (=> (= ?v0 ?v1) (fun_app$a (subseteq_mset$ ?v0) ?v1))) :named a21))
(assert (! (forall ((?v0 A_s_a_fun_fun$) (?v1 S$) (?v2 S_s_s_fun_fun$) (?v3 A_literal_multiset_list_s_list_fun$) (?v4 A_list_a_fun$) (?v5 S$) (?v6 S$)) (=> (and (substitution$ ?v0 ?v1 ?v2 ?v3 ?v4) (is_ground_subst$ ?v0 ?v5)) (is_ground_subst$ ?v0 (fun_app$d (fun_app$e ?v2 ?v6) ?v5)))) :named a22))
(assert (! (forall ((?v0 A_literal_multiset$)) (= (fun_app$a (is_ground_cls$ subst_atm$) ?v0) (forall ((?v1 S$)) (= ?v0 (fun_app$b (subst_cls$ subst_atm$ ?v0) ?v1))))) :named a23))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$)) (=> (fun_app$a (subset_mset$ ?v0) ?v1) (less$ (size$ ?v0) (size$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_literal_multiset_set$) (?v1 A_literal_multiset_set$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 A_literal_multiset$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))))) :named a25))
(assert (! (forall ((?v0 A_literal_set$) (?v1 A_literal_set$)) (= (less_eq$b ?v0 ?v1) (forall ((?v2 A_literal$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a26))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 S$)) (= (fun_app$b (subst_cls$ subst_atm$ ?v0) ?v1) (image_mset$ (uua$ ?v1) ?v0))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less_eq$ ?v0 ?v1) (not (less$ ?v1 ?v0)))) :named a28))
(assert (! (forall ((?v0 A_literal_set$) (?v1 A_literal_set$)) (=> (less_eq$b ?v0 ?v1) (not (less$a ?v1 ?v0)))) :named a29))
(assert (! (forall ((?v0 S$) (?v1 S$)) (=> (is_ground_subst$ subst_atm$ ?v0) (is_ground_subst$ subst_atm$ (fun_app$d (fun_app$e comp_subst$ ?v1) ?v0)))) :named a30))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$) (?v2 A_literal_a_literal_fun$)) (=> (fun_app$a (subset_mset$ ?v0) ?v1) (fun_app$a (subset_mset$ (image_mset$ ?v2 ?v0)) (image_mset$ ?v2 ?v1)))) :named a31))
(assert (! (forall ((?v0 A_literal_multiset_set$) (?v1 A_literal_multiset_set$) (?v2 A_literal_multiset$)) (=> (and (less_eq$a ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1))) :named a32))
(assert (! (forall ((?v0 A_literal_set$) (?v1 A_literal_set$) (?v2 A_literal$)) (=> (and (less_eq$b ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1))) :named a33))
(assert (! (forall ((?v0 A_s_a_fun_fun$) (?v1 A_literal_multiset$) (?v2 A_literal_multiset$)) (! (= (fun_app$a (strictly_subsumes$ ?v0 ?v1) ?v2) (and (fun_app$a (subsumes$ ?v0 ?v1) ?v2) (not (fun_app$a (subsumes$ ?v0 ?v2) ?v1)))) :pattern ((fun_app$a (strictly_subsumes$ ?v0 ?v1) ?v2)))) :named a34))
(check-sat)
;;;;(get-proof)
