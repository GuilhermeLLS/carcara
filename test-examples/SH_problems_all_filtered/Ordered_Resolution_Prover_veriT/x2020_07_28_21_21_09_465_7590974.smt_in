; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=3
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_nat_fun$ 0)
(declare-sort Nat_a_literal_multiset_fun$ 0)
(declare-fun c$ () Nat_a_literal_multiset_fun$)
(declare-fun c$a () A_literal_multiset$)
(declare-fun cc$ () A_literal_multiset_set$)
(declare-fun bot$ () A_literal_multiset_set$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun comp$ (A_literal_multiset_nat_fun$ Nat_a_literal_multiset_fun$) Nat_nat_fun$)
(declare-fun size$ () A_literal_multiset_nat_fun$)
(declare-fun member$ (A_literal_multiset$ A_literal_multiset_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ () Nat_nat_bool_fun_fun$)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$b (A_literal_multiset_nat_fun$ A_literal_multiset$) Nat$)
(declare-fun fun_app$c (Nat_a_literal_multiset_fun$ Nat$) A_literal_multiset$)
(declare-fun fun_app$d (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (forall ((?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$b size$ (fun_app$c c$ ?v1)) (fun_app$b size$ (fun_app$c c$ (fun_app$d suc$ ?v1)))))) thesis$)) :named a1))
(assert (! (exists ((?v0 Nat$)) (forall ((?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$b size$ (fun_app$c c$ ?v1)) (fun_app$b size$ (fun_app$c c$ (fun_app$d suc$ ?v1))))))) :named a2))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b size$ (fun_app$c c$ (fun_app$d suc$ ?v0)))) (fun_app$b size$ (fun_app$c c$ ?v0)))) :named a3))
(assert (! (forall ((?v0 Nat_nat_fun$)) (=> (forall ((?v1 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v0 (fun_app$d suc$ ?v1))) (fun_app$d ?v0 ?v1))) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (= (fun_app$d ?v0 ?v2) (fun_app$d ?v0 (fun_app$d suc$ ?v2)))))))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (fun_app$a less_eq$ (fun_app$d suc$ ?v0)) (fun_app$d suc$ ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$d (comp$ size$ c$) (fun_app$d suc$ ?v0))) (fun_app$d (comp$ size$ c$) ?v0))) :named a6))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v0 ?v3)) (fun_app$d ?v0 (fun_app$d suc$ ?v3)))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v0 ?v1)) (fun_app$d ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v0 (fun_app$d suc$ ?v3))) (fun_app$d ?v0 ?v3))) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v0 ?v2)) (fun_app$d ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (member$ (fun_app$c c$ ?v0) cc$)) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$d suc$ ?v0) (fun_app$d suc$ ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$d suc$ ?v0) (fun_app$d suc$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$d suc$ ?v0)) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$d suc$ ?v1)) (and (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) false) (=> (= ?v0 (fun_app$d suc$ ?v1)) false))) false)) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$d suc$ ?v1)))) :named a15))
(assert (! (member$ c$a cc$) :named a16))
(assert (! (=> (forall ((?v0 A_literal_multiset$)) (=> (member$ ?v0 cc$) false)) false) :named a17))
(assert (! (not (= cc$ bot$)) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v1 ?v0))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1))) :named a21))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v3) ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)))) (fun_app$ (fun_app$a ?v0 ?v1) ?v2))) :named a22))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) false) (=> (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)) false)))))) false)) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) false) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) false)) false)) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a33))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0))) :named a34))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a36))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$d ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v2 ?v4)) (fun_app$d ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v2 ?v0)) ?v3))) :named a37))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v1 ?v4)) (fun_app$d ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$d ?v1 ?v3)))) :named a38))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v2 ?v4)) (fun_app$d ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v2 ?v0)) ?v3))) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$d ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$d ?v1 ?v4)) (fun_app$d ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$d ?v1 ?v3)))) :named a40))
(check-sat)
;;;;(get-proof)
