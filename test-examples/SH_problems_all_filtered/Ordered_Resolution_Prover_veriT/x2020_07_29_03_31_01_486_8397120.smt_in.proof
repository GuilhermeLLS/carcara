(assume a0 (not (= da$ (plus$ d$ (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a)))))
(assume a1 (= da$ (plus$ d$ (image_mset$ neg$ (mset$ as$)))))
(assume a2 (= (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a) (image_mset$ neg$ (mset$ as$))))
(step t4 (cl (not (= da$ (plus$ d$ (image_mset$ neg$ (mset$ as$))))) (not (= (plus$ d$ (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a)) (plus$ d$ (image_mset$ neg$ (mset$ as$))))) (= da$ (plus$ d$ (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a)))) :rule eq_transitive)
(step t5 (cl (not (= d$ d$)) (not (= (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a) (image_mset$ neg$ (mset$ as$)))) (= (plus$ d$ (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a)) (plus$ d$ (image_mset$ neg$ (mset$ as$))))) :rule eq_congruent)
(step t6 (cl (= d$ d$)) :rule eq_reflexive)
(step t7 (cl (not (= (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a) (image_mset$ neg$ (mset$ as$)))) (= (plus$ d$ (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a)) (plus$ d$ (image_mset$ neg$ (mset$ as$))))) :rule th_resolution :premises (t5 t6))
(step t8 (cl (not (= da$ (plus$ d$ (image_mset$ neg$ (mset$ as$))))) (= da$ (plus$ d$ (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a))) (not (= (add_mset$ (fun_app$ neg$ (nth$ as$ zero$)) zero$a) (image_mset$ neg$ (mset$ as$))))) :rule th_resolution :premises (t4 t7))
(step t9 (cl) :rule resolution :premises (t8 a0 a1 a2))
