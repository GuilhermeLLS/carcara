; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort S_list$ 0)
(declare-sort A_multiset$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_multiset_list$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-fun i$ () Nat$)
(declare-fun aA0$ () A_multiset$)
(declare-fun aAs$ () A_multiset_list$)
(declare-fun nth$ (A_literal_multiset_list$ Nat$) A_literal_multiset$)
(declare-fun pos$ () A_a_literal_fun$)
(declare-fun cAs0$ () A_literal_multiset_list$)
(declare-fun nth$a (S_list$ Nat$) S$)
(declare-fun nth$b (A_multiset_list$ Nat$) A_multiset$)
(declare-fun eta_s0$ () S_list$)
(declare-fun poss_AA0$ () A_literal_multiset$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun image_mset$ (A_a_literal_fun$ A_multiset$) A_literal_multiset$)
(declare-fun subseteq_mset$ (A_literal_multiset$ A_literal_multiset$) Bool)
(assert (! (not (subseteq_mset$ (image_mset$ pos$ aA0$) (nth$ cAs0$ i$))) :named a0))
(assert (! (and (= (subst_cls$ subst_atm$ poss_AA0$ (nth$a eta_s0$ i$)) (image_mset$ pos$ (nth$b aAs$ i$))) (subseteq_mset$ poss_AA0$ (nth$ cAs0$ i$))) :named a1))
(assert (! (= (image_mset$ pos$ aA0$) poss_AA0$) :named a2))
(check-sat)
;;;;(get-proof)
