; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_set$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_set_llist$ 0)
(declare-fun ns$ () A_literal_multiset_set_llist$)
(declare-fun finite$ (A_literal_multiset_set$) Bool)
(declare-fun less_eq$ (A_literal_multiset_set$ A_literal_multiset_set$) Bool)
(declare-fun sup_llist$ (A_literal_multiset_set_llist$) A_literal_multiset_set$)
(declare-fun true_clss$ (A_set$ A_literal_multiset_set$) Bool)
(assert (! (not (exists ((?v0 A_set$)) (true_clss$ ?v0 (sup_llist$ ns$)))) :named a0))
(assert (! (forall ((?v0 A_literal_multiset_set$)) (=> (not (exists ((?v1 A_set$)) (true_clss$ ?v1 ?v0))) (exists ((?v1 A_literal_multiset_set$)) (and (less_eq$ ?v1 ?v0) (and (finite$ ?v1) (not (exists ((?v2 A_set$)) (true_clss$ ?v2 ?v1)))))))) :named a1))
(assert (! (forall ((?v0 A_literal_multiset_set$)) (=> (and (finite$ ?v0) (less_eq$ ?v0 (sup_llist$ ns$))) (exists ((?v1 A_set$)) (true_clss$ ?v1 ?v0)))) :named a2))
(check-sat)
;;;;(get-proof)
