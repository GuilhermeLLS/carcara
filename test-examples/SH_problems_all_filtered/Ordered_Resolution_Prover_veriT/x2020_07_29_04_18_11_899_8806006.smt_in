; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort A_list$ 0)
(declare-sort S_option$ 0)
(declare-sort A_set_set$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_multiset_set$ 0)
(declare-sort A_multiset_list$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_multiset_a_set_fun$ 0)
(declare-sort A_a_multiset_prod_list$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_multiset$ 0)
(declare-sort A_a_multiset_a_multiset_fun_fun$ 0)
(declare-sort A_a_multiset_prod_a_multiset_fun$ 0)
(declare-fun d0$ () A_literal_multiset$)
(declare-fun as0$ () A_list$)
(declare-fun cs0$ () A_literal_multiset_list$)
(declare-fun eta$ () S$)
(declare-fun map$ (A_a_multiset_prod_a_multiset_fun$ A_a_multiset_prod_list$) A_multiset_list$)
(declare-fun mgu$ (A_set_set$) S_option$)
(declare-fun phi$ () S$)
(declare-fun set$ (A_multiset_list$) A_multiset_set$)
(declare-fun tau$ () S$)
(declare-fun zip$ (A_list$ A_multiset_list$) A_a_multiset_prod_list$)
(declare-fun aAs0$ () A_multiset_list$)
(declare-fun mset$ (A_literal_multiset_list$) A_literal_multiset_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun some$ (S$) S_option$)
(declare-fun image$ (A_multiset_a_set_fun$ A_multiset_set$) A_set_set$)
(declare-fun sigma$ () S$)
(declare-fun add_mset$ () A_a_multiset_a_multiset_fun_fun$)
(declare-fun set_mset$ () A_multiset_a_set_fun$)
(declare-fun sum_mset$ (A_literal_multiset_multiset$) A_literal_multiset$)
(declare-fun case_prod$ (A_a_multiset_a_multiset_fun_fun$) A_a_multiset_prod_a_multiset_fun$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun comp_subst$ (S$ S$) S$)
(assert (! (not (= (subst_cls$ subst_atm$ (plus$ (sum_mset$ (mset$ cs0$)) d0$) (comp_subst$ tau$ phi$)) (subst_cls$ subst_atm$ (plus$ (sum_mset$ (mset$ cs0$)) d0$) (comp_subst$ eta$ sigma$)))) :named a0))
(assert (! (= (comp_subst$ tau$ phi$) (comp_subst$ eta$ sigma$)) :named a1))
(assert (! (= (some$ tau$) (mgu$ (image$ set_mset$ (set$ (map$ (case_prod$ add_mset$) (zip$ as0$ aAs0$)))))) :named a2))
(check-sat)
;;;;(get-proof)
