; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_list$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun as$ () A_list$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun eligible$ (A_literal_multiset_a_literal_multiset_fun$ A_list$ A_literal_multiset$) Bool)
(assert (! (not (eligible$ s$ as$ da$)) :named a0))
(assert (! (eligible$ s$ as$ da$) :named a1))
(check-sat)
;;;;(get-proof)
