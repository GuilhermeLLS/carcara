; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_set$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_multiset$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun d$ () A_literal_multiset$)
(declare-fun n$ () A_literal_multiset_set$)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun cs$ () A_literal_multiset_list$)
(declare-fun mset$ (A_literal_multiset_list$) A_literal_multiset_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun interp$ (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_set$) A_set$)
(declare-fun sum_mset$ (A_literal_multiset_multiset$) A_literal_multiset$)
(declare-fun true_cls$ (A_set$ A_literal_multiset$) Bool)
(assert (! (not (not (true_cls$ (interp$ s$ n$) (plus$ (sum_mset$ (mset$ cs$)) d$)))) :named a0))
(assert (! (not (true_cls$ (interp$ s$ n$) (plus$ (sum_mset$ (mset$ cs$)) d$))) :named a1))
(check-sat)
;;;;(get-proof)
