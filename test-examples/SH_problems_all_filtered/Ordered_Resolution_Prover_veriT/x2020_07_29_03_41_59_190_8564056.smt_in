; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort Nat$ 0)
(declare-sort A_list$ 0)
(declare-sort S_list$ 0)
(declare-sort A_multiset$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-fun n$ () Nat$)
(declare-fun d0$ () A_literal_multiset$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun as0$ () A_list$)
(declare-fun dA0$ () A_literal_multiset$)
(declare-fun eta$ () S$)
(declare-fun neg$ () A_a_literal_fun$)
(declare-fun nth$ (A_literal_multiset_list$ Nat$) A_literal_multiset$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun cAs0$ () A_literal_multiset_list$)
(declare-fun cons$ (A_literal_multiset$ A_literal_multiset_list$) A_literal_multiset_list$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun mset$ (A_list$) A_multiset$)
(declare-fun nth$a (S_list$ Nat$) S$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun zero$ () Nat$)
(declare-fun cons$a (S$ S_list$) S_list$)
(declare-fun eta_0$ () S$)
(declare-fun eta_s0$ () S_list$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun image_mset$ (A_a_literal_fun$ A_multiset$) A_literal_multiset$)
(declare-fun subseteq_mset$ (A_literal_multiset$ A_literal_multiset$) Bool)
(assert (! (not (= (subst_cls$ subst_atm$ dA0$ eta$) da$)) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (less$ ?v0 (suc$ n$)) (forall ((?v1 A_literal_multiset$)) (=> (subseteq_mset$ ?v1 (nth$ (cons$ dA0$ cAs0$) ?v0)) (= (subst_cls$ subst_atm$ ?v1 (nth$a (cons$a eta_0$ eta_s0$) ?v0)) (subst_cls$ subst_atm$ ?v1 eta$)))))) :named a1))
(assert (! (= (subst_cls$ subst_atm$ dA0$ eta_0$) da$) :named a2))
(assert (! (subseteq_mset$ d0$ dA0$) :named a3))
(assert (! (= dA0$ (plus$ d0$ (image_mset$ neg$ (mset$ as0$)))) :named a4))
(assert (! (forall ((?v0 Nat$)) (less$ zero$ (suc$ ?v0))) :named a5))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset_list$)) (! (= (nth$ (cons$ ?v0 ?v1) zero$) ?v0) :pattern ((cons$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 S$) (?v1 S_list$)) (! (= (nth$a (cons$a ?v0 ?v1) zero$) ?v0) :pattern ((cons$a ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A_literal_multiset$) (?v1 A_literal_multiset$) (?v2 S$)) (= (subst_cls$ subst_atm$ (plus$ ?v0 ?v1) ?v2) (plus$ (subst_cls$ subst_atm$ ?v0 ?v2) (subst_cls$ subst_atm$ ?v1 ?v2)))) :named a8))
(assert (! (subseteq_mset$ (image_mset$ neg$ (mset$ as0$)) dA0$) :named a9))
(check-sat)
;;;;(get-proof)
