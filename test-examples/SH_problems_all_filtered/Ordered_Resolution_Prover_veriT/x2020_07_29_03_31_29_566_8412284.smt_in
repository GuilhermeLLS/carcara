; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S$ 0)
(declare-sort A_list$ 0)
(declare-sort A_multiset$ 0)
(declare-sort A_s_a_fun_fun$ 0)
(declare-sort A_a_literal_fun$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun d$ () A_literal_multiset$)
(declare-fun m$ () A_literal_multiset_set$)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun as$ () A_list$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun dA0$ () A_literal_multiset$)
(declare-fun neg$ () A_a_literal_fun$)
(declare-fun s_M$ (A_s_a_fun_fun$ A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset_set$ A_literal_multiset$) A_literal_multiset$)
(declare-fun mset$ (A_list$) A_multiset$)
(declare-fun plus$ (A_literal_multiset$ A_literal_multiset$) A_literal_multiset$)
(declare-fun eta_0$ () S$)
(declare-fun fun_app$ (A_literal_multiset_a_literal_multiset_fun$ A_literal_multiset$) A_literal_multiset$)
(declare-fun subst_atm$ () A_s_a_fun_fun$)
(declare-fun subst_cls$ (A_s_a_fun_fun$ A_literal_multiset$ S$) A_literal_multiset$)
(declare-fun image_mset$ (A_a_literal_fun$ A_multiset$) A_literal_multiset$)
(assert (! (not (= (image_mset$ neg$ (mset$ as$)) (subst_cls$ subst_atm$ (fun_app$ s$ dA0$) eta_0$))) :named a0))
(assert (! (= (subst_cls$ subst_atm$ (fun_app$ s$ dA0$) eta_0$) (s_M$ subst_atm$ s$ m$ da$)) :named a1))
(assert (! (= da$ (plus$ d$ (image_mset$ neg$ (mset$ as$)))) :named a2))
(assert (! (= (s_M$ subst_atm$ s$ m$ (plus$ d$ (image_mset$ neg$ (mset$ as$)))) (image_mset$ neg$ (mset$ as$))) :named a3))
(check-sat)
;;;;(get-proof)
