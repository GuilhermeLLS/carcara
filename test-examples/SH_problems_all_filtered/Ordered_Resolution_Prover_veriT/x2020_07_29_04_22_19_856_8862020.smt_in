; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_set$ 0)
(declare-sort A_set_set$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_a_set_fun$ 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun$ 0)
(declare-fun e$ () A_literal_multiset$)
(declare-fun s$ () A_literal_multiset_a_literal_multiset_fun$)
(declare-fun da$ () A_literal_multiset$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun set$ (A_literal_multiset_list$) A_literal_multiset_set$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun sup$a (A_set_set$) A_set$)
(declare-fun image$ (A_literal_multiset_a_set_fun$ A_literal_multiset_set$) A_set_set$)
(declare-fun atms_of$ () A_literal_multiset_a_set_fun$)
(declare-fun fun_app$ (A_literal_multiset_a_set_fun$ A_literal_multiset$) A_set$)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun ground_resolution_with_selection$ (A_literal_multiset_a_literal_multiset_fun$) Bool)
(assert (! (not (less_eq$ (fun_app$ atms_of$ e$) (sup$ (sup$a (image$ atms_of$ (set$ cAs$))) (fun_app$ atms_of$ da$)))) :named a0))
(assert (! (=> (ground_resolution_with_selection$ s$) (less_eq$ (fun_app$ atms_of$ e$) (sup$ (sup$a (image$ atms_of$ (set$ cAs$))) (fun_app$ atms_of$ da$)))) :named a1))
(assert (! (ground_resolution_with_selection$ s$) :named a2))
(check-sat)
;;;;(get-proof)
