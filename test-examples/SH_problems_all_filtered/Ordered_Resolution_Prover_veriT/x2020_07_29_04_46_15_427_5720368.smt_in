; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_set$ 0)
(declare-sort A_set_set$ 0)
(declare-sort A_literal_multiset$ 0)
(declare-sort A_literal_multiset_set$ 0)
(declare-sort A_literal_multiset_list$ 0)
(declare-sort A_literal_multiset_multiset$ 0)
(declare-sort A_literal_multiset_a_set_fun$ 0)
(declare-fun cs$ () A_literal_multiset_list$)
(declare-fun cAs$ () A_literal_multiset_list$)
(declare-fun set$ (A_literal_multiset_list$) A_literal_multiset_set$)
(declare-fun sup$ (A_set_set$) A_set$)
(declare-fun mset$ (A_literal_multiset_list$) A_literal_multiset_multiset$)
(declare-fun image$ (A_literal_multiset_a_set_fun$ A_literal_multiset_set$) A_set_set$)
(declare-fun atms_of$ () A_literal_multiset_a_set_fun$)
(declare-fun fun_app$ (A_literal_multiset_a_set_fun$ A_literal_multiset$) A_set$)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun sum_mset$ (A_literal_multiset_multiset$) A_literal_multiset$)
(assert (! (not (less_eq$ (fun_app$ atms_of$ (sum_mset$ (mset$ cs$))) (sup$ (image$ atms_of$ (set$ cAs$))))) :named a0))
(assert (! (less_eq$ (fun_app$ atms_of$ (sum_mset$ (mset$ cs$))) (fun_app$ atms_of$ (sum_mset$ (mset$ cAs$)))) :named a1))
(assert (! (= (fun_app$ atms_of$ (sum_mset$ (mset$ cAs$))) (sup$ (image$ atms_of$ (set$ cAs$)))) :named a2))
(check-sat)
;;;;(get-proof)
