; smt.random_seed=1 smt.refine_inj_axioms=false -T:3 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort N$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_n_vec$ 0)
(declare-sort N_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort N_a_fun_set$ 0)
(declare-sort A_a_n_vec_fun$ 0)
(declare-sort A_n_vec_a_fun$ 0)
(declare-sort A_n_vec_n_vec$ 0)
(declare-sort N_a_n_vec_fun$ 0)
(declare-sort A_n_vec_bool_fun$ 0)
(declare-sort N_a_bool_fun_fun$ 0)
(declare-sort N_a_fun_bool_fun$ 0)
(declare-sort N_a_n_vec_fun_set$ 0)
(declare-sort A_n_vec_a_n_vec_fun$ 0)
(declare-sort A_n_vec_n_vec_n_vec$ 0)
(declare-sort N_a_n_vec_n_vec_fun$ 0)
(declare-sort N_a_n_vec_bool_fun_fun$ 0)
(declare-sort N_a_n_vec_fun_bool_fun$ 0)
(declare-fun p$ (N$ A_n_vec_a_fun$) Bool)
(declare-fun uu$ (A_n_vec_a_n_vec_fun$ N$) A_n_vec_a_fun$)
(declare-fun row$ (N$ A_n_vec_n_vec$) A_n_vec$)
(declare-fun top$ () N_a_n_vec_fun_set$)
(declare-fun uua$ (A_n_vec$) N_a_n_vec_fun$)
(declare-fun uub$ (A$) N_a_fun$)
(declare-fun uuc$ (A_a_n_vec_fun$ A_n_vec_n_vec$ N$) N_a_n_vec_fun$)
(declare-fun uud$ (A_a_n_vec_fun$ A_n_vec_n_vec$) N_a_n_vec_n_vec_fun$)
(declare-fun uue$ (A_a_fun$ A_n_vec_n_vec$ N$) N_a_fun$)
(declare-fun uuf$ (A_a_fun$ A_n_vec_n_vec$) N_a_n_vec_fun$)
(declare-fun uug$ (A_n_vec_a_fun$ A_n_vec_n_vec_n_vec$ N$) N_a_fun$)
(declare-fun uuh$ (A_n_vec_a_fun$ A_n_vec_n_vec_n_vec$) N_a_n_vec_fun$)
(declare-fun uui$ (A_n_vec$) N_a_n_vec_fun$)
(declare-fun uuj$ (N$ A_n_vec_n_vec_n_vec$) N_a_n_vec_fun$)
(declare-fun uuk$ (N$ A_n_vec_n_vec$) N_a_fun$)
(declare-fun uul$ (A_n_vec_n_vec$ N$) N_a_n_vec_fun$)
(declare-fun uum$ (A_n_vec_n_vec$) N_a_n_vec_n_vec_fun$)
(declare-fun uun$ (A_n_vec$ N$) N_a_fun$)
(declare-fun uuo$ (A_n_vec$) N_a_n_vec_fun$)
(declare-fun uup$ (A_n_vec_n_vec_n_vec$ N$) N_a_n_vec_fun$)
(declare-fun uuq$ (A_n_vec_n_vec_n_vec$) N_a_n_vec_n_vec_fun$)
(declare-fun uur$ (A_n_vec_n_vec$ N$) N_a_fun$)
(declare-fun uus$ (A_n_vec_n_vec$) N_a_n_vec_fun$)
(declare-fun uut$ (N_a_fun_set$) N_a_fun_bool_fun$)
(declare-fun vec$ (A_n_vec$) A_n_vec_n_vec$)
(declare-fun top$a () N_a_fun_set$)
(declare-fun vec$a () A_a_n_vec_fun$)
(declare-fun column$ (N$ A_n_vec_n_vec_n_vec$) A_n_vec_n_vec$)
(declare-fun member$ (N_a_fun$ N_a_fun_set$) Bool)
(declare-fun collect$ (N_a_fun_bool_fun$) N_a_fun_set$)
(declare-fun column$a (N$ A_n_vec_n_vec$) A_n_vec$)
(declare-fun fun_app$ (N_a_fun_bool_fun$ N_a_fun$) Bool)
(declare-fun member$a (N_a_n_vec_fun$ N_a_n_vec_fun_set$) Bool)
(declare-fun vec_nth$ (A_n_vec$) N_a_fun$)
(declare-fun fun_app$a (N_a_n_vec_fun$ N$) A_n_vec$)
(declare-fun fun_app$b (N_a_n_vec_n_vec_fun$ N$) A_n_vec_n_vec$)
(declare-fun fun_app$c (N_a_fun$ N$) A$)
(declare-fun fun_app$d (A_n_vec_a_fun$ A_n_vec$) A$)
(declare-fun fun_app$e (A_n_vec_a_n_vec_fun$ A_n_vec$) A_n_vec$)
(declare-fun fun_app$f (A_a_n_vec_fun$ A$) A_n_vec$)
(declare-fun fun_app$g (A_a_fun$ A$) A$)
(declare-fun fun_app$h (A_n_vec_bool_fun$ A_n_vec$) Bool)
(declare-fun fun_app$i (N_a_n_vec_bool_fun_fun$ N$) A_n_vec_bool_fun$)
(declare-fun fun_app$j (A_bool_fun$ A$) Bool)
(declare-fun fun_app$k (N_a_bool_fun_fun$ N$) A_bool_fun$)
(declare-fun fun_app$l (N_a_n_vec_fun_bool_fun$ N_a_n_vec_fun$) Bool)
(declare-fun vec_nth$a (A_n_vec_n_vec$) N_a_n_vec_fun$)
(declare-fun vec_nth$b (A_n_vec_n_vec_n_vec$ N$) A_n_vec_n_vec$)
(declare-fun rowvector$ (A_n_vec$) A_n_vec_n_vec$)
(declare-fun transpose$ (A_n_vec_n_vec_n_vec$) A_n_vec_n_vec_n_vec$)
(declare-fun map_matrix$ (A_a_fun$ A_n_vec_n_vec$) A_n_vec_n_vec$)
(declare-fun transpose$a (A_n_vec_n_vec$) A_n_vec_n_vec$)
(declare-fun vec_lambda$ (N_a_fun$) A_n_vec$)
(declare-fun map_matrix$a (A_n_vec_a_fun$ A_n_vec_n_vec_n_vec$) A_n_vec_n_vec$)
(declare-fun map_matrix$b (A_a_n_vec_fun$ A_n_vec_n_vec$) A_n_vec_n_vec_n_vec$)
(declare-fun vec_lambda$a (N_a_n_vec_fun$) A_n_vec_n_vec$)
(declare-fun vec_lambda$b (N_a_n_vec_n_vec_fun$) A_n_vec_n_vec_n_vec$)
(declare-fun columnvector$ (A_n_vec_n_vec$) A_n_vec_n_vec_n_vec$)
(declare-fun columnvector$a (A_n_vec$) A_n_vec_n_vec$)
(assert (! (forall ((?v0 N_a_fun_set$) (?v1 N_a_fun$)) (! (= (fun_app$ (uut$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uut$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 N$)) (! (= (fun_app$a (uus$ ?v0) ?v1) (vec_lambda$ (uur$ ?v0 ?v1))) :pattern ((fun_app$a (uus$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_n_vec_n_vec_n_vec$) (?v1 N$)) (! (= (fun_app$b (uuq$ ?v0) ?v1) (vec_lambda$a (uup$ ?v0 ?v1))) :pattern ((fun_app$b (uuq$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_n_vec$) (?v1 N$)) (! (= (fun_app$a (uuo$ ?v0) ?v1) (vec_lambda$ (uun$ ?v0 ?v1))) :pattern ((fun_app$a (uuo$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 N$)) (! (= (fun_app$b (uum$ ?v0) ?v1) (vec_lambda$a (uul$ ?v0 ?v1))) :pattern ((fun_app$b (uum$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_n_vec$) (?v1 N$)) (! (= (fun_app$a (uui$ ?v0) ?v1) (vec_lambda$ (vec_nth$ ?v0))) :pattern ((fun_app$a (uui$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_n_vec_n_vec_n_vec$) (?v1 N$) (?v2 N$)) (! (= (fun_app$a (uup$ ?v0 ?v1) ?v2) (fun_app$a (vec_nth$a (vec_nth$b ?v0 ?v2)) ?v1)) :pattern ((fun_app$a (uup$ ?v0 ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 N$) (?v2 N$)) (! (= (fun_app$c (uur$ ?v0 ?v1) ?v2) (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a ?v0) ?v2)) ?v1)) :pattern ((fun_app$c (uur$ ?v0 ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec_n_vec_n_vec$) (?v2 N$)) (! (= (fun_app$a (uuj$ ?v0 ?v1) ?v2) (fun_app$a (vec_nth$a (vec_nth$b ?v1 ?v2)) ?v0)) :pattern ((fun_app$a (uuj$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec_n_vec$) (?v2 N$)) (! (= (fun_app$c (uuk$ ?v0 ?v1) ?v2) (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a ?v1) ?v2)) ?v0)) :pattern ((fun_app$c (uuk$ ?v0 ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_n_vec_a_n_vec_fun$) (?v1 N$) (?v2 A_n_vec$)) (! (= (fun_app$d (uu$ ?v0 ?v1) ?v2) (fun_app$c (vec_nth$ (fun_app$e ?v0 ?v2)) ?v1)) :pattern ((fun_app$d (uu$ ?v0 ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 N$) (?v2 N$)) (! (= (fun_app$a (uul$ ?v0 ?v1) ?v2) (fun_app$a (vec_nth$a ?v0) ?v1)) :pattern ((fun_app$a (uul$ ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_n_vec$) (?v1 N$) (?v2 N$)) (! (= (fun_app$c (uun$ ?v0 ?v1) ?v2) (fun_app$c (vec_nth$ ?v0) ?v1)) :pattern ((fun_app$c (uun$ ?v0 ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_n_vec_a_fun$) (?v1 A_n_vec_n_vec_n_vec$) (?v2 N$)) (! (= (fun_app$a (uuh$ ?v0 ?v1) ?v2) (vec_lambda$ (uug$ ?v0 ?v1 ?v2))) :pattern ((fun_app$a (uuh$ ?v0 ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_n_vec_n_vec$) (?v2 N$)) (! (= (fun_app$a (uuf$ ?v0 ?v1) ?v2) (vec_lambda$ (uue$ ?v0 ?v1 ?v2))) :pattern ((fun_app$a (uuf$ ?v0 ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_a_n_vec_fun$) (?v1 A_n_vec_n_vec$) (?v2 N$)) (! (= (fun_app$b (uud$ ?v0 ?v1) ?v2) (vec_lambda$a (uuc$ ?v0 ?v1 ?v2))) :pattern ((fun_app$b (uud$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_n_vec_a_fun$) (?v1 A_n_vec_n_vec_n_vec$) (?v2 N$) (?v3 N$)) (! (= (fun_app$c (uug$ ?v0 ?v1 ?v2) ?v3) (fun_app$d ?v0 (fun_app$a (vec_nth$a (vec_nth$b ?v1 ?v2)) ?v3))) :pattern ((fun_app$c (uug$ ?v0 ?v1 ?v2) ?v3)))) :named a16))
(assert (! (forall ((?v0 A_a_n_vec_fun$) (?v1 A_n_vec_n_vec$) (?v2 N$) (?v3 N$)) (! (= (fun_app$a (uuc$ ?v0 ?v1 ?v2) ?v3) (fun_app$f ?v0 (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a ?v1) ?v2)) ?v3))) :pattern ((fun_app$a (uuc$ ?v0 ?v1 ?v2) ?v3)))) :named a17))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_n_vec_n_vec$) (?v2 N$) (?v3 N$)) (! (= (fun_app$c (uue$ ?v0 ?v1 ?v2) ?v3) (fun_app$g ?v0 (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a ?v1) ?v2)) ?v3))) :pattern ((fun_app$c (uue$ ?v0 ?v1 ?v2) ?v3)))) :named a18))
(assert (! (forall ((?v0 A_n_vec$) (?v1 N$)) (! (= (fun_app$a (uua$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 N$)) (! (= (fun_app$c (uub$ ?v0) ?v1) ?v0) :pattern ((fun_app$c (uub$ ?v0) ?v1)))) :named a20))
(assert (! (not (forall ((?v0 N$)) (exists ((?v1 A_n_vec_a_fun$)) (p$ ?v0 ?v1)))) :named a21))
(assert (! (exists ((?v0 A_n_vec_a_n_vec_fun$)) (forall ((?v1 N$)) (p$ ?v1 (uu$ ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 N_a_n_vec_bool_fun_fun$)) (= (forall ((?v1 N$)) (exists ((?v2 A_n_vec$)) (fun_app$h (fun_app$i ?v0 ?v1) ?v2))) (exists ((?v1 A_n_vec_n_vec$)) (forall ((?v2 N$)) (fun_app$h (fun_app$i ?v0 ?v2) (fun_app$a (vec_nth$a ?v1) ?v2)))))) :named a23))
(assert (! (forall ((?v0 N_a_bool_fun_fun$)) (= (forall ((?v1 N$)) (exists ((?v2 A$)) (fun_app$j (fun_app$k ?v0 ?v1) ?v2))) (exists ((?v1 A_n_vec$)) (forall ((?v2 N$)) (fun_app$j (fun_app$k ?v0 ?v2) (fun_app$c (vec_nth$ ?v1) ?v2)))))) :named a24))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 A_n_vec_n_vec$)) (= (= ?v0 ?v1) (forall ((?v2 N$)) (= (fun_app$a (vec_nth$a ?v0) ?v2) (fun_app$a (vec_nth$a ?v1) ?v2))))) :named a25))
(assert (! (forall ((?v0 A_n_vec$) (?v1 A_n_vec$)) (= (= ?v0 ?v1) (forall ((?v2 N$)) (= (fun_app$c (vec_nth$ ?v0) ?v2) (fun_app$c (vec_nth$ ?v1) ?v2))))) :named a26))
(assert (! (forall ((?v0 Bool) (?v1 A_n_vec_n_vec$) (?v2 A_n_vec_n_vec$) (?v3 N$)) (= (fun_app$a (vec_nth$a (ite ?v0 ?v1 ?v2)) ?v3) (ite ?v0 (fun_app$a (vec_nth$a ?v1) ?v3) (fun_app$a (vec_nth$a ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 Bool) (?v1 A_n_vec$) (?v2 A_n_vec$) (?v3 N$)) (= (fun_app$c (vec_nth$ (ite ?v0 ?v1 ?v2)) ?v3) (ite ?v0 (fun_app$c (vec_nth$ ?v1) ?v3) (fun_app$c (vec_nth$ ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 A_n_vec_n_vec$)) (= (= (vec_nth$a ?v0) (vec_nth$a ?v1)) (= ?v0 ?v1))) :named a29))
(assert (! (forall ((?v0 A_n_vec$) (?v1 A_n_vec$)) (= (= (vec_nth$ ?v0) (vec_nth$ ?v1)) (= ?v0 ?v1))) :named a30))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_n_vec_n_vec$) (?v2 N$) (?v3 N$)) (= (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a (map_matrix$ ?v0 ?v1)) ?v2)) ?v3) (fun_app$g ?v0 (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a ?v1) ?v2)) ?v3)))) :named a31))
(assert (! (forall ((?v0 A_n_vec_a_fun$) (?v1 A_n_vec_n_vec_n_vec$) (?v2 N$) (?v3 N$)) (= (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a (map_matrix$a ?v0 ?v1)) ?v2)) ?v3) (fun_app$d ?v0 (fun_app$a (vec_nth$a (vec_nth$b ?v1 ?v2)) ?v3)))) :named a32))
(assert (! (forall ((?v0 A_a_n_vec_fun$) (?v1 A_n_vec_n_vec$) (?v2 N$) (?v3 N$)) (= (fun_app$a (vec_nth$a (vec_nth$b (map_matrix$b ?v0 ?v1) ?v2)) ?v3) (fun_app$f ?v0 (fun_app$c (vec_nth$ (fun_app$a (vec_nth$a ?v1) ?v2)) ?v3)))) :named a33))
(assert (! (forall ((?v0 A_n_vec_n_vec$)) (= (vec_lambda$a (vec_nth$a ?v0)) ?v0)) :named a34))
(assert (! (forall ((?v0 A_n_vec$)) (= (vec_lambda$ (vec_nth$ ?v0)) ?v0)) :named a35))
(assert (! (forall ((?v0 A_n_vec$) (?v1 N$)) (= (fun_app$a (vec_nth$a (vec$ ?v0)) ?v1) ?v0)) :named a36))
(assert (! (forall ((?v0 A$) (?v1 N$)) (= (fun_app$c (vec_nth$ (fun_app$f vec$a ?v0)) ?v1) ?v0)) :named a37))
(assert (! (forall ((?v0 N_a_n_vec_fun$) (?v1 N$)) (= (fun_app$a (vec_nth$a (vec_lambda$a ?v0)) ?v1) (fun_app$a ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 N_a_fun$) (?v1 N$)) (= (fun_app$c (vec_nth$ (vec_lambda$ ?v0)) ?v1) (fun_app$c ?v0 ?v1))) :named a39))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (fun_app$f vec$a ?v0) (fun_app$f vec$a ?v1)) (= ?v0 ?v1))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (fun_app$f vec$a ?v0) (fun_app$f vec$a ?v1)) (= ?v0 ?v1))) :named a41))
(assert (! (forall ((?v0 A_n_vec$)) (! (= (vec$ ?v0) (vec_lambda$a (uua$ ?v0))) :pattern ((vec$ ?v0)))) :named a42))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f vec$a ?v0) (vec_lambda$ (uub$ ?v0))) :pattern ((fun_app$f vec$a ?v0)))) :named a43))
(assert (! (forall ((?v0 A_a_n_vec_fun$) (?v1 A_n_vec_n_vec$)) (= (map_matrix$b ?v0 ?v1) (vec_lambda$b (uud$ ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_n_vec_n_vec$)) (= (map_matrix$ ?v0 ?v1) (vec_lambda$a (uuf$ ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_n_vec_a_fun$) (?v1 A_n_vec_n_vec_n_vec$)) (= (map_matrix$a ?v0 ?v1) (vec_lambda$a (uuh$ ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A_n_vec_n_vec$)) (= (vec_lambda$a (vec_nth$a ?v0)) ?v0)) :named a47))
(assert (! (forall ((?v0 A_n_vec$)) (= (vec_lambda$ (vec_nth$ ?v0)) ?v0)) :named a48))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 N_a_n_vec_fun$)) (= (forall ((?v2 N$)) (= (fun_app$a (vec_nth$a ?v0) ?v2) (fun_app$a ?v1 ?v2))) (= (vec_lambda$a ?v1) ?v0))) :named a49))
(assert (! (forall ((?v0 A_n_vec$) (?v1 N_a_fun$)) (= (forall ((?v2 N$)) (= (fun_app$c (vec_nth$ ?v0) ?v2) (fun_app$c ?v1 ?v2))) (= (vec_lambda$ ?v1) ?v0))) :named a50))
(assert (! (forall ((?v0 A_n_vec$)) (! (= (rowvector$ ?v0) (vec_lambda$a (uui$ ?v0))) :pattern ((rowvector$ ?v0)))) :named a51))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec_n_vec_n_vec$)) (= (column$ ?v0 ?v1) (vec_lambda$a (uuj$ ?v0 ?v1)))) :named a52))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec_n_vec$)) (= (column$a ?v0 ?v1) (vec_lambda$ (uuk$ ?v0 ?v1)))) :named a53))
(assert (! (forall ((?v0 A_n_vec_n_vec$)) (= (columnvector$ ?v0) (vec_lambda$b (uum$ ?v0)))) :named a54))
(assert (! (forall ((?v0 A_n_vec$)) (= (columnvector$a ?v0) (vec_lambda$a (uuo$ ?v0)))) :named a55))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec_n_vec$)) (! (= (row$ ?v0 ?v1) (vec_lambda$ (vec_nth$ (fun_app$a (vec_nth$a ?v1) ?v0)))) :pattern ((row$ ?v0 ?v1)))) :named a56))
(assert (! (forall ((?v0 A_n_vec_n_vec_n_vec$)) (= (transpose$ ?v0) (vec_lambda$b (uuq$ ?v0)))) :named a57))
(assert (! (forall ((?v0 A_n_vec_n_vec$)) (= (transpose$a ?v0) (vec_lambda$a (uus$ ?v0)))) :named a58))
(assert (! (forall ((?v0 N_a_n_vec_fun$) (?v1 N_a_n_vec_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) (= (vec_lambda$a ?v0) (vec_lambda$a ?v1)))) :named a59))
(assert (! (forall ((?v0 N_a_fun$) (?v1 N_a_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2))) (= (vec_lambda$ ?v0) (vec_lambda$ ?v1)))) :named a60))
(assert (! (forall ((?v0 N_a_n_vec_fun$)) (=> (member$a ?v0 top$) (= (vec_nth$a (vec_lambda$a ?v0)) ?v0))) :named a61))
(assert (! (forall ((?v0 N_a_fun$)) (=> (member$ ?v0 top$a) (= (vec_nth$ (vec_lambda$ ?v0)) ?v0))) :named a62))
(assert (! (forall ((?v0 A_n_vec_n_vec$)) (= (transpose$a (transpose$a ?v0)) ?v0)) :named a63))
(assert (! (forall ((?v0 A_n_vec_n_vec$) (?v1 A_n_vec_n_vec$)) (= (= (transpose$a ?v0) (transpose$a ?v1)) (= ?v0 ?v1))) :named a64))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec_n_vec$)) (= (column$a ?v0 (transpose$a ?v1)) (row$ ?v0 ?v1))) :named a65))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec_n_vec$)) (= (row$ ?v0 (transpose$a ?v1)) (column$a ?v0 ?v1))) :named a66))
(assert (! (forall ((?v0 A_n_vec$)) (= (transpose$a (columnvector$a ?v0)) (rowvector$ ?v0))) :named a67))
(assert (! (forall ((?v0 A_n_vec$)) (= (transpose$a (rowvector$ ?v0)) (columnvector$a ?v0))) :named a68))
(assert (! (forall ((?v0 A_n_vec_n_vec$)) (member$a (vec_nth$a ?v0) top$)) :named a69))
(assert (! (forall ((?v0 A_n_vec$)) (member$ (vec_nth$ ?v0) top$a)) :named a70))
(assert (! (forall ((?v0 N_a_n_vec_fun$)) (=> (and (member$a ?v0 top$) (forall ((?v1 A_n_vec_n_vec$)) (=> (= ?v0 (vec_nth$a ?v1)) false))) false)) :named a71))
(assert (! (forall ((?v0 N_a_fun$)) (=> (and (member$ ?v0 top$a) (forall ((?v1 A_n_vec$)) (=> (= ?v0 (vec_nth$ ?v1)) false))) false)) :named a72))
(assert (! (forall ((?v0 N_a_n_vec_fun$) (?v1 N_a_n_vec_fun_bool_fun$)) (=> (and (member$a ?v0 top$) (forall ((?v2 A_n_vec_n_vec$)) (fun_app$l ?v1 (vec_nth$a ?v2)))) (fun_app$l ?v1 ?v0))) :named a73))
(assert (! (forall ((?v0 N_a_fun$) (?v1 N_a_fun_bool_fun$)) (=> (and (member$ ?v0 top$a) (forall ((?v2 A_n_vec$)) (fun_app$ ?v1 (vec_nth$ ?v2)))) (fun_app$ ?v1 ?v0))) :named a74))
(assert (! (forall ((?v0 A_n_vec_n_vec$)) (=> (forall ((?v1 N_a_n_vec_fun$)) (=> (and (= ?v0 (vec_lambda$a ?v1)) (member$a ?v1 top$)) false)) false)) :named a75))
(assert (! (forall ((?v0 A_n_vec$)) (=> (forall ((?v1 N_a_fun$)) (=> (and (= ?v0 (vec_lambda$ ?v1)) (member$ ?v1 top$a)) false)) false)) :named a76))
(assert (! (forall ((?v0 N_a_fun$) (?v1 N_a_fun_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0))) :named a77))
(assert (! (forall ((?v0 N_a_fun_set$)) (= (collect$ (uut$ ?v0)) ?v0)) :named a78))
(assert (! (forall ((?v0 N_a_fun_bool_fun$) (?v1 N_a_fun_bool_fun$)) (=> (forall ((?v2 N_a_fun$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a79))
(check-sat)
;;;;(get-proof)
