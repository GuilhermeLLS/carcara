; smt.random_seed=1 smt.refine_inj_axioms=false -T:1 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort N$ 0)
(declare-sort A_n_vec$ 0)
(declare-sort N_a_fun$ 0)
(declare-sort A_n_vec_a_fun$ 0)
(declare-fun f$ (N$ A_n_vec$) A$)
(declare-fun p$ (N$ A_n_vec_a_fun$) Bool)
(declare-fun uu$ (A_n_vec$) N_a_fun$)
(declare-fun uua$ (N$) A_n_vec_a_fun$)
(declare-fun fun_app$ (N_a_fun$ N$) A$)
(declare-fun vec_nth$ (A_n_vec$ N$) A$)
(declare-fun fun_app$a (A_n_vec_a_fun$ A_n_vec$) A$)
(declare-fun vec_lambda$ (N_a_fun$) A_n_vec$)
(assert (! (forall ((?v0 A_n_vec$) (?v1 N$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (f$ ?v1 ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (vec_nth$ (vec_lambda$ (uu$ ?v1)) ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a1))
(assert (! (not (forall ((?v0 N$)) (p$ ?v0 (uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 N$)) (p$ ?v0 (uua$ ?v0))) :named a3))
(check-sat)
;;;;(get-proof)
