; smt.random_seed=1 smt.refine_inj_axioms=false -T:1 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort Real_set$ 0)
(declare-sort Real_a_fun$ 0)
(declare-sort Real_filter$ 0)
(declare-fun f$ () Real_a_fun$)
(declare-fun x$ () Real)
(declare-fun aa$ () Real)
(declare-fun ba$ () Real)
(declare-fun f$a () Real_a_fun$)
(declare-fun sa$ () Real_set$)
(declare-fun top$ () Real_set$)
(declare-fun minus$ (A$ A$) A$)
(declare-fun finite$ (Real_set$) Bool)
(declare-fun insert$ (Real Real_set$) Real_set$)
(declare-fun member$ (Real Real_set$) Bool)
(declare-fun minus$a (Real_set$ Real_set$) Real_set$)
(declare-fun fun_app$ (Real_a_fun$ Real) A$)
(declare-fun at_within$ (Real Real_set$) Real_filter$)
(declare-fun has_integral$ (Real_a_fun$ A$ Real_set$) Bool)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(declare-fun continuous_on$ (Real_set$ Real_a_fun$) Bool)
(declare-fun greaterThanLessThan$ (Real Real) Real_set$)
(declare-fun has_vector_derivative$ (Real_a_fun$ A$ Real_filter$) Bool)
(assert (! (not (has_integral$ f$ (minus$ (fun_app$ f$a ba$) (fun_app$ f$a aa$)) (atLeastAtMost$ aa$ ba$))) :named a0))
(assert (! (has_integral$ f$ (minus$ (fun_app$ f$a ba$) (fun_app$ f$a x$)) (atLeastAtMost$ x$ ba$)) :named a1))
(assert (! (has_integral$ f$ (minus$ (fun_app$ f$a x$) (fun_app$ f$a aa$)) (atLeastAtMost$ aa$ x$)) :named a2))
(assert (! (forall ((?v0 Real_set$) (?v1 Real)) (=> (finite$ ?v0) (finite$ (insert$ ?v1 ?v0)))) :named a3))
(assert (! (forall ((?v0 Real_set$) (?v1 Real) (?v2 Real) (?v3 Real_a_fun$) (?v4 Real_a_fun$)) (=> (and (finite$ ?v0) (and (<= ?v1 ?v2) (and (forall ((?v5 Real)) (=> (member$ ?v5 (minus$a (greaterThanLessThan$ ?v1 ?v2) ?v0)) (has_vector_derivative$ ?v3 (fun_app$ ?v4 ?v5) (at_within$ ?v5 top$)))) (continuous_on$ (atLeastAtMost$ ?v1 ?v2) ?v3)))) (has_integral$ ?v4 (minus$ (fun_app$ ?v3 ?v2) (fun_app$ ?v3 ?v1)) (atLeastAtMost$ ?v1 ?v2)))) :named a4))
(assert (! (finite$ sa$) :named a5))
(assert (! (forall ((?v0 Real)) (=> (member$ ?v0 (minus$a (greaterThanLessThan$ aa$ ba$) (insert$ x$ sa$))) (has_vector_derivative$ f$a (fun_app$ f$ ?v0) (at_within$ ?v0 top$)))) :named a6))
(assert (! (<= aa$ ba$) :named a7))
(assert (! (continuous_on$ (atLeastAtMost$ aa$ ba$) f$a) :named a8))
(check-sat)
;;;;(get-proof)
