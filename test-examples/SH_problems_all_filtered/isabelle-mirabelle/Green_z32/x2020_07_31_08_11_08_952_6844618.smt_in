; smt.random_seed=1 smt.refine_inj_axioms=false -T:20 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort B_set$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun f$ (A_b_prod$) C$)
(declare-fun g$ (A_b_prod$) C$)
(declare-fun x$ () A$)
(declare-fun g1$ (A$) B$)
(declare-fun g2$ (A$) B$)
(declare-fun uu$ (A$) B_c_fun$)
(declare-fun top$ () B_set$)
(declare-fun uua$ () B_c_fun$)
(declare-fun cbox$ (B$ B$) B_set$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun zero$ () C$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun fun_app$ (B_c_fun$ B$) C$)
(declare-fun integrable_on$ (B_c_fun$ B_set$) Bool)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uua$ ?v0) (ite (member$ ?v0 (cbox$ (g1$ x$) (g2$ x$))) (g$ (pair$ x$ ?v0)) zero$)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (f$ (pair$ ?v0 ?v1))) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$)) (= (f$ (pair$ x$ ?v0)) (ite (member$ ?v0 (cbox$ (g1$ x$) (g2$ x$))) (g$ (pair$ x$ ?v0)) zero$))) :named a2))
(assert (! (forall ((?v0 A$)) (integrable_on$ (uu$ ?v0) top$)) :named a3))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_set$) (?v2 B_c_fun$)) (=> (and (integrable_on$ ?v0 ?v1) (forall ((?v3 B$)) (=> (member$ ?v3 ?v1) (= (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3))))) (integrable_on$ ?v2 ?v1))) :named a4))
(assert (! (not (integrable_on$ uua$ top$)) :named a5))
(check-sat)
;;;;(get-proof)
