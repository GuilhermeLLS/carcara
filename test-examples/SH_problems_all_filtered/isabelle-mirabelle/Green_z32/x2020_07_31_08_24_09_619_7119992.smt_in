; smt.random_seed=1 smt.refine_inj_axioms=false -T:20 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun f$ (A_b_prod$) C$)
(declare-fun g$ (A_b_prod$) C$)
(declare-fun x$ () B$)
(declare-fun g1$ (B$) A$)
(declare-fun g2$ (B$) A$)
(declare-fun uu$ (B$) A_c_fun$)
(declare-fun top$ () A_set$)
(declare-fun uua$ () A_c_fun$)
(declare-fun cbox$ (A$ A$) A_set$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun zero$ () C$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_c_fun$ A$) C$)
(declare-fun integrable_on$ (A_c_fun$ A_set$) Bool)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uua$ ?v0) (ite (member$ ?v0 (cbox$ (g1$ x$) (g2$ x$))) (g$ (pair$ ?v0 x$)) zero$)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (f$ (pair$ ?v1 ?v0))) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A$)) (= (f$ (pair$ ?v0 x$)) (ite (member$ ?v0 (cbox$ (g1$ x$) (g2$ x$))) (g$ (pair$ ?v0 x$)) zero$))) :named a2))
(assert (! (forall ((?v0 B$)) (integrable_on$ (uu$ ?v0) top$)) :named a3))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_set$) (?v2 A_c_fun$)) (=> (and (integrable_on$ ?v0 ?v1) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (= (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3))))) (integrable_on$ ?v2 ?v1))) :named a4))
(assert (! (not (integrable_on$ uua$ top$)) :named a5))
(check-sat)
;;;;(get-proof)
