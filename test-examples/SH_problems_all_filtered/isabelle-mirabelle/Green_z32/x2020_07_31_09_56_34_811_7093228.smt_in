; smt.random_seed=1 smt.refine_inj_axioms=false -T:30 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort Real_set$ 0)
(declare-sort Real_a_fun$ 0)
(declare-sort Real_filter$ 0)
(declare-sort Real_real_fun$ 0)
(declare-fun i$ () A$)
(declare-fun x$ () Real)
(declare-fun uu$ () Real_real_fun$)
(declare-fun top$ () Real_set$)
(declare-fun gamma$ () Real_a_fun$)
(declare-fun inner$ (A$ A$) Real)
(declare-fun fun_app$ (Real_real_fun$ Real) Real)
(declare-fun fun_app$a (Real_a_fun$ Real) A$)
(declare-fun at_within$ (Real Real_set$) Real_filter$)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(declare-fun vector_derivative$ (Real_real_fun$ Real_filter$) Real)
(declare-fun vector_derivative$a (Real_a_fun$ Real_filter$) A$)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (inner$ (fun_app$a gamma$ ?v0) i$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (vector_derivative$ uu$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0))) (inner$ (vector_derivative$a gamma$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0))) i$))) :named a1))
(assert (! (= (vector_derivative$ uu$ (at_within$ x$ top$)) (inner$ (vector_derivative$a gamma$ (at_within$ x$ top$)) i$)) :named a2))
(assert (! (= (vector_derivative$ uu$ (at_within$ x$ top$)) (vector_derivative$ uu$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0)))) :named a3))
(assert (! (= (inner$ (vector_derivative$a gamma$ (at_within$ x$ top$)) i$) (inner$ (vector_derivative$a gamma$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0))) i$)) :named a4))
(check-sat)
;;;;(get-proof)
