; smt.random_seed=1 smt.refine_inj_axioms=false -T:30 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort B_set$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort C_bool_fun$ 0)
(declare-fun f$ (A_b_prod$) C$)
(declare-fun x$ () A$)
(declare-fun g1$ (A$) B$)
(declare-fun g2$ (A$) B$)
(declare-fun uu$ () B_c_fun$)
(declare-fun eps$ (C_bool_fun$) C$)
(declare-fun top$ () B_set$)
(declare-fun uua$ (B_set$ B_c_fun$) C_bool_fun$)
(declare-fun cbox$ (B$ B$) B_set$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun zero$ () C$)
(declare-fun fun_app$ (B_c_fun$ B$) C$)
(declare-fun fun_app$a (C_bool_fun$ C$) Bool)
(declare-fun integral$ (B_set$ B_c_fun$) C$)
(declare-fun has_integral$ (B_c_fun$ C$ B_set$) Bool)
(declare-fun integrable_on$ (B_c_fun$ B_set$) Bool)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uu$ ?v0) (f$ (pair$ x$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B_set$) (?v1 B_c_fun$) (?v2 C$)) (! (= (fun_app$a (uua$ ?v0 ?v1) ?v2) (or (has_integral$ ?v1 ?v2 ?v0) (and (not (integrable_on$ ?v1 ?v0)) (= ?v2 zero$)))) :pattern ((fun_app$a (uua$ ?v0 ?v1) ?v2)))) :named a1))
(assert (! (not (has_integral$ uu$ (integral$ top$ uu$) (cbox$ (g1$ x$) (g2$ x$)))) :named a2))
(assert (! (= (integral$ (cbox$ (g1$ x$) (g2$ x$)) uu$) (integral$ top$ uu$)) :named a3))
(assert (! (has_integral$ uu$ (integral$ (cbox$ (g1$ x$) (g2$ x$)) uu$) (cbox$ (g1$ x$) (g2$ x$))) :named a4))
(assert (! (forall ((?v0 B_set$) (?v1 B_c_fun$)) (= (integral$ ?v0 ?v1) (eps$ (uua$ ?v0 ?v1)))) :named a5))
(check-sat)
;;;;(get-proof)
