; smt.random_seed=1 smt.refine_inj_axioms=false -T:1 -smt2
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_real_fun$ 0)
(declare-fun f$ (A$ A$) Real)
(declare-fun p$ (A$ A_real_fun$) Bool)
(declare-fun uu$ (A$) A_a_fun$)
(declare-fun sum$ (A_a_fun$ A_set$) A$)
(declare-fun uua$ (A$) A_real_fun$)
(declare-fun basis$ () A_set$)
(declare-fun inner$ (A$ A$) Real)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun scaleR$ (Real A$) A$)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun fun_app$a (A_real_fun$ A$) Real)
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (scaleR$ (f$ ?v1 ?v0) ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (inner$ (sum$ (uu$ ?v1) basis$) ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a1))
(assert (! (not (forall ((?v0 A$)) (=> (member$ ?v0 basis$) (p$ ?v0 (uua$ ?v0))))) :named a2))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 basis$) (p$ ?v0 (uua$ ?v0)))) :named a3))
(check-sat)
;;;;(get-proof)
