; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=20
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort Num$ 0)
(declare-sort Int_set$ 0)
(declare-sort Real_set$ 0)
(declare-fun x$ () Real)
(declare-fun one$ () Num$)
(declare-fun plus$ (Num$ Num$) Num$)
(declare-fun floor$ (Real) Int)
(declare-fun member$ (Int Int_set$) Bool)
(declare-fun member$a (Real Real_set$) Bool)
(declare-fun numeral$ (Num$) Int)
(declare-fun numeral$a (Num$) Real)
(declare-fun atLeastLessThan$ (Int Int) Int_set$)
(declare-fun atLeastLessThan$a (Real Real) Real_set$)
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (= (member$ ?v0 (atLeastLessThan$ ?v1 ?v2)) (and (<= ?v1 ?v0) (< ?v0 ?v2)))) :named a0))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real)) (= (member$a ?v0 (atLeastLessThan$a ?v1 ?v2)) (and (<= ?v1 ?v0) (< ?v0 ?v2)))) :named a1))
(assert (! (forall ((?v0 Num$) (?v1 Real)) (= (<= (numeral$ ?v0) (floor$ ?v1)) (<= (numeral$a ?v0) ?v1))) :named a2))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (+ (numeral$a ?v0) (numeral$a ?v1)) (numeral$a (plus$ ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (+ (numeral$ ?v0) (numeral$ ?v1)) (numeral$ (plus$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 Num$)) (= (= 1.0 (numeral$a ?v0)) (= one$ ?v0))) :named a5))
(assert (! (forall ((?v0 Num$)) (= (= 1 (numeral$ ?v0)) (= one$ ?v0))) :named a6))
(assert (! (member$a x$ (atLeastLessThan$a 2.0 3.0)) :named a7))
(assert (! (not (= (floor$ x$) 2)) :named a8))
(check-sat)
;;;;(get-proof)
