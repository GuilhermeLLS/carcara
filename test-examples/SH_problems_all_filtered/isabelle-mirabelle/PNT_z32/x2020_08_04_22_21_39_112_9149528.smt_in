; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-fun n$ () Nat$)
(declare-fun pa$ () Nat$)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun p_a$ () Nat$)
(declare-fun uua$ () Nat_bool_fun$)
(declare-fun card$ (Nat_set$) Nat$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun prime$ (Nat$) Bool)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) (and (prime$ ?v0) (less$ ?v0 p_a$))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (and (prime$ ?v0) (less$ ?v0 pa$))) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (not (= (card$ (collect$ uu$)) (card$ (collect$ uua$)))) :named a2))
(assert (! (= (card$ (collect$ uu$)) n$) :named a3))
(assert (! (less_eq$ pa$ p_a$) :named a4))
(assert (! (prime$ pa$) :named a5))
(assert (! (= (card$ (collect$ uua$)) n$) :named a6))
(assert (! (prime$ p_a$) :named a7))
(check-sat)
(get-unsat-core)
