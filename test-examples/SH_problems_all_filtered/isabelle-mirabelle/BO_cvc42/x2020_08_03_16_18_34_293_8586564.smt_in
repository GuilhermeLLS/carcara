; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort S_v_tm$ 0)
(declare-sort S_enat_fun$ 0)
(declare-sort S_v_tm_set$ 0)
(declare-sort V_enat_fun$ 0)
(declare-sort V_s_set_fun$ 0)
(declare-sort S_hmultiset_fun$ 0)
(declare-sort S_v_tm_bool_fun$ 0)
(declare-sort S_s_bool_fun_fun$ 0)
(declare-sort S_nat_hmultiset_fun_fun$ 0)
(declare-sort S_v_tm_s_v_tm_bool_fun_fun$ 0)
(declare-sort S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun$ 0)
(declare-fun u$ () S_v_tm_set$)
(declare-fun fa$ (Nat$) S_v_tm$)
(declare-fun gt$ (V_s_set_fun$ S_s_bool_fun_fun$ Nat$ S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun$ S_enat_fun$ S_hmultiset_fun$ S_nat_hmultiset_fun_fun$ S_v_tm$ S_v_tm$) Bool)
(declare-fun uu$ () S_v_tm_s_v_tm_bool_fun_fun$)
(declare-fun bad$ (S_v_tm_s_v_tm_bool_fun_fun$ S_v_tm$) Bool)
(declare-fun extf$ () S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun$)
(declare-fun wary$ (S_enat_fun$ V_enat_fun$ S_v_tm$) Bool)
(declare-fun zero$ () Nat$)
(declare-fun delta$ () Nat$)
(declare-fun gt_sym$ () S_s_bool_fun_fun$)
(declare-fun member$ (S_v_tm$ S_v_tm_set$) Bool)
(declare-fun wt_sym$ () S_hmultiset_fun$)
(declare-fun fun_app$ (S_v_tm_bool_fun$ S_v_tm$) Bool)
(declare-fun coef_sym$ () S_nat_hmultiset_fun_fun$)
(declare-fun fun_app$a (S_v_tm_s_v_tm_bool_fun_fun$ S_v_tm$) S_v_tm_bool_fun$)
(declare-fun arity_sym$ () S_enat_fun$)
(declare-fun arity_var$ () V_enat_fun$)
(declare-fun ground_heads_var$ () V_s_set_fun$)
(assert (! (forall ((?v0 S_v_tm$) (?v1 S_v_tm$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (and (member$ ?v0 u$) (and (wary$ arity_sym$ arity_var$ ?v0) (and (wary$ arity_sym$ arity_var$ ?v1) (gt$ ground_heads_var$ gt_sym$ delta$ extf$ arity_sym$ wt_sym$ coef_sym$ ?v0 ?v1))))) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (not false) :named a1))
(assert (! (bad$ uu$ (fa$ zero$)) :named a2))
(assert (! (not (bad$ uu$ (fa$ zero$))) :named a3))
(check-sat)
(get-unsat-core)
