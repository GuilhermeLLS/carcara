; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun f$ (A_b_prod$) C$)
(declare-fun x$ () B$)
(declare-fun g1$ (B$) A$)
(declare-fun g2$ (B$) A$)
(declare-fun uu$ () A_c_fun$)
(declare-fun top$ () A_set$)
(declare-fun cbox$ (A$ A$) A_set$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun fun_app$ (A_c_fun$ A$) C$)
(declare-fun integral$ (A_set$ A_c_fun$) C$)
(declare-fun has_integral$ (A_c_fun$ C$ A_set$) Bool)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) (f$ (pair$ ?v0 x$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (has_integral$ uu$ (integral$ top$ uu$) (cbox$ (g1$ x$) (g2$ x$)))) :named a1))
(assert (! (has_integral$ uu$ (integral$ (cbox$ (g1$ x$) (g2$ x$)) uu$) (cbox$ (g1$ x$) (g2$ x$))) :named a2))
(assert (! (= (integral$ (cbox$ (g1$ x$) (g2$ x$)) uu$) (integral$ top$ uu$)) :named a3))
(check-sat)
(get-unsat-core)
