; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort Real_set$ 0)
(declare-sort Real_filter$ 0)
(declare-sort Real_a_b_prod_fun$ 0)
(declare-fun d$ () Real)
(declare-fun f$ (Real) Real)
(declare-fun x$ () Real)
(declare-fun uu$ () Real_a_b_prod_fun$)
(declare-fun one$ () A$)
(declare-fun top$ () Real_set$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun zero$ () B$)
(declare-fun scaleR$ (Real A_b_prod$) A_b_prod$)
(declare-fun fun_app$ (Real_a_b_prod_fun$ Real) A_b_prod$)
(declare-fun at_within$ (Real Real_set$) Real_filter$)
(declare-fun has_vector_derivative$ (Real_a_b_prod_fun$ A_b_prod$ Real_filter$) Bool)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (scaleR$ (f$ ?v0) (pair$ one$ zero$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (has_vector_derivative$ uu$ (scaleR$ d$ (pair$ one$ zero$)) (at_within$ x$ top$))) :named a1))
(assert (! (has_vector_derivative$ uu$ (scaleR$ d$ (pair$ one$ zero$)) (at_within$ x$ top$)) :named a2))
(check-sat)
(get-unsat-core)
