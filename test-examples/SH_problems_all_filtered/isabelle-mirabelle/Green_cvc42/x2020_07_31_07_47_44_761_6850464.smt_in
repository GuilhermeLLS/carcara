; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort Real_set$ 0)
(declare-sort Real_a_fun$ 0)
(declare-sort Real_filter$ 0)
(declare-fun g$ () Real_a_fun$)
(declare-fun u$ () Real)
(declare-fun v$ () Real)
(declare-fun x$ () Real)
(declare-fun uu$ () Real_a_fun$)
(declare-fun top$ () Real_set$)
(declare-fun times$ (Real Real) Real)
(declare-fun scaleR$ (Real A$) A$)
(declare-fun fun_app$ (Real_a_fun$ Real) A$)
(declare-fun at_within$ (Real Real_set$) Real_filter$)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(declare-fun vector_derivative$ (Real_a_fun$ Real_filter$) A$)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (fun_app$ g$ (+ (times$ (- v$ u$) ?v0) u$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (vector_derivative$ uu$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0))) (scaleR$ (- v$ u$) (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) (atLeastAtMost$ 0.0 1.0)))))) :named a1))
(assert (! (= (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) (atLeastAtMost$ 0.0 1.0))) (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) top$))) :named a2))
(assert (! (= (vector_derivative$ uu$ (at_within$ x$ (atLeastAtMost$ 0.0 1.0))) (scaleR$ (- v$ u$) (vector_derivative$ g$ (at_within$ (+ (times$ (- v$ u$) x$) u$) top$)))) :named a3))
(check-sat)
(get-unsat-core)
