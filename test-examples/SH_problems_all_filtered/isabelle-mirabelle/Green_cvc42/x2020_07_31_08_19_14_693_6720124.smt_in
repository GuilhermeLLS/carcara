; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort A_measure$ 0)
(declare-sort B_measure$ 0)
(declare-fun f$ (A_b_prod$) C$)
(declare-fun uu$ (B$) A_c_fun$)
(declare-fun top$ () A_set$)
(declare-fun uua$ () B_c_fun$)
(declare-fun uub$ () B_c_fun$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun top$a () B_set$)
(declare-fun lborel$ () A_measure$)
(declare-fun fun_app$ (B_c_fun$ B$) C$)
(declare-fun lborel$a () B_measure$)
(declare-fun fun_app$a (A_c_fun$ A$) C$)
(declare-fun integral$ (A_set$ A_c_fun$) C$)
(declare-fun integral$a (B_set$ B_c_fun$) C$)
(declare-fun lebesgue_integral$ (A_measure$ A_c_fun$) C$)
(declare-fun lebesgue_integral$a (B_measure$ B_c_fun$) C$)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uub$ ?v0) (integral$ top$ (uu$ ?v0))) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uua$ ?v0) (lebesgue_integral$ lborel$ (uu$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (f$ (pair$ ?v1 ?v0))) :pattern ((fun_app$a (uu$ ?v0) ?v1)))) :named a2))
(assert (! (not (= (lebesgue_integral$a lborel$a uua$) (integral$a top$a uub$))) :named a3))
(assert (! (= (lebesgue_integral$a lborel$a uua$) (lebesgue_integral$a lborel$a uub$)) :named a4))
(assert (! (= (lebesgue_integral$a lborel$a uub$) (integral$a top$a uub$)) :named a5))
(check-sat)
(get-unsat-core)
