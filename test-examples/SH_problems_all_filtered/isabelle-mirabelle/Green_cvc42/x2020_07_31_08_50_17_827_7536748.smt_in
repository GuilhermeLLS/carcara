; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIRA)
(declare-sort Real_set$ 0)
(declare-sort Real_set_set$ 0)
(declare-fun a$ () Real)
(declare-fun b$ () Real)
(declare-fun s$ () Real_set_set$)
(declare-fun x$ () Real)
(declare-fun bot$ () Real_set$)
(declare-fun sup$ (Real_set$ Real_set$) Real_set$)
(declare-fun sup$a (Real_set_set$) Real_set$)
(declare-fun finite$ (Real_set_set$) Bool)
(declare-fun insert$ (Real Real_set$) Real_set$)
(declare-fun member$ (Real_set$ Real_set_set$) Bool)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(assert (! (not (finite$ s$)) :named a0))
(assert (! (= (sup$ (insert$ x$ bot$) (sup$a s$)) (atLeastAtMost$ a$ b$)) :named a1))
(assert (! (forall ((?v0 Real_set$)) (=> (member$ ?v0 s$) (exists ((?v1 Real) (?v2 Real)) (and (< ?v1 ?v2) (= (atLeastAtMost$ ?v1 ?v2) ?v0))))) :named a2))
(assert (! (finite$ s$) :named a3))
(assert (! (< a$ x$) :named a4))
(assert (! (< x$ b$) :named a5))
(check-sat)
(get-unsat-core)
