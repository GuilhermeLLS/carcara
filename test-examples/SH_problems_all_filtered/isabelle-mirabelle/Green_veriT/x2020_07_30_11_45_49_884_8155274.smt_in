; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort Real_real_prod_set$ 0)
(declare-sort Real_real_prod_set_set$ 0)
(declare-sort Real_real_prod_real_real_prod_fun$ 0)
(declare-sort Real_real_prod_real_real_prod_fun_set$ 0)
(declare-sort Real_real_prod_real_real_prod_fun_real_real_prod_set_fun$ 0)
(declare-fun d$ () Real)
(declare-fun bot$ () Real_real_prod_real_real_prod_fun_set$)
(declare-fun image$ (Real_real_prod_real_real_prod_fun_real_real_prod_set_fun$ Real_real_prod_real_real_prod_fun_set$) Real_real_prod_set_set$)
(declare-fun insert$ (Real_real_prod_real_real_prod_fun$ Real_real_prod_real_real_prod_fun_set$) Real_real_prod_real_real_prod_fun_set$)
(declare-fun fun_app$ (Real_real_prod_real_real_prod_fun_real_real_prod_set_fun$ Real_real_prod_real_real_prod_fun$) Real_real_prod_set$)
(declare-fun cubeImage$ () Real_real_prod_real_real_prod_fun_real_real_prod_set_fun$)
(declare-fun diamond_cube$ (Real) Real_real_prod_real_real_prod_fun$)
(declare-fun gen_division$ (Real_real_prod_set$ Real_real_prod_set_set$) Bool)
(declare-fun rot_diamond_cube$ (Real) Real_real_prod_real_real_prod_fun$)
(assert (! (not (gen_division$ (fun_app$ cubeImage$ (diamond_cube$ d$)) (image$ cubeImage$ (insert$ (rot_diamond_cube$ d$) bot$)))) :named a0))
(assert (! (gen_division$ (fun_app$ cubeImage$ (diamond_cube$ d$)) (image$ cubeImage$ (insert$ (rot_diamond_cube$ d$) bot$))) :named a1))
(check-sat)
;;;;(get-proof)
