; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun f$ (A_b_prod$) A_b_prod$)
(declare-fun x$ () A$)
(declare-fun y$ () B$)
(declare-fun uu$ () B_b_fun$)
(declare-fun fst$ (A_b_prod$) A$)
(declare-fun lfp$ (B_b_fun$) B$)
(declare-fun snd$ (A_b_prod$) B$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun fun_app$ (B_b_fun$ B$) B$)
(declare-fun less_eq$ (A$ A$) Bool)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uu$ ?v0) (snd$ (f$ (pair$ x$ ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (less_eq$ (fst$ (f$ (pair$ x$ (lfp$ uu$)))) x$)) :named a1))
(assert (! (= (fst$ (f$ (pair$ x$ y$))) x$) :named a2))
(assert (! (less_eq$ (fst$ (f$ (pair$ x$ (lfp$ uu$)))) (fst$ (f$ (pair$ x$ y$)))) :named a3))
(check-sat)
(get-unsat-core)
