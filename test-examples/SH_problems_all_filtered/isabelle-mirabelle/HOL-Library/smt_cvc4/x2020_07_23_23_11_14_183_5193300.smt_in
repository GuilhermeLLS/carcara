; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort A_b_fun_set$ 0)
(declare-sort B_list_list$ 0)
(declare-sort A_b_fun_list$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_b_option_fun$ 0)
(declare-sort B_option_b_fun$ 0)
(declare-sort B_list_a_b_fun_fun$ 0)
(declare-fun as$ () A_list$)
(declare-fun bs$ () B_list$)
(declare-fun uu$ () B_list_a_b_fun_fun$)
(declare-fun map$ (B_list_a_b_fun_fun$ B_list_list$) A_b_fun_list$)
(declare-fun set$ (A_b_fun_list$) A_b_fun_set$)
(declare-fun the$ () B_option_b_fun$)
(declare-fun top$ () A_b_fun_set$)
(declare-fun zip$ (A_list$ B_list$) A_b_prod_list$)
(declare-fun card$ (A_b_fun_set$) Nat$)
(declare-fun comp$ (B_option_b_fun$ A_b_option_fun$) A_b_fun$)
(declare-fun size$ (B_list$) Nat$)
(declare-fun top$a () B_set$)
(declare-fun top$b () A_set$)
(declare-fun card$a (B_set$) Nat$)
(declare-fun card$b (A_set$) Nat$)
(declare-fun power$ (Nat$ Nat$) Nat$)
(declare-fun size$a (A_list$) Nat$)
(declare-fun size$b (A_b_fun_list$) Nat$)
(declare-fun map_of$ (A_b_prod_list$) A_b_option_fun$)
(declare-fun fun_app$ (B_list_a_b_fun_fun$ B_list$) A_b_fun$)
(declare-fun n_lists$ (Nat$ B_list$) B_list_list$)
(assert (! (forall ((?v0 B_list$)) (! (= (fun_app$ uu$ ?v0) (comp$ the$ (map_of$ (zip$ as$ ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (card$ top$) (power$ (card$a top$a) (card$b top$b)))) :named a1))
(assert (! (= (card$a top$a) (size$ bs$)) :named a2))
(assert (! (= (card$b top$b) (size$a as$)) :named a3))
(assert (! (= (card$ (set$ (map$ uu$ (n_lists$ (size$a as$) bs$)))) (size$b (map$ uu$ (n_lists$ (size$a as$) bs$)))) :named a4))
(assert (! (= (size$b (map$ uu$ (n_lists$ (size$a as$) bs$))) (power$ (size$ bs$) (size$a as$))) :named a5))
(assert (! (= top$ (set$ (map$ uu$ (n_lists$ (size$a as$) bs$)))) :named a6))
(check-sat)
(get-unsat-core)
