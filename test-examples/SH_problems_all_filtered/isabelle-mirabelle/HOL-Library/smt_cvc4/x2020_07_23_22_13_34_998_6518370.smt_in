; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=20
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_fset$ 0)
(declare-sort B_fset$ 0)
(declare-sort A_option$ 0)
(declare-sort B_option$ 0)
(declare-sort C_a_fmap$ 0)
(declare-sort C_b_fmap$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun x$ () C_a_fmap$)
(declare-fun y$ () C_b_fmap$)
(declare-fun the$ (B_option$) B$)
(declare-fun none$ () B_option$)
(declare-fun some$ (A$) A_option$)
(declare-fun the$a (A_option$) A$)
(declare-fun fmran$ (C_a_fmap$) A_fset$)
(declare-fun fmrel$ (A_b_bool_fun_fun$ C_a_fmap$ C_b_fmap$) Bool)
(declare-fun none$a () A_option$)
(declare-fun some$a (B$) B_option$)
(declare-fun fmran$a (C_b_fmap$) B_fset$)
(declare-fun fmrel$a (B_b_bool_fun_fun$ C_b_fmap$ C_b_fmap$) Bool)
(declare-fun fmrel$b (B_a_bool_fun_fun$ C_b_fmap$ C_a_fmap$) Bool)
(declare-fun fmrel$c (A_a_bool_fun_fun$ C_a_fmap$ C_a_fmap$) Bool)
(declare-fun fmember$ (A$ A_fset$) Bool)
(declare-fun fun_app$ (B_bool_fun$ B$) Bool)
(declare-fun fmember$a (B$ B_fset$) Bool)
(declare-fun fmlookup$ (C_a_fmap$ C$) A_option$)
(declare-fun fun_app$a (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$e (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun rel_fset$ (B_b_bool_fun_fun$ B_fset$ B_fset$) Bool)
(declare-fun fmlookup$a (C_b_fmap$ C$) B_option$)
(declare-fun rel_fset$a (B_a_bool_fun_fun$ B_fset$ A_fset$) Bool)
(declare-fun rel_fset$b (A_a_bool_fun_fun$ A_fset$ A_fset$) Bool)
(declare-fun rel_fset$c (A_b_bool_fun_fun$ A_fset$ B_fset$) Bool)
(assert (! (fmrel$ p$ x$ y$) :named a0))
(assert (! (forall ((?v0 A$) (?v1 C_a_fmap$)) (= (fmember$ ?v0 (fmran$ ?v1)) (exists ((?v2 C$)) (= (fmlookup$ ?v1 ?v2) (some$ ?v0))))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 C_b_fmap$)) (= (fmember$a ?v0 (fmran$a ?v1)) (exists ((?v2 C$)) (= (fmlookup$a ?v1 ?v2) (some$a ?v0))))) :named a2))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 C_b_fmap$) (?v2 C_b_fmap$) (?v3 C$)) (=> (and (fmrel$a ?v0 ?v1 ?v2) (and (=> (and (= (fmlookup$a ?v1 ?v3) none$) (= (fmlookup$a ?v2 ?v3) none$)) false) (forall ((?v4 B$) (?v5 B$)) (=> (and (= (fmlookup$a ?v1 ?v3) (some$a ?v4)) (and (= (fmlookup$a ?v2 ?v3) (some$a ?v5)) (fun_app$ (fun_app$a ?v0 ?v4) ?v5))) false)))) false)) :named a3))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 C_b_fmap$) (?v2 C_a_fmap$) (?v3 C$)) (=> (and (fmrel$b ?v0 ?v1 ?v2) (and (=> (and (= (fmlookup$a ?v1 ?v3) none$) (= (fmlookup$ ?v2 ?v3) none$a)) false) (forall ((?v4 B$) (?v5 A$)) (=> (and (= (fmlookup$a ?v1 ?v3) (some$a ?v4)) (and (= (fmlookup$ ?v2 ?v3) (some$ ?v5)) (fun_app$b (fun_app$c ?v0 ?v4) ?v5))) false)))) false)) :named a4))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_a_fmap$) (?v2 C_a_fmap$) (?v3 C$)) (=> (and (fmrel$c ?v0 ?v1 ?v2) (and (=> (and (= (fmlookup$ ?v1 ?v3) none$a) (= (fmlookup$ ?v2 ?v3) none$a)) false) (forall ((?v4 A$) (?v5 A$)) (=> (and (= (fmlookup$ ?v1 ?v3) (some$ ?v4)) (and (= (fmlookup$ ?v2 ?v3) (some$ ?v5)) (fun_app$b (fun_app$d ?v0 ?v4) ?v5))) false)))) false)) :named a5))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_a_fmap$) (?v2 C_b_fmap$) (?v3 C$)) (=> (and (fmrel$ ?v0 ?v1 ?v2) (and (=> (and (= (fmlookup$ ?v1 ?v3) none$a) (= (fmlookup$a ?v2 ?v3) none$)) false) (forall ((?v4 A$) (?v5 B$)) (=> (and (= (fmlookup$ ?v1 ?v3) (some$ ?v4)) (and (= (fmlookup$a ?v2 ?v3) (some$a ?v5)) (fun_app$ (fun_app$e ?v0 ?v4) ?v5))) false)))) false)) :named a6))
(assert (! (forall ((?v0 B$)) (= (the$ (some$a ?v0)) ?v0)) :named a7))
(assert (! (forall ((?v0 A$)) (= (the$a (some$ ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 B$)) (not (= (some$a ?v0) none$))) :named a9))
(assert (! (forall ((?v0 A$)) (not (= (some$ ?v0) none$a))) :named a10))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_fset$) (?v2 B_fset$)) (= (rel_fset$ ?v0 ?v1 ?v2) (and (forall ((?v3 B$)) (exists ((?v4 B$)) (=> (fmember$a ?v3 ?v1) (and (fmember$a ?v4 ?v2) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))))) (forall ((?v3 B$)) (exists ((?v4 B$)) (=> (fmember$a ?v3 ?v2) (and (fmember$a ?v4 ?v1) (fun_app$ (fun_app$a ?v0 ?v4) ?v3)))))))) :named a11))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_fset$) (?v2 A_fset$)) (= (rel_fset$a ?v0 ?v1 ?v2) (and (forall ((?v3 B$)) (exists ((?v4 A$)) (=> (fmember$a ?v3 ?v1) (and (fmember$ ?v4 ?v2) (fun_app$b (fun_app$c ?v0 ?v3) ?v4))))) (forall ((?v3 A$)) (exists ((?v4 B$)) (=> (fmember$ ?v3 ?v2) (and (fmember$a ?v4 ?v1) (fun_app$b (fun_app$c ?v0 ?v4) ?v3)))))))) :named a12))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_fset$) (?v2 A_fset$)) (= (rel_fset$b ?v0 ?v1 ?v2) (and (forall ((?v3 A$)) (exists ((?v4 A$)) (=> (fmember$ ?v3 ?v1) (and (fmember$ ?v4 ?v2) (fun_app$b (fun_app$d ?v0 ?v3) ?v4))))) (forall ((?v3 A$)) (exists ((?v4 A$)) (=> (fmember$ ?v3 ?v2) (and (fmember$ ?v4 ?v1) (fun_app$b (fun_app$d ?v0 ?v4) ?v3)))))))) :named a13))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_fset$) (?v2 B_fset$)) (= (rel_fset$c ?v0 ?v1 ?v2) (and (forall ((?v3 A$)) (exists ((?v4 B$)) (=> (fmember$ ?v3 ?v1) (and (fmember$a ?v4 ?v2) (fun_app$ (fun_app$e ?v0 ?v3) ?v4))))) (forall ((?v3 B$)) (exists ((?v4 A$)) (=> (fmember$a ?v3 ?v2) (and (fmember$ ?v4 ?v1) (fun_app$ (fun_app$e ?v0 ?v4) ?v3)))))))) :named a14))
(assert (! (not (rel_fset$c p$ (fmran$ x$) (fmran$a y$))) :named a15))
(check-sat)
;;;;(get-proof)
