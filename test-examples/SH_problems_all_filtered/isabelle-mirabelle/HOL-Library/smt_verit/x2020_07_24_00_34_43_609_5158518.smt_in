; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-fun e$ () Int)
(declare-fun m$ () Int)
(declare-fun powr$ (Real Real) Real)
(declare-fun times$ (Real Real) Real)
(declare-fun of_int$ (Int) Real)
(declare-fun times$a (Int Int) Int)
(declare-fun of_int$a (Int) Int)
(assert (! (not (exists ((?v0 Int) (?v1 Int)) (= (- (times$ (of_int$ m$) (powr$ 2.0 (of_int$ e$)))) (times$ (of_int$ ?v0) (powr$ 2.0 (of_int$ ?v1)))))) :named a0))
(assert (! (forall ((?v0 Int)) (= (of_int$a (- ?v0)) (- (of_int$a ?v0)))) :named a1))
(assert (! (forall ((?v0 Int)) (= (of_int$ (- ?v0)) (- (of_int$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Int) (?v1 Int)) (= (times$a ?v0 (- ?v1)) (- (times$a ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (times$ ?v0 (- ?v1)) (- (times$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 Int) (?v1 Int)) (= (times$a (- ?v0) ?v1) (times$a ?v0 (- ?v1)))) :named a5))
(assert (! (forall ((?v0 Real) (?v1 Real)) (= (times$ (- ?v0) ?v1) (times$ ?v0 (- ?v1)))) :named a6))
(check-sat)
;;;;;;(get-proof)
