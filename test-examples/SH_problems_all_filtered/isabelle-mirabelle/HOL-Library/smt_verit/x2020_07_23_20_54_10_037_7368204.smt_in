; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_fset$ 0)
(declare-sort B_fset$ 0)
(declare-sort C_a_fmap$ 0)
(declare-sort C_b_fmap$ 0)
(declare-fun p$ (A$ B$) Bool)
(declare-fun x$ () C_a_fmap$)
(declare-fun y$ () C_b_fmap$)
(declare-fun fmran$ (C_a_fmap$) A_fset$)
(declare-fun fmran$a (C_b_fmap$) B_fset$)
(declare-fun fmember$ (A$ A_fset$) Bool)
(declare-fun fmember$a (B$ B_fset$) Bool)
(assert (! (not (and (forall ((?v0 A$)) (exists ((?v1 B$)) (=> (fmember$ ?v0 (fmran$ x$)) (and (fmember$a ?v1 (fmran$a y$)) (p$ ?v0 ?v1))))) (forall ((?v0 B$)) (exists ((?v1 A$)) (=> (fmember$a ?v0 (fmran$a y$)) (and (fmember$ ?v1 (fmran$ x$)) (p$ ?v1 ?v0))))))) :named a0))
(assert (! (forall ((?v0 A$)) (=> (fmember$ ?v0 (fmran$ x$)) (exists ((?v1 B$)) (and (fmember$a ?v1 (fmran$a y$)) (p$ ?v0 ?v1))))) :named a1))
(assert (! (forall ((?v0 B$)) (=> (fmember$a ?v0 (fmran$a y$)) (exists ((?v1 A$)) (and (fmember$ ?v1 (fmran$ x$)) (p$ ?v1 ?v0))))) :named a2))
(check-sat)
;;;;;;(get-proof)
