; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=7
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat$ 0)
(declare-sort A_nat_sum$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_nat_sum_nat_fun$ 0)
(declare-sort Nat_a_nat_sum_fun$ 0)
(declare-sort A_nat_sum_bool_fun$ 0)
(declare-sort Bool_a_nat_sum_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort A_nat_sum_a_nat_sum_fun$ 0)
(declare-fun f$ () Nat_a_nat_sum_fun$)
(declare-fun g$ () Nat_a_nat_sum_fun$)
(declare-fun i$ () A_nat_sum$)
(declare-fun j$ () A_nat_sum$)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun min$ (Nat$) Nat_nat_fun$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () Nat_bool_fun$)
(declare-fun uub$ (A_nat_sum_a_nat_sum_fun$ Nat_a_nat_sum_fun$) Nat_a_nat_sum_fun$)
(declare-fun uuc$ (A_nat_sum_bool_fun$ Nat_a_nat_sum_fun$) Nat_bool_fun$)
(declare-fun uud$ (A_nat_sum_nat_fun$ Nat_a_nat_sum_fun$) Nat_nat_fun$)
(declare-fun uue$ (Bool_a_nat_sum_fun$ Nat_bool_fun$) Nat_a_nat_sum_fun$)
(declare-fun uuf$ (Bool_bool_fun$ Nat_bool_fun$) Nat_bool_fun$)
(declare-fun uug$ (Bool_nat_fun$ Nat_bool_fun$) Nat_nat_fun$)
(declare-fun uuh$ (Nat_a_nat_sum_fun$ Nat_nat_fun$) Nat_a_nat_sum_fun$)
(declare-fun uui$ (Nat_bool_fun$ Nat_nat_fun$) Nat_bool_fun$)
(declare-fun uuj$ (Nat_nat_fun$ Nat_nat_fun$) Nat_nat_fun$)
(declare-fun uuk$ () Nat_nat_fun$)
(declare-fun uul$ (Nat_bool_fun$) Nat_bool_fun$)
(declare-fun uum$ (Nat$) Nat_nat_fun$)
(declare-fun uun$ (Nat$) Nat_nat_fun$)
(declare-fun pred$ () Nat_nat_fun$)
(declare-fun push$ (A_nat_sum$ Nat_a_nat_sum_fun$) Nat_a_nat_sum_fun$)
(declare-fun zero$ () Nat$)
(declare-fun least$ (Nat_bool_fun$) Nat$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ () Nat_nat_bool_fun_fun$)
(declare-fun case_nat$ (A_nat_sum$ Nat_a_nat_sum_fun$) Nat_a_nat_sum_fun$)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$b (Nat_a_nat_sum_fun$ Nat$) A_nat_sum$)
(declare-fun fun_app$c (A_nat_sum_a_nat_sum_fun$ A_nat_sum$) A_nat_sum$)
(declare-fun fun_app$d (A_nat_sum_bool_fun$ A_nat_sum$) Bool)
(declare-fun fun_app$e (A_nat_sum_nat_fun$ A_nat_sum$) Nat$)
(declare-fun fun_app$f (Bool_a_nat_sum_fun$ Bool) A_nat_sum$)
(declare-fun fun_app$g (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$h (Bool_nat_fun$ Bool) Nat$)
(declare-fun fun_app$i (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun case_nat$a (Bool Nat_bool_fun$) Nat_bool_fun$)
(declare-fun case_nat$b (Nat$ Nat_nat_fun$) Nat_nat_fun$)
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (! (= (fun_app$ (uul$ ?v0) ?v1) (fun_app$ ?v0 (fun_app$a suc$ ?v1))) :pattern ((fun_app$ (uul$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (uun$ ?v0) ?v1) (fun_app$a suc$ (fun_app$a (min$ ?v0) ?v1))) :pattern ((fun_app$a (uun$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (uum$ ?v0) ?v1) (fun_app$a suc$ (fun_app$a (min$ ?v1) ?v0))) :pattern ((fun_app$a (uum$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_nat_sum_a_nat_sum_fun$) (?v1 Nat_a_nat_sum_fun$) (?v2 Nat$)) (! (= (fun_app$b (uub$ ?v0 ?v1) ?v2) (fun_app$c ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (uub$ ?v0 ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_nat_sum_bool_fun$) (?v1 Nat_a_nat_sum_fun$) (?v2 Nat$)) (! (= (fun_app$ (uuc$ ?v0 ?v1) ?v2) (fun_app$d ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$ (uuc$ ?v0 ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_nat_sum_nat_fun$) (?v1 Nat_a_nat_sum_fun$) (?v2 Nat$)) (! (= (fun_app$a (uud$ ?v0 ?v1) ?v2) (fun_app$e ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$a (uud$ ?v0 ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 Bool_a_nat_sum_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$b (uue$ ?v0 ?v1) ?v2) (fun_app$f ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$b (uue$ ?v0 ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$ (uuf$ ?v0 ?v1) ?v2) (fun_app$g ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (uuf$ ?v0 ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$a (uug$ ?v0 ?v1) ?v2) (fun_app$h ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$a (uug$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat_a_nat_sum_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$b (uuh$ ?v0 ?v1) ?v2) (fun_app$b ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$b (uuh$ ?v0 ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$ (uui$ ?v0 ?v1) ?v2) (fun_app$ ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$ (uui$ ?v0 ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$a (uuj$ ?v0 ?v1) ?v2) (fun_app$a ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (uuj$ ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a uuk$ ?v0) ?v0) :pattern ((fun_app$a uuk$ ?v0)))) :named a12))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) false) :pattern ((fun_app$ uua$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) true) :pattern ((fun_app$ uu$ ?v0)))) :named a14))
(assert (! (not (= i$ j$)) :named a15))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$b (case_nat$ i$ f$) ?v0) (fun_app$b (case_nat$ j$ g$) ?v0)) :pattern ((fun_app$b (case_nat$ i$ f$) ?v0)))) :named a16))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$)) (! (= (push$ ?v0 ?v1) (case_nat$ ?v0 ?v1)) :pattern ((push$ ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$)) (! (= (fun_app$b (case_nat$ ?v0 ?v1) zero$) ?v0) :pattern ((case_nat$ ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 Bool) (?v1 Nat_bool_fun$)) (! (= (fun_app$ (case_nat$a ?v0 ?v1) zero$) ?v0) :pattern ((case_nat$a ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$)) (! (= (fun_app$a (case_nat$b ?v0 ?v1) zero$) ?v0) :pattern ((case_nat$b ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$) (?v2 Nat$)) (! (= (fun_app$b (case_nat$ ?v0 ?v1) (fun_app$a suc$ ?v2)) (fun_app$b ?v1 ?v2)) :pattern ((fun_app$b (case_nat$ ?v0 ?v1) (fun_app$a suc$ ?v2))))) :named a21))
(assert (! (forall ((?v0 Bool) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$ (case_nat$a ?v0 ?v1) (fun_app$a suc$ ?v2)) (fun_app$ ?v1 ?v2)) :pattern ((fun_app$ (case_nat$a ?v0 ?v1) (fun_app$a suc$ ?v2))))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$a (case_nat$b ?v0 ?v1) (fun_app$a suc$ ?v2)) (fun_app$a ?v1 ?v2)) :pattern ((fun_app$a (case_nat$b ?v0 ?v1) (fun_app$a suc$ ?v2))))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)) (= ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)) (= ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 Nat$)) (not (= zero$ (fun_app$a suc$ ?v0)))) :named a26))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (case_nat$a false uu$) ?v0))) :named a27))
(assert (! (forall ((?v0 Nat$)) (= (= ?v0 zero$) (fun_app$ (case_nat$a true uua$) ?v0))) :named a28))
(assert (! (forall ((?v0 Nat$)) (not (= (fun_app$a suc$ ?v0) zero$))) :named a29))
(assert (! (forall ((?v0 Nat$)) (not (= zero$ (fun_app$a suc$ ?v0)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (fun_app$a suc$ ?v1)) (not (= ?v0 zero$)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)) (= ?v0 ?v1))) :named a32))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 zero$) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v0 (fun_app$a suc$ ?v2))))) (fun_app$ ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$i ?v0 ?v3) zero$)) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$i ?v0 zero$) (fun_app$a suc$ ?v3))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$i ?v0 ?v3) ?v4) (fun_app$ (fun_app$i ?v0 (fun_app$a suc$ ?v3)) (fun_app$a suc$ ?v4)))))) (fun_app$ (fun_app$i ?v0 ?v1) ?v2))) :named a34))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (fun_app$a suc$ ?v0)))) :named a35))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 (fun_app$a suc$ ?v2)) (fun_app$ ?v0 ?v2)))) (fun_app$ ?v0 zero$))) :named a36))
(assert (! (forall ((?v0 Nat$)) (=> (= (fun_app$a suc$ ?v0) zero$) false)) :named a37))
(assert (! (forall ((?v0 Nat$)) (=> (= zero$ (fun_app$a suc$ ?v0)) false)) :named a38))
(assert (! (forall ((?v0 Nat$)) (not (= zero$ (fun_app$a suc$ ?v0)))) :named a39))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (fun_app$a suc$ ?v1)) false))) false)) :named a40))
(assert (! (forall ((?v0 A_nat_sum_a_nat_sum_fun$) (?v1 A_nat_sum$) (?v2 Nat_a_nat_sum_fun$) (?v3 Nat$)) (= (fun_app$c ?v0 (fun_app$b (case_nat$ ?v1 ?v2) ?v3)) (fun_app$b (case_nat$ (fun_app$c ?v0 ?v1) (uub$ ?v0 ?v2)) ?v3))) :named a41))
(assert (! (forall ((?v0 A_nat_sum_bool_fun$) (?v1 A_nat_sum$) (?v2 Nat_a_nat_sum_fun$) (?v3 Nat$)) (= (fun_app$d ?v0 (fun_app$b (case_nat$ ?v1 ?v2) ?v3)) (fun_app$ (case_nat$a (fun_app$d ?v0 ?v1) (uuc$ ?v0 ?v2)) ?v3))) :named a42))
(assert (! (forall ((?v0 A_nat_sum_nat_fun$) (?v1 A_nat_sum$) (?v2 Nat_a_nat_sum_fun$) (?v3 Nat$)) (= (fun_app$e ?v0 (fun_app$b (case_nat$ ?v1 ?v2) ?v3)) (fun_app$a (case_nat$b (fun_app$e ?v0 ?v1) (uud$ ?v0 ?v2)) ?v3))) :named a43))
(assert (! (forall ((?v0 Bool_a_nat_sum_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$f ?v0 (fun_app$ (case_nat$a ?v1 ?v2) ?v3)) (fun_app$b (case_nat$ (fun_app$f ?v0 ?v1) (uue$ ?v0 ?v2)) ?v3))) :named a44))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$g ?v0 (fun_app$ (case_nat$a ?v1 ?v2) ?v3)) (fun_app$ (case_nat$a (fun_app$g ?v0 ?v1) (uuf$ ?v0 ?v2)) ?v3))) :named a45))
(assert (! (forall ((?v0 Bool_nat_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$h ?v0 (fun_app$ (case_nat$a ?v1 ?v2) ?v3)) (fun_app$a (case_nat$b (fun_app$h ?v0 ?v1) (uug$ ?v0 ?v2)) ?v3))) :named a46))
(assert (! (forall ((?v0 Nat_a_nat_sum_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$b ?v0 (fun_app$a (case_nat$b ?v1 ?v2) ?v3)) (fun_app$b (case_nat$ (fun_app$b ?v0 ?v1) (uuh$ ?v0 ?v2)) ?v3))) :named a47))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$ ?v0 (fun_app$a (case_nat$b ?v1 ?v2) ?v3)) (fun_app$ (case_nat$a (fun_app$ ?v0 ?v1) (uui$ ?v0 ?v2)) ?v3))) :named a48))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$a ?v0 (fun_app$a (case_nat$b ?v1 ?v2) ?v3)) (fun_app$a (case_nat$b (fun_app$a ?v0 ?v1) (uuj$ ?v0 ?v2)) ?v3))) :named a49))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a50))
(assert (! (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (fun_app$a suc$ ?v1))))) :named a51))
(assert (! (forall ((?v0 A_nat_sum_bool_fun$) (?v1 A_nat_sum$) (?v2 Nat_a_nat_sum_fun$) (?v3 Nat$)) (= (fun_app$d ?v0 (fun_app$b (case_nat$ ?v1 ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$d ?v0 ?v1))) (and (= ?v3 (fun_app$a suc$ (fun_app$a pred$ ?v3))) (not (fun_app$d ?v0 (fun_app$b ?v2 (fun_app$a pred$ ?v3))))))))) :named a52))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$g ?v0 (fun_app$ (case_nat$a ?v1 ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$g ?v0 ?v1))) (and (= ?v3 (fun_app$a suc$ (fun_app$a pred$ ?v3))) (not (fun_app$g ?v0 (fun_app$ ?v2 (fun_app$a pred$ ?v3))))))))) :named a53))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$ ?v0 (fun_app$a (case_nat$b ?v1 ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$ ?v0 ?v1))) (and (= ?v3 (fun_app$a suc$ (fun_app$a pred$ ?v3))) (not (fun_app$ ?v0 (fun_app$a ?v2 (fun_app$a pred$ ?v3))))))))) :named a54))
(assert (! (forall ((?v0 A_nat_sum_bool_fun$) (?v1 A_nat_sum$) (?v2 Nat_a_nat_sum_fun$) (?v3 Nat$)) (= (fun_app$d ?v0 (fun_app$b (case_nat$ ?v1 ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$d ?v0 ?v1)) (=> (= ?v3 (fun_app$a suc$ (fun_app$a pred$ ?v3))) (fun_app$d ?v0 (fun_app$b ?v2 (fun_app$a pred$ ?v3))))))) :named a55))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$g ?v0 (fun_app$ (case_nat$a ?v1 ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$g ?v0 ?v1)) (=> (= ?v3 (fun_app$a suc$ (fun_app$a pred$ ?v3))) (fun_app$g ?v0 (fun_app$ ?v2 (fun_app$a pred$ ?v3))))))) :named a56))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$ ?v0 (fun_app$a (case_nat$b ?v1 ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$ ?v0 ?v1)) (=> (= ?v3 (fun_app$a suc$ (fun_app$a pred$ ?v3))) (fun_app$ ?v0 (fun_app$a ?v2 (fun_app$a pred$ ?v3))))))) :named a57))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a pred$ ?v0) (fun_app$a (case_nat$b zero$ uuk$) ?v0))) :named a58))
(assert (! (= zero$ zero$) :named a59))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a60))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (not (fun_app$ ?v0 zero$))) (= (least$ ?v0) (fun_app$a suc$ (least$ (uul$ ?v0)))))) :named a61))
(assert (! (forall ((?v0 Nat_bool_fun$)) (! (=> (fun_app$ ?v0 zero$) (= (least$ ?v0) zero$)) :pattern ((least$ ?v0)))) :named a62))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$) (?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (and (fun_app$ ?v2 ?v3) (and (not (fun_app$ ?v0 zero$)) (forall ((?v4 Nat$)) (= (fun_app$ ?v0 (fun_app$a suc$ ?v4)) (fun_app$ ?v2 ?v4)))))) (= (least$ ?v0) (fun_app$a suc$ (least$ ?v2))))) :named a63))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ ?v0 (least$ ?v0)))) :named a64))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$)) (=> (and (exists ((?v2 Nat$)) (fun_app$ ?v0 ?v2)) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)))) (fun_app$ ?v1 (least$ ?v0)))) :named a65))
(assert (! (forall ((?v0 Nat_bool_fun$)) (=> (exists ((?v1 Nat$)) (fun_app$ ?v0 ?v1)) (fun_app$ ?v0 (least$ ?v0)))) :named a66))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3)))) (fun_app$ ?v2 (least$ ?v0)))) :named a67))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ ?v0) (fun_app$a suc$ ?v1)) (fun_app$a (case_nat$b zero$ uuk$) (fun_app$a (minus$ ?v0) ?v1)))) :named a68))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (min$ ?v0) (fun_app$a suc$ ?v1)) (fun_app$a (case_nat$b zero$ (uum$ ?v1)) ?v0))) :named a69))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (min$ (fun_app$a suc$ ?v0)) ?v1) (fun_app$a (case_nat$b zero$ (uun$ ?v0)) ?v1))) :named a70))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (fun_app$i less_eq$ (fun_app$a suc$ ?v0)) ?v1) (fun_app$ (case_nat$a false (fun_app$i less_eq$ ?v0)) ?v1))) :named a71))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v0)) :named a72))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (fun_app$i less_eq$ ?v0) zero$) (= ?v0 zero$))) :named a73))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (minus$ zero$) ?v0) zero$)) :named a74))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (minus$ ?v0) zero$) ?v0)) :named a75))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))) :named a76))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (fun_app$i less_eq$ (fun_app$a suc$ ?v0)) (fun_app$a suc$ ?v1)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v1))) :named a77))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$i less_eq$ zero$) ?v0)) :named a78))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$i less_eq$ zero$) ?v0)) :named a79))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ (fun_app$a suc$ ?v0)) (fun_app$a suc$ ?v1)) (fun_app$a (minus$ ?v0) ?v1))) :named a80))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ (fun_app$a suc$ ?v0)) ?v1)) (fun_app$a suc$ ?v2)) (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2))) :named a81))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (minus$ zero$) ?v0) zero$)) :named a82))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (minus$ ?v0) ?v0) zero$)) :named a83))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (= (fun_app$a (minus$ ?v1) (fun_app$a (minus$ ?v1) ?v0)) ?v0))) :named a84))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (min$ (fun_app$a suc$ ?v0)) (fun_app$a suc$ ?v1)) (fun_app$a suc$ (fun_app$a (min$ ?v0) ?v1)))) :named a85))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (min$ zero$) ?v0) zero$)) :named a86))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (min$ ?v0) zero$) zero$)) :named a87))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (= (fun_app$a (minus$ ?v0) ?v1) zero$))) :named a88))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (minus$ ?v0) ?v1) zero$) (fun_app$ (fun_app$i less_eq$ ?v0) ?v1))) :named a89))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v2)) ?v1))) :named a90))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (= (fun_app$a (minus$ (fun_app$a suc$ ?v1)) ?v0) (fun_app$a suc$ (fun_app$a (minus$ ?v1) ?v0))))) :named a91))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v0 (fun_app$a suc$ ?v3))) (fun_app$a ?v0 ?v3))) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v0 ?v2)) (fun_app$a ?v0 ?v1)))) :named a92))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v0 ?v3)) (fun_app$a ?v0 (fun_app$a suc$ ?v3)))) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v0 ?v1)) (fun_app$a ?v0 ?v2)))) :named a93))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v0) ?v1) ?v0))) :named a94))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (= (fun_app$a (min$ ?v1) ?v0) ?v0))) :named a95))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) (fun_app$a ?v1 ?v2)) (and (fun_app$ (fun_app$i less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v4) ?v5) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v1 ?v4)) (fun_app$a ?v1 ?v5)))))) (fun_app$ (fun_app$i less_eq$ ?v0) (fun_app$a ?v1 ?v3)))) :named a96))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (and (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v4) ?v5) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v2 ?v4)) (fun_app$a ?v2 ?v5)))))) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v2 ?v0)) ?v3))) :named a97))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v2)) (and (fun_app$ (fun_app$i less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v4) ?v5) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v1 ?v4)) (fun_app$a ?v1 ?v5)))))) (fun_app$ (fun_app$i less_eq$ ?v0) (fun_app$a ?v1 ?v3)))) :named a98))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (and (= (fun_app$a ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v4) ?v5) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v2 ?v4)) (fun_app$a ?v2 ?v5)))))) (fun_app$ (fun_app$i less_eq$ (fun_app$a ?v2 ?v0)) ?v3))) :named a99))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (min$ ?v0) ?v1) (ite (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) ?v0 ?v1))) :named a100))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0)))) :named a101))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a102))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0))) :named a103))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (fun_app$i less_eq$ ?v0) ?v1))) :named a104))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) false) (=> (fun_app$ (fun_app$i less_eq$ ?v1) ?v0) false)) false)) :named a105))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2))) :named a106))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)) false) (and (=> (and (fun_app$ (fun_app$i less_eq$ ?v1) ?v0) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2)) false) (and (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v2) (fun_app$ (fun_app$i less_eq$ ?v2) ?v1)) false) (and (=> (and (fun_app$ (fun_app$i less_eq$ ?v2) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0)) false) (and (=> (and (fun_app$ (fun_app$i less_eq$ ?v1) ?v2) (fun_app$ (fun_app$i less_eq$ ?v2) ?v0)) false) (=> (and (fun_app$ (fun_app$i less_eq$ ?v2) ?v0) (fun_app$ (fun_app$i less_eq$ ?v0) ?v1)) false)))))) false)) :named a107))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (= (fun_app$ (fun_app$i less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (fun_app$i less_eq$ ?v1) ?v0)))) :named a108))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0)))) :named a109))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2))) :named a110))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2))) :named a111))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a112))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2))) :named a113))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v0)) :named a114))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v3) ?v4) (fun_app$ (fun_app$i ?v0 ?v3) ?v4))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$i ?v0 ?v4) ?v3) (fun_app$ (fun_app$i ?v0 ?v3) ?v4)))) (fun_app$ (fun_app$i ?v0 ?v1) ?v2))) :named a115))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v2) ?v0)) (fun_app$ (fun_app$i less_eq$ ?v2) ?v1))) :named a116))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$i less_eq$ ?v1) ?v0) (fun_app$ (fun_app$i less_eq$ ?v0) ?v1)))) :named a117))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0)) (= ?v1 ?v0))) :named a118))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$i less_eq$ ?v3) ?v2)))) (exists ((?v3 Nat$)) (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (fun_app$i less_eq$ ?v4) ?v3))))))) :named a119))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0))) :named a120))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ (fun_app$a (minus$ ?v2) ?v1)) (fun_app$a (minus$ ?v2) ?v0)))) :named a121))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v2) ?v1)) (= (fun_app$ (fun_app$i less_eq$ (fun_app$a (minus$ ?v1) ?v0)) (fun_app$a (minus$ ?v1) ?v2)) (fun_app$ (fun_app$i less_eq$ ?v2) ?v0)))) :named a122))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$ (fun_app$i less_eq$ (fun_app$a (minus$ ?v0) ?v1)) ?v0)) :named a123))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ (fun_app$a (minus$ ?v0) ?v2)) (fun_app$a (minus$ ?v1) ?v2)))) :named a124))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2)) (= (fun_app$a (minus$ (fun_app$a (minus$ ?v1) ?v0)) (fun_app$a (minus$ ?v2) ?v0)) (fun_app$a (minus$ ?v1) ?v2)))) :named a125))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v2)) ?v1))) :named a126))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2)) (= (fun_app$ (fun_app$i less_eq$ (fun_app$a (minus$ ?v1) ?v0)) (fun_app$a (minus$ ?v2) ?v0)) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)))) :named a127))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2)) (= (= (fun_app$a (minus$ ?v1) ?v0) (fun_app$a (minus$ ?v2) ?v0)) (= ?v1 ?v2)))) :named a128))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a129))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (fun_app$i less_eq$ ?v0) ?v1))) :named a130))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (min$ (fun_app$a (minus$ ?v0) ?v1)) (fun_app$a (minus$ ?v2) ?v1)) (fun_app$a (minus$ (fun_app$a (min$ ?v0) ?v2)) ?v1))) :named a131))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (fun_app$i less_eq$ ?v0) ?v1) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v2))) :named a132))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$i less_eq$ ?v0) ?v0)) :named a133))
(assert (! (forall ((?v0 Nat_bool_fun$)) (=> (exists ((?v1 Nat$)) (and (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)))) (forall ((?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v2) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$i less_eq$ ?v2) ?v3)))) (= ?v2 ?v1))))) (fun_app$ ?v0 (least$ ?v0)))) :named a134))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (exists ((?v2 Nat$)) (and (and (fun_app$ ?v0 ?v2) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$i less_eq$ ?v2) ?v3)))) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (fun_app$i less_eq$ ?v3) ?v4)))) (= ?v3 ?v2))))) (fun_app$ ?v0 ?v1)) (fun_app$ (fun_app$i less_eq$ (least$ ?v0)) ?v1))) :named a135))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$i less_eq$ ?v1) ?v3))) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (fun_app$i less_eq$ ?v3) ?v4)))) (fun_app$ ?v2 ?v3))))) (fun_app$ ?v2 (least$ ?v0)))) :named a136))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (fun_app$i less_eq$ ?v1) ?v2)))) (= (least$ ?v0) ?v1))) :named a137))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (fun_app$i less_eq$ ?v3) ?v4)))) (fun_app$ ?v2 ?v3)))) (fun_app$ ?v2 (least$ ?v0)))) :named a138))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$)) (=> (and (exists ((?v2 Nat$)) (fun_app$ ?v0 ?v2)) (forall ((?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v2) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (fun_app$i less_eq$ ?v2) ?v3)))) (fun_app$ ?v1 ?v2)))) (fun_app$ ?v1 (least$ ?v0)))) :named a139))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ (fun_app$i less_eq$ (least$ ?v0)) ?v1))) :named a140))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (fun_app$i less_eq$ zero$) ?v0)) :named a141))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 (fun_app$a suc$ ?v3)) (fun_app$ ?v0 ?v3)))) (fun_app$ ?v0 (fun_app$a (minus$ ?v1) ?v2)))) :named a142))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (= (fun_app$a (minus$ ?v0) ?v1) zero$) (= (fun_app$a (minus$ ?v1) ?v0) zero$)) (= ?v0 ?v1))) :named a143))
(check-sat)
;;;;;;(get-proof)
