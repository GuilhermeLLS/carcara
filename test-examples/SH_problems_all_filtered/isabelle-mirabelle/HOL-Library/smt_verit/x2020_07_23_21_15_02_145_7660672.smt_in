; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_b_fmap$ 0)
(declare-sort B_option$ 0)
(declare-fun p$ (A_b_fmap$) Bool)
(declare-fun ma$ () A_b_fmap$)
(declare-fun none$ () B_option$)
(declare-fun fmupd$ (A$ B$ A_b_fmap$) A_b_fmap$)
(declare-fun fmempty$ () A_b_fmap$)
(declare-fun fmlookup$ (A_b_fmap$ A$) B_option$)
(assert (! (not (p$ ma$)) :named a0))
(assert (! (forall ((?v0 A_b_fmap$) (?v1 A$) (?v2 B$)) (=> (and (p$ ?v0) (= (fmlookup$ ?v0 ?v1) none$)) (p$ (fmupd$ ?v1 ?v2 ?v0)))) :named a1))
(assert (! (p$ fmempty$) :named a2))
(assert (! (= ma$ fmempty$) :named a3))
(check-sat)
;;;;;;(get-proof)
