; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=3
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_set$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_set_set$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort B_b_set_fun$ 0)
(declare-sort B_set_b_fun$ 0)
(declare-sort B_set_set_set$ 0)
(declare-sort B_set_b_set_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-fun c$ () B$)
(declare-fun f$ (A$) B$)
(declare-fun g$ (A$) B$)
(declare-fun h$ (A$) B$)
(declare-fun abs$ () B_b_fun$)
(declare-fun times$ (B$) B_b_fun$)
(declare-fun member$ (B_set_set$ B_set_set_set$) Bool)
(declare-fun times$a (B_set_set$ B_set_set$) B_set_set$)
(declare-fun times$b (B_set_set_set$ B_set_set_set$) B_set_set_set$)
(declare-fun times$c (B_set$) B_set_b_set_fun$)
(declare-fun fun_app$ (B_bool_fun$ B$) Bool)
(declare-fun less_eq$ () B_b_bool_fun_fun$)
(declare-fun member$a (B_set$ B_set_set$) Bool)
(declare-fun member$b (B$ B_set$) Bool)
(declare-fun fun_app$a (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (B_set_b_set_fun$ B_set$) B_set$)
(declare-fun fun_app$d (B_b_set_fun$ B$) B_set$)
(declare-fun fun_app$e (B_set_b_fun$ B_set$) B$)
(declare-fun less_eq$a (B_set$ B_set$) Bool)
(declare-fun less_eq$b (B_set_set$ B_set_set$) Bool)
(assert (! (not (exists ((?v0 B$)) (forall ((?v1 A$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b abs$ (g$ ?v1))) (fun_app$b (times$ ?v0) (fun_app$b abs$ (h$ ?v1))))))) :named a0))
(assert (! (forall ((?v0 A$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b abs$ (g$ ?v0))) (fun_app$b abs$ (f$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A$)) (fun_app$ (fun_app$a less_eq$ (fun_app$b abs$ (f$ ?v0))) (fun_app$b (times$ c$) (fun_app$b abs$ (h$ ?v0))))) :named a2))
(assert (! (forall ((?v0 B$)) (= (fun_app$b (times$ (fun_app$b abs$ ?v0)) (fun_app$b abs$ ?v0)) (fun_app$b (times$ ?v0) ?v0))) :named a3))
(assert (! (forall ((?v0 B$)) (= (fun_app$b abs$ (fun_app$b abs$ ?v0)) (fun_app$b abs$ ?v0))) :named a4))
(assert (! (forall ((?v0 B$)) (= (fun_app$b abs$ (fun_app$b abs$ ?v0)) (fun_app$b abs$ ?v0))) :named a5))
(assert (! (forall ((?v0 B_set_set$) (?v1 B_set_set_set$) (?v2 B_set_set$) (?v3 B_set_set_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v2 ?v3)) (member$ (times$a ?v0 ?v2) (times$b ?v1 ?v3)))) :named a6))
(assert (! (forall ((?v0 B_set$) (?v1 B_set_set$) (?v2 B_set$) (?v3 B_set_set$)) (=> (and (member$a ?v0 ?v1) (member$a ?v2 ?v3)) (member$a (fun_app$c (times$c ?v0) ?v2) (times$a ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 B$) (?v3 B_set$)) (=> (and (member$b ?v0 ?v1) (member$b ?v2 ?v3)) (member$b (fun_app$b (times$ ?v0) ?v2) (fun_app$c (times$c ?v1) ?v3)))) :named a8))
(assert (! (forall ((?v0 B_set$)) (less_eq$a ?v0 ?v0)) :named a9))
(assert (! (forall ((?v0 B$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a10))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (fun_app$b abs$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ (fun_app$b abs$ ?v0)) (fun_app$b abs$ ?v1)))) :named a11))
(assert (! (forall ((?v0 B$) (?v1 B$)) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$b abs$ ?v0)) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a12))
(assert (! (forall ((?v0 B$)) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b abs$ ?v0))) :named a13))
(assert (! (forall ((?v0 B_set_set$) (?v1 B_set_set$) (?v2 B_set_set$)) (= (times$a (times$a ?v0 ?v1) ?v2) (times$a ?v0 (times$a ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$)) (= (fun_app$c (times$c (fun_app$c (times$c ?v0) ?v1)) ?v2) (fun_app$c (times$c ?v0) (fun_app$c (times$c ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (= (fun_app$b (times$ (fun_app$b (times$ ?v0) ?v1)) ?v2) (fun_app$b (times$ ?v0) (fun_app$b (times$ ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 B_set_set$) (?v1 B_set_set_set$) (?v2 B_set_set_set$)) (=> (and (member$ ?v0 (times$b ?v1 ?v2)) (forall ((?v3 B_set_set$) (?v4 B_set_set$)) (=> (and (= ?v0 (times$a ?v3 ?v4)) (and (member$ ?v3 ?v1) (member$ ?v4 ?v2))) false))) false)) :named a17))
(assert (! (forall ((?v0 B_set$) (?v1 B_set_set$) (?v2 B_set_set$)) (=> (and (member$a ?v0 (times$a ?v1 ?v2)) (forall ((?v3 B_set$) (?v4 B_set$)) (=> (and (= ?v0 (fun_app$c (times$c ?v3) ?v4)) (and (member$a ?v3 ?v1) (member$a ?v4 ?v2))) false))) false)) :named a18))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 B_set$)) (=> (and (member$b ?v0 (fun_app$c (times$c ?v1) ?v2)) (forall ((?v3 B$) (?v4 B$)) (=> (and (= ?v0 (fun_app$b (times$ ?v3) ?v4)) (and (member$b ?v3 ?v1) (member$b ?v4 ?v2))) false))) false)) :named a19))
(assert (! (forall ((?v0 B_set_set$) (?v1 B_set_set$) (?v2 B_set_set$) (?v3 B_set_set$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v2 ?v3)) (less_eq$b (times$a ?v0 ?v2) (times$a ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$) (?v3 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v3)) (less_eq$a (fun_app$c (times$c ?v0) ?v2) (fun_app$c (times$c ?v1) ?v3)))) :named a21))
(assert (! (forall ((?v0 B_set_set$) (?v1 B_set_set$) (?v2 B_set_set$) (?v3 B_set_set$) (?v4 B_set$)) (=> (and (less_eq$b ?v0 ?v1) (and (less_eq$b ?v2 ?v3) (member$a ?v4 (times$a ?v0 ?v2)))) (member$a ?v4 (times$a ?v1 ?v3)))) :named a22))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$) (?v3 B_set$) (?v4 B$)) (=> (and (less_eq$a ?v0 ?v1) (and (less_eq$a ?v2 ?v3) (member$b ?v4 (fun_app$c (times$c ?v0) ?v2)))) (member$b ?v4 (fun_app$c (times$c ?v1) ?v3)))) :named a23))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v1 ?v0))) :named a24))
(assert (! (forall ((?v0 B$) (?v1 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v1 ?v0))) :named a25))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v1 ?v0) (less_eq$a ?v0 ?v1)))) :named a26))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)))) :named a27))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v0)) (less_eq$a ?v2 ?v1))) :named a28))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1))) :named a29))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B$)) (=> (and (forall ((?v3 B$) (?v4 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v3) ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (forall ((?v3 B$) (?v4 B$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)))) (fun_app$ (fun_app$a ?v0 ?v1) ?v2))) :named a30))
(assert (! (forall ((?v0 B_set$)) (less_eq$a ?v0 ?v0)) :named a31))
(assert (! (forall ((?v0 B$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a32))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a33))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a34))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 B$) (?v1 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (= ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a37))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a38))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$)) (=> (and (= ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a39))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a40))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)))) :named a41))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a42))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (less_eq$a ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$a ?v1 ?v0)))) :named a43))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a44))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (=> (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) false) (and (=> (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) false) (=> (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)) false)))))) false)) :named a45))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a46))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a47))
(assert (! (forall ((?v0 B$) (?v1 B$)) (=> (and (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) false) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) false)) false)) :named a48))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v0 ?v1))) :named a49))
(assert (! (forall ((?v0 B$) (?v1 B$)) (=> (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a50))
(assert (! (forall ((?v0 B$) (?v1 B$)) (or (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0))) :named a51))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 B$) (?v1 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)))) :named a54))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a55))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_b_set_fun$) (?v3 B_set$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$d ?v2 ?v1) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$d ?v2 ?v4) (fun_app$d ?v2 ?v5)))))) (less_eq$a (fun_app$d ?v2 ?v0) ?v3))) :named a56))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set_b_fun$) (?v3 B$)) (=> (and (less_eq$a ?v0 ?v1) (and (= (fun_app$e ?v2 ?v1) ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$e ?v2 ?v4)) (fun_app$e ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$e ?v2 ?v0)) ?v3))) :named a57))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set_b_set_fun$) (?v3 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (= (fun_app$c ?v2 ?v1) ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$c ?v2 ?v4) (fun_app$c ?v2 ?v5)))))) (less_eq$a (fun_app$c ?v2 ?v0) ?v3))) :named a58))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_b_fun$) (?v3 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$b ?v2 ?v1) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v0)) ?v3))) :named a59))
(assert (! (forall ((?v0 B_set$) (?v1 B_b_set_fun$) (?v2 B$) (?v3 B$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$d ?v1 ?v4) (fun_app$d ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$d ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 B$) (?v1 B_set_b_fun$) (?v2 B_set$) (?v3 B_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$e ?v1 ?v4)) (fun_app$e ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$e ?v1 ?v3)))) :named a61))
(assert (! (forall ((?v0 B_set$) (?v1 B_set_b_set_fun$) (?v2 B_set$) (?v3 B_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$c ?v1 ?v4) (fun_app$c ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$c ?v1 ?v3)))) :named a62))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$) (?v3 B$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v1 ?v4)) (fun_app$b ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b ?v1 ?v3)))) :named a63))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_b_set_fun$) (?v3 B_set$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (less_eq$a (fun_app$d ?v2 ?v1) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$d ?v2 ?v4) (fun_app$d ?v2 ?v5)))))) (less_eq$a (fun_app$d ?v2 ?v0) ?v3))) :named a64))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set_b_fun$) (?v3 B$)) (=> (and (less_eq$a ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$e ?v2 ?v1)) ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$e ?v2 ?v4)) (fun_app$e ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$e ?v2 ?v0)) ?v3))) :named a65))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set_b_set_fun$) (?v3 B_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (less_eq$a (fun_app$c ?v2 ?v1) ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$c ?v2 ?v4) (fun_app$c ?v2 ?v5)))))) (less_eq$a (fun_app$c ?v2 ?v0) ?v3))) :named a66))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_b_fun$) (?v3 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v1)) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 ?v5)))))) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v2 ?v0)) ?v3))) :named a67))
(assert (! (forall ((?v0 B$) (?v1 B_set_b_fun$) (?v2 B_set$) (?v3 B_set$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$e ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$e ?v1 ?v4)) (fun_app$e ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$e ?v1 ?v3)))) :named a68))
(assert (! (forall ((?v0 B_set$) (?v1 B_b_set_fun$) (?v2 B$) (?v3 B$)) (=> (and (less_eq$a ?v0 (fun_app$d ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (less_eq$a (fun_app$d ?v1 ?v4) (fun_app$d ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$d ?v1 ?v3)))) :named a69))
(assert (! (forall ((?v0 B_set$) (?v1 B_set_b_set_fun$) (?v2 B_set$) (?v3 B_set$)) (=> (and (less_eq$a ?v0 (fun_app$c ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 B_set$) (?v5 B_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$c ?v1 ?v4) (fun_app$c ?v1 ?v5)))))) (less_eq$a ?v0 (fun_app$c ?v1 ?v3)))) :named a70))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$) (?v3 B$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$b ?v1 ?v4)) (fun_app$b ?v1 ?v5)))))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b ?v1 ?v3)))) :named a71))
(assert (! (forall ((?v0 B_set_set$) (?v1 B_set_set$) (?v2 B_set_set$)) (= (times$a ?v0 (times$a ?v1 ?v2)) (times$a ?v1 (times$a ?v0 ?v2)))) :named a72))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$)) (= (fun_app$c (times$c ?v0) (fun_app$c (times$c ?v1) ?v2)) (fun_app$c (times$c ?v1) (fun_app$c (times$c ?v0) ?v2)))) :named a73))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$)) (= (fun_app$b (times$ ?v0) (fun_app$b (times$ ?v1) ?v2)) (fun_app$b (times$ ?v1) (fun_app$b (times$ ?v0) ?v2)))) :named a74))
(check-sat)
;;;;;;(get-proof)
