; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=5
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort A_nat_sum$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort Nat_a_nat_sum_fun$ 0)
(declare-fun f$ () Nat_a_nat_sum_fun$)
(declare-fun k$ () Nat$)
(declare-fun p$ () Bool)
(declare-fun inl$ (A$) A_nat_sum$)
(declare-fun inr$ () Nat_a_nat_sum_fun$)
(declare-fun lfp$ (Bool_bool_fun$) Bool)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun mono$ (Bool_nat_fun$) Bool)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun push$ (A_nat_sum$ Nat_a_nat_sum_fun$) Nat_a_nat_sum_fun$)
(declare-fun size$ (A_nat_sum$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun least$ (Nat_bool_fun$) Nat$)
(declare-fun mono$a (Nat_bool_fun$) Bool)
(declare-fun mono$b (Nat_nat_fun$) Bool)
(declare-fun mono$c (Bool_bool_fun$) Bool)
(declare-fun least$a (Bool_bool_fun$) Bool)
(declare-fun fun_app$ (Nat_a_nat_sum_fun$ Nat$) A_nat_sum$)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun case_nat$ (A_nat_sum$ Nat_a_nat_sum_fun$) Nat_a_nat_sum_fun$)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$b (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$c (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$d (Bool_nat_fun$ Bool) Nat$)
(declare-fun less_eq$a (Bool) Bool_bool_fun$)
(declare-fun size_sum$ (A_nat_fun$ Nat_nat_fun$ A_nat_sum$) Nat$)
(assert (! (not p$) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (push$ (fun_app$ inr$ (fun_app$a suc$ k$)) f$) ?v0) (fun_app$ inr$ zero$)) :pattern ((fun_app$ (push$ (fun_app$ inr$ (fun_app$a suc$ k$)) f$) ?v0)))) :named a1))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$)) (! (= (push$ ?v0 ?v1) (case_nat$ ?v0 ?v1)) :pattern ((push$ ?v0 ?v1)))) :named a2))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$) (?v2 A_nat_sum$) (?v3 Nat_a_nat_sum_fun$)) (=> (= (push$ ?v0 ?v1) (push$ ?v2 ?v3)) (= ?v0 ?v2))) :named a3))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$) (?v2 A_nat_sum$) (?v3 Nat_a_nat_sum_fun$)) (=> (= (push$ ?v0 ?v1) (push$ ?v2 ?v3)) (= ?v1 ?v3))) :named a4))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$)) (! (= (fun_app$ (case_nat$ ?v0 ?v1) zero$) ?v0) :pattern ((case_nat$ ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$) (?v2 Nat$)) (! (= (fun_app$ (case_nat$ ?v0 ?v1) (fun_app$a suc$ ?v2)) (fun_app$ ?v1 ?v2)) :pattern ((fun_app$ (case_nat$ ?v0 ?v1) (fun_app$a suc$ ?v2))))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ inr$ ?v0) (fun_app$ inr$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A_nat_sum$) (?v1 Nat_a_nat_sum_fun$) (?v2 A_nat_sum$) (?v3 Nat_a_nat_sum_fun$)) (=> (and (= (push$ ?v0 ?v1) (push$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a8))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$b (less$ zero$) ?v0))) :named a9))
(assert (! (forall ((?v0 Nat$)) (not (= (fun_app$a suc$ ?v0) zero$))) :named a10))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$b (less$ ?v0) zero$))) :named a11))
(assert (! (forall ((?v0 Nat_bool_fun$)) (! (=> (fun_app$b ?v0 zero$) (= (least$ ?v0) zero$)) :pattern ((least$ ?v0)))) :named a12))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$b ?v0 ?v1) (fun_app$b ?v0 (least$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (not (= (fun_app$ inr$ ?v0) (inl$ ?v1)))) :named a14))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$b ?v0 ?v2) (fun_app$b (less_eq$ ?v1) ?v2)))) (= (least$ ?v0) ?v1))) :named a15))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool)) (=> (and (fun_app$c ?v0 ?v1) (forall ((?v2 Bool)) (=> (fun_app$c ?v0 ?v2) (fun_app$c (less_eq$a ?v1) ?v2)))) (= (least$a ?v0) ?v1))) :named a16))
(assert (! (forall ((?v0 Nat$)) (! (= (size$ (fun_app$ inr$ ?v0)) (fun_app$a suc$ zero$)) :pattern ((fun_app$ inr$ ?v0)))) :named a17))
(assert (! (forall ((?v0 A_nat_sum$)) (=> (and (forall ((?v1 A$)) (=> (= ?v0 (inl$ ?v1)) false)) (forall ((?v1 Nat$)) (=> (= ?v0 (fun_app$ inr$ ?v1)) false))) false)) :named a18))
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (=> (=> ?v0 ?v1) (fun_app$c (less_eq$a ?v0) ?v1))) :named a19))
(assert (! (forall ((?v0 Bool_nat_fun$)) (=> (forall ((?v1 Bool) (?v2 Bool)) (=> (fun_app$c (less_eq$a ?v1) ?v2) (fun_app$b (less_eq$ (fun_app$d ?v0 ?v1)) (fun_app$d ?v0 ?v2)))) (mono$ ?v0))) :named a20))
(assert (! (forall ((?v0 Nat_bool_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$b (less_eq$ ?v1) ?v2) (fun_app$c (less_eq$a (fun_app$b ?v0 ?v1)) (fun_app$b ?v0 ?v2)))) (mono$a ?v0))) :named a21))
(assert (! (forall ((?v0 Nat_nat_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$b (less_eq$ ?v1) ?v2) (fun_app$b (less_eq$ (fun_app$a ?v0 ?v1)) (fun_app$a ?v0 ?v2)))) (mono$b ?v0))) :named a22))
(assert (! (forall ((?v0 Bool_bool_fun$)) (=> (forall ((?v1 Bool) (?v2 Bool)) (=> (fun_app$c (less_eq$a ?v1) ?v2) (fun_app$c (less_eq$a (fun_app$c ?v0 ?v1)) (fun_app$c ?v0 ?v2)))) (mono$c ?v0))) :named a23))
(assert (! (forall ((?v0 Bool) (?v1 Bool_bool_fun$)) (=> (and (= ?v0 (lfp$ ?v1)) (mono$c ?v1)) (= ?v0 (fun_app$c ?v1 ?v0)))) :named a24))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (size_sum$ ?v0 ?v1 (fun_app$ inr$ ?v2)) (fun_app$a (plus$ (fun_app$a ?v1 ?v2)) (fun_app$a suc$ zero$))) :pattern ((size_sum$ ?v0 ?v1 (fun_app$ inr$ ?v2))))) :named a25))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (plus$ ?v0) zero$) ?v0)) :named a26))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a27))
(check-sat)
;;;;;;(get-proof)
