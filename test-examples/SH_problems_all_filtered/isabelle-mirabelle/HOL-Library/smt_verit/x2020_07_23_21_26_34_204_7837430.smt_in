; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_b_fmap$ 0)
(declare-sort A_b_fmap_set$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_b_prod_list_set$ 0)
(declare-sort A_b_fmap_a_b_fmap_fun$ 0)
(declare-sort A_b_fmap_a_b_prod_list_fun$ 0)
(declare-sort A_b_prod_list_a_b_fmap_fun$ 0)
(declare-sort A_b_prod_list_a_b_prod_list_fun$ 0)
(declare-fun top$ () A_b_prod_list_set$)
(declare-fun top$a () A_b_fmap_set$)
(declare-fun image$ (A_b_prod_list_a_b_fmap_fun$ A_b_prod_list_set$) A_b_fmap_set$)
(declare-fun image$a (A_b_prod_list_a_b_prod_list_fun$ A_b_prod_list_set$) A_b_prod_list_set$)
(declare-fun image$b (A_b_fmap_a_b_prod_list_fun$ A_b_fmap_set$) A_b_prod_list_set$)
(declare-fun image$c (A_b_fmap_a_b_fmap_fun$ A_b_fmap_set$) A_b_fmap_set$)
(declare-fun fun_app$ (A_b_prod_list_a_b_fmap_fun$ A_b_prod_list$) A_b_fmap$)
(declare-fun fun_app$a (A_b_prod_list_a_b_prod_list_fun$ A_b_prod_list$) A_b_prod_list$)
(declare-fun fun_app$b (A_b_fmap_a_b_prod_list_fun$ A_b_fmap$) A_b_prod_list$)
(declare-fun fun_app$c (A_b_fmap_a_b_fmap_fun$ A_b_fmap$) A_b_fmap$)
(declare-fun fmap_of_list$ () A_b_prod_list_a_b_fmap_fun$)
(assert (! (not (= (image$ fmap_of_list$ top$) top$a)) :named a0))
(assert (! (forall ((?v0 A_b_fmap$)) (exists ((?v1 A_b_prod_list$)) (= (fun_app$ fmap_of_list$ ?v1) ?v0))) :named a1))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_fun$)) (= (= (image$a ?v0 top$) top$) (forall ((?v1 A_b_prod_list$)) (exists ((?v2 A_b_prod_list$)) (= ?v1 (fun_app$a ?v0 ?v2)))))) :named a2))
(assert (! (forall ((?v0 A_b_prod_list_a_b_fmap_fun$)) (= (= (image$ ?v0 top$) top$a) (forall ((?v1 A_b_fmap$)) (exists ((?v2 A_b_prod_list$)) (= ?v1 (fun_app$ ?v0 ?v2)))))) :named a3))
(assert (! (forall ((?v0 A_b_fmap_a_b_prod_list_fun$)) (= (= (image$b ?v0 top$a) top$) (forall ((?v1 A_b_prod_list$)) (exists ((?v2 A_b_fmap$)) (= ?v1 (fun_app$b ?v0 ?v2)))))) :named a4))
(assert (! (forall ((?v0 A_b_fmap_a_b_fmap_fun$)) (= (= (image$c ?v0 top$a) top$a) (forall ((?v1 A_b_fmap$)) (exists ((?v2 A_b_fmap$)) (= ?v1 (fun_app$c ?v0 ?v2)))))) :named a5))
(check-sat)
;;;;;;(get-proof)
