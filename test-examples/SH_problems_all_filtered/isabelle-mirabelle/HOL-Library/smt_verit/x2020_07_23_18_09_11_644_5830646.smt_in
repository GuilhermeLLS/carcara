; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_option$ 0)
(declare-sort A_option_set$ 0)
(declare-sort A_a_option_fun$ 0)
(declare-sort A_option_a_fun$ 0)
(declare-sort A_option_option$ 0)
(declare-sort A_option_set_set$ 0)
(declare-sort A_a_option_set_fun$ 0)
(declare-sort A_option_set_a_fun$ 0)
(declare-sort A_option_option_set$ 0)
(declare-sort A_a_option_option_fun$ 0)
(declare-sort A_option_a_option_fun$ 0)
(declare-sort A_option_option_a_fun$ 0)
(declare-sort A_option_option_option$ 0)
(declare-sort A_option_set_a_option_fun$ 0)
(declare-sort A_option_option_option_set$ 0)
(declare-sort A_option_option_a_option_fun$ 0)
(declare-sort A_option_option_option_option$ 0)
(declare-sort A_option_option_option_option_set$ 0)
(declare-fun a$ () A_option_set_set$)
(declare-fun f$ (A_set$) A$)
(declare-fun uu$ () A_option_set_a_option_fun$)
(declare-fun bot$ () A_option_set$)
(declare-fun inf$ () A_option_set_a_option_fun$)
(declare-fun the$ () A_option_a_fun$)
(declare-fun inf$a (A_option_option_option_option_set$) A_option_option_option_option$)
(declare-fun inf$b (A_option_option_option_set$) A_option_option_option$)
(declare-fun inf$c (A_option_option_set$) A_option_option$)
(declare-fun inf$d (A_set$) A$)
(declare-fun none$ () A_option$)
(declare-fun some$ () A_a_option_fun$)
(declare-fun the$a (A_option_option_option$) A_option_option$)
(declare-fun the$b () A_option_option_a_option_fun$)
(declare-fun image$ (A_option_a_fun$ A_option_set$) A_set$)
(declare-fun minus$ (A_option_set$ A_option_set$) A_option_set$)
(declare-fun none$a () A_option_option_option$)
(declare-fun none$b () A_option_option$)
(declare-fun none$c () A_option_option_option_option$)
(declare-fun some$a (A_option_option$) A_option_option_option$)
(declare-fun some$b (A_option$) A_option_option$)
(declare-fun some$c (A_option_option_option$) A_option_option_option_option$)
(declare-fun these$ (A_option_option_option_option_set$) A_option_option_option_set$)
(declare-fun image$a (A_option_set_a_option_fun$ A_option_set_set$) A_option_set$)
(declare-fun image$b (A_a_fun$ A_set$) A_set$)
(declare-fun image$c (A_a_option_fun$ A_set$) A_option_set$)
(declare-fun image$d (A_option_set_a_fun$ A_option_set_set$) A_set$)
(declare-fun image$e (A_option_option_a_fun$ A_option_option_set$) A_set$)
(declare-fun image$f (A_option_a_option_fun$ A_option_set$) A_option_set$)
(declare-fun image$g (A_a_option_set_fun$ A_set$) A_option_set_set$)
(declare-fun image$h (A_a_option_option_fun$ A_set$) A_option_option_set$)
(declare-fun image$i (A_option_option_a_option_fun$ A_option_option_set$) A_option_set$)
(declare-fun insert$ (A_option$ A_option_set$) A_option_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun these$a (A_option_option_option_set$) A_option_option_set$)
(declare-fun these$b (A_option_option_set$) A_option_set$)
(declare-fun these$c (A_option_set$) A_set$)
(declare-fun fun_app$ (A_option_set_a_option_fun$ A_option_set$) A_option$)
(declare-fun member$a (A_option$ A_option_set$) Bool)
(declare-fun member$b (A_option_set$ A_option_set_set$) Bool)
(declare-fun member$c (A_option_option$ A_option_option_set$) Bool)
(declare-fun member$d (A_option_option_option_option$ A_option_option_option_option_set$) Bool)
(declare-fun member$e (A_option_option_option$ A_option_option_option_set$) Bool)
(declare-fun fun_app$a (A_a_option_fun$ A$) A_option$)
(declare-fun fun_app$b (A_option_option_a_option_fun$ A_option_option$) A_option$)
(declare-fun fun_app$c (A_option_a_fun$ A_option$) A$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (A_option_set_a_fun$ A_option_set$) A$)
(declare-fun fun_app$f (A_option_option_a_fun$ A_option_option$) A$)
(declare-fun fun_app$g (A_option_a_option_fun$ A_option$) A_option$)
(declare-fun fun_app$h (A_a_option_set_fun$ A$) A_option_set$)
(declare-fun fun_app$i (A_a_option_option_fun$ A$) A_option_option$)
(assert (! (forall ((?v0 A_option_set$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a some$ (f$ (image$ the$ (minus$ ?v0 (insert$ none$ bot$)))))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (exists ((?v0 A$)) (= (fun_app$ inf$ (image$a uu$ a$)) (fun_app$a some$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_option_option_option$)) (=> (not (= ?v0 none$a)) (= (some$a (the$a ?v0)) ?v0))) :named a2))
(assert (! (forall ((?v0 A_option_option$)) (=> (not (= ?v0 none$b)) (= (some$b (fun_app$b the$b ?v0)) ?v0))) :named a3))
(assert (! (forall ((?v0 A_option$)) (=> (not (= ?v0 none$)) (= (fun_app$a some$ (fun_app$c the$ ?v0)) ?v0))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_option_a_fun$) (?v2 A_option_set$)) (=> (and (member$ ?v0 (image$ ?v1 ?v2)) (forall ((?v3 A_option$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v3)) (member$a ?v3 ?v2)) false))) false)) :named a5))
(assert (! (forall ((?v0 A_option$) (?v1 A_option_set_a_option_fun$) (?v2 A_option_set_set$)) (=> (and (member$a ?v0 (image$a ?v1 ?v2)) (forall ((?v3 A_option_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v3)) (member$b ?v3 ?v2)) false))) false)) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A_set$)) (=> (and (member$ ?v0 (image$b ?v1 ?v2)) (forall ((?v3 A$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v3)) (member$ ?v3 ?v2)) false))) false)) :named a7))
(assert (! (forall ((?v0 A_option$) (?v1 A_a_option_fun$) (?v2 A_set$)) (=> (and (member$a ?v0 (image$c ?v1 ?v2)) (forall ((?v3 A$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v3)) (member$ ?v3 ?v2)) false))) false)) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_option_set_a_fun$) (?v2 A_option_set_set$)) (=> (and (member$ ?v0 (image$d ?v1 ?v2)) (forall ((?v3 A_option_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v3)) (member$b ?v3 ?v2)) false))) false)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_option_option_a_fun$) (?v2 A_option_option_set$)) (=> (and (member$ ?v0 (image$e ?v1 ?v2)) (forall ((?v3 A_option_option$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v3)) (member$c ?v3 ?v2)) false))) false)) :named a10))
(assert (! (forall ((?v0 A_option$) (?v1 A_option_a_option_fun$) (?v2 A_option_set$)) (=> (and (member$a ?v0 (image$f ?v1 ?v2)) (forall ((?v3 A_option$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v3)) (member$a ?v3 ?v2)) false))) false)) :named a11))
(assert (! (forall ((?v0 A_option_set$) (?v1 A_a_option_set_fun$) (?v2 A_set$)) (=> (and (member$b ?v0 (image$g ?v1 ?v2)) (forall ((?v3 A$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v3)) (member$ ?v3 ?v2)) false))) false)) :named a12))
(assert (! (forall ((?v0 A_option_option$) (?v1 A_a_option_option_fun$) (?v2 A_set$)) (=> (and (member$c ?v0 (image$h ?v1 ?v2)) (forall ((?v3 A$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v3)) (member$ ?v3 ?v2)) false))) false)) :named a13))
(assert (! (forall ((?v0 A_option$) (?v1 A_option_option_a_option_fun$) (?v2 A_option_option_set$)) (=> (and (member$a ?v0 (image$i ?v1 ?v2)) (forall ((?v3 A_option_option$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v3)) (member$c ?v3 ?v2)) false))) false)) :named a14))
(assert (! (forall ((?v0 A_option_option_option_option_set$)) (! (= (inf$a ?v0) (ite (member$d none$c ?v0) none$c (some$c (inf$b (these$ ?v0))))) :pattern ((inf$a ?v0)))) :named a15))
(assert (! (forall ((?v0 A_option_option_option_set$)) (! (= (inf$b ?v0) (ite (member$e none$a ?v0) none$a (some$a (inf$c (these$a ?v0))))) :pattern ((inf$b ?v0)))) :named a16))
(assert (! (forall ((?v0 A_option_option_set$)) (! (= (inf$c ?v0) (ite (member$c none$b ?v0) none$b (some$b (fun_app$ inf$ (these$b ?v0))))) :pattern ((inf$c ?v0)))) :named a17))
(assert (! (forall ((?v0 A_option_set$)) (! (= (fun_app$ inf$ ?v0) (ite (member$a none$ ?v0) none$ (fun_app$a some$ (inf$d (these$c ?v0))))) :pattern ((fun_app$ inf$ ?v0)))) :named a18))
(assert (! (forall ((?v0 A_option_option$)) (not (= (some$a ?v0) none$a))) :named a19))
(assert (! (forall ((?v0 A_option$)) (not (= (some$b ?v0) none$b))) :named a20))
(assert (! (forall ((?v0 A$)) (not (= (fun_app$a some$ ?v0) none$))) :named a21))
(check-sat)
;;;;;;(get-proof)
