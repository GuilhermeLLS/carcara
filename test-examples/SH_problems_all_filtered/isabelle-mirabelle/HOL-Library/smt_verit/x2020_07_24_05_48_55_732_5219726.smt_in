; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun f$ (A_b_prod$) A_b_prod$)
(declare-fun x$ () A$)
(declare-fun y$ () B$)
(declare-fun uu$ (A$) B_b_fun$)
(declare-fun fst$ (A_b_prod$) A$)
(declare-fun gfp$ (B_b_fun$) B$)
(declare-fun snd$ (A_b_prod$) B$)
(declare-fun uua$ () A_a_fun$)
(declare-fun gfp$a (A_a_fun$) A$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun less_eq$ (B$ B$) Bool)
(declare-fun fun_app$a (B_b_fun$ B$) B$)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uua$ ?v0) (fst$ (f$ (pair$ ?v0 (gfp$ (uu$ ?v0)))))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (snd$ (f$ (pair$ ?v0 ?v1)))) :pattern ((fun_app$a (uu$ ?v0) ?v1)))) :named a1))
(assert (! (not (less_eq$ y$ (snd$ (f$ (pair$ (gfp$a uua$) y$))))) :named a2))
(assert (! (= (snd$ (f$ (pair$ x$ y$))) y$) :named a3))
(assert (! (less_eq$ (snd$ (f$ (pair$ x$ y$))) (snd$ (f$ (pair$ (gfp$a uua$) y$)))) :named a4))
(check-sat)
;;;;;;(get-proof)
