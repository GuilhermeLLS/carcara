; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=3
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort B_set$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-fun a$ (A$) B_set$)
(declare-fun f$ (A$) B_c_fun$)
(declare-fun h$ (A$) B_c_fun$)
(declare-fun abs$ (C$) C$)
(declare-fun sum$ (B_c_fun$ B_set$) C$)
(declare-fun less$ (C$ C$) Bool)
(declare-fun plus$ (C$ C$) C$)
(declare-fun zero$ () C$)
(declare-fun times$ (C$ C$) C$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun uminus$ (C$) C$)
(declare-fun collect$ (B_bool_fun$) B_set$)
(declare-fun fun_app$ (B_c_fun$ B$) C$)
(declare-fun less_eq$ (C$ C$) Bool)
(declare-fun fun_app$a (B_bool_fun$ B$) Bool)
(assert (! (not (exists ((?v0 C$)) (forall ((?v1 A$) (?v2 B$)) (=> (member$ ?v2 (a$ ?v1)) (less_eq$ (abs$ (fun_app$ (f$ ?v1) ?v2)) (times$ ?v0 (fun_app$ (h$ ?v1) ?v2))))))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 B$)) (less_eq$ zero$ (fun_app$ (h$ ?v0) ?v1))) :named a1))
(assert (! (exists ((?v0 C$)) (forall ((?v1 A$) (?v2 B$)) (less_eq$ (abs$ (fun_app$ (f$ ?v1) ?v2)) (times$ ?v0 (fun_app$ (h$ ?v1) ?v2))))) :named a2))
(assert (! (forall ((?v0 C$)) (less_eq$ ?v0 (abs$ ?v0))) :named a3))
(assert (! (forall ((?v0 C$) (?v1 C$)) (=> (less_eq$ zero$ ?v0) (= (times$ (abs$ ?v1) ?v0) (abs$ (times$ ?v1 ?v0))))) :named a4))
(assert (! (forall ((?v0 C$)) (less_eq$ zero$ (abs$ ?v0))) :named a5))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (less$ (abs$ ?v0) ?v1) (and (less$ ?v0 ?v1) (less$ (uminus$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 C$) (?v1 C$) (?v2 C$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a7))
(assert (! (forall ((?v0 B_set$) (?v1 B_c_fun$)) (=> (forall ((?v2 B$)) (=> (member$ ?v2 ?v0) (less_eq$ zero$ (fun_app$ ?v1 ?v2)))) (less_eq$ zero$ (sum$ ?v1 ?v0)))) :named a8))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (not (less_eq$ ?v0 ?v1)) (less$ ?v1 ?v0))) :named a9))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (less_eq$ zero$ (times$ ?v0 ?v1)) (or (and (less_eq$ zero$ ?v0) (less_eq$ zero$ ?v1)) (and (less_eq$ ?v0 zero$) (less_eq$ ?v1 zero$))))) :named a10))
(assert (! (forall ((?v0 C$)) (=> (less_eq$ zero$ ?v0) (= (abs$ ?v0) ?v0))) :named a11))
(assert (! (forall ((?v0 C$) (?v1 C$)) (=> (less_eq$ (abs$ ?v0) ?v1) (less_eq$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 C$) (?v1 C$) (?v2 C$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ zero$ ?v2)) (less_eq$ (times$ ?v0 ?v2) (times$ ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 C$)) (not (less$ (abs$ ?v0) zero$))) :named a14))
(assert (! (forall ((?v0 B_set$) (?v1 B_c_fun$) (?v2 B_c_fun$)) (=> (forall ((?v3 B$)) (=> (member$ ?v3 ?v0) (less_eq$ (fun_app$ ?v1 ?v3) (fun_app$ ?v2 ?v3)))) (less_eq$ (sum$ ?v1 ?v0) (sum$ ?v2 ?v0)))) :named a15))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (less_eq$ (uminus$ ?v0) (uminus$ ?v1)) (less_eq$ ?v1 ?v0))) :named a16))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (times$ ?v0 (uminus$ ?v1)) (uminus$ (times$ ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (abs$ (times$ ?v0 ?v1)) (times$ (abs$ ?v0) (abs$ ?v1)))) :named a18))
(assert (! (forall ((?v0 C$) (?v1 C$) (?v2 C$)) (= (less_eq$ (times$ ?v0 ?v1) (times$ ?v0 ?v2)) (and (=> (less$ zero$ ?v0) (less_eq$ ?v1 ?v2)) (=> (less$ ?v0 zero$) (less_eq$ ?v2 ?v1))))) :named a19))
(assert (! (forall ((?v0 C$) (?v1 C$)) (less_eq$ (abs$ (plus$ ?v0 ?v1)) (plus$ (abs$ ?v0) (abs$ ?v1)))) :named a20))
(assert (! (forall ((?v0 C$)) (= (abs$ ?v0) (ite (less$ ?v0 zero$) (uminus$ ?v0) ?v0))) :named a21))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (not (less$ ?v0 ?v1)) (less_eq$ ?v1 ?v0))) :named a22))
(assert (! (forall ((?v0 B$) (?v1 B_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0))) :named a23))
(assert (! (forall ((?v0 C$) (?v1 C$)) (! (= (less_eq$ ?v0 ?v1) (or (less$ ?v0 ?v1) (= ?v0 ?v1))) :pattern ((less_eq$ ?v0 ?v1)))) :named a24))
(check-sat)
;;;;;;(get-proof)
