; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort A_list$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun xa$ () A$)
(declare-fun nil$ () A_list$)
(declare-fun thesis$ () Bool)
(declare-fun rtrancl_path$ (A_a_bool_fun_fun$ A$ A_list$ A$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (rtrancl_path$ ?v0 ?v1 nil$ ?v1)) :named a1))
(assert (! (forall ((?v0 A_list$)) (=> (rtrancl_path$ r$ xa$ ?v0 xa$) thesis$)) :named a2))
(check-sat)
;;;;;;(get-proof)
