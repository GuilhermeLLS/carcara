; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_b_fmap$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_b_prod_list_set$ 0)
(declare-fun x$ () A_b_fmap$)
(declare-fun top$ () A_b_prod_list_set$)
(declare-fun member$ (A_b_prod_list$ A_b_prod_list_set$) Bool)
(declare-fun fmap_of_list$ (A_b_prod_list$) A_b_fmap$)
(assert (! (not (exists ((?v0 A_b_prod_list$)) (and (member$ ?v0 top$) (= x$ (fmap_of_list$ ?v0))))) :named a0))
(assert (! (forall ((?v0 A_b_fmap$)) (exists ((?v1 A_b_prod_list$)) (= (fmap_of_list$ ?v1) ?v0))) :named a1))
(assert (! (forall ((?v0 A_b_prod_list$)) (= (member$ ?v0 top$) true)) :named a2))
(check-sat)
;;;;;;(get-proof)
