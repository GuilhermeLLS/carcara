; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort A_list$ 0)
(declare-sort A_unit_rbt$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-fun hd$ (A_list$) A$)
(declare-fun ta$ () A_unit_rbt$)
(declare-fun tl$ (A_list$) A_list$)
(declare-fun bot$ () A$)
(declare-fun max$ () A_a_a_fun_fun$)
(declare-fun fold$ (A_a_a_fun_fun$ A_list$ A$) A$)
(declare-fun keys$ (A_unit_rbt$) A_list$)
(declare-fun empty$ () A_unit_rbt$)
(declare-fun is_rbt$ (A_unit_rbt$) Bool)
(assert (! (not (= (fold$ max$ (keys$ ta$) bot$) (fold$ max$ (tl$ (keys$ ta$)) (hd$ (keys$ ta$))))) :named a0))
(assert (! (is_rbt$ ta$) :named a1))
(assert (! (not (= ta$ empty$)) :named a2))
(assert (! (= ta$ empty$) :named a3))
(check-sat)
;;;;;;(get-proof)
