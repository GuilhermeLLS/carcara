; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort Unit$ 0)
(declare-sort Color$ 0)
(declare-sort A_unit_rbt$ 0)
(declare-fun p$ (A_unit_rbt$) Bool)
(declare-fun empty$ () A_unit_rbt$)
(declare-fun branch$ (Color$ A_unit_rbt$ A$ Unit$ A_unit_rbt$) A_unit_rbt$)
(assert (! (not (p$ empty$)) :named a0))
(assert (! (p$ empty$) :named a1))
(assert (! (forall ((?v0 A_unit_rbt$) (?v1 A_unit_rbt$) (?v2 Color$) (?v3 A$) (?v4 Unit$)) (=> (and (p$ ?v0) (and (p$ ?v1) (not (= ?v0 empty$)))) (p$ (branch$ ?v2 ?v0 ?v3 ?v4 ?v1)))) :named a2))
(assert (! (forall ((?v0 A_unit_rbt$) (?v1 A_unit_rbt$) (?v2 Color$) (?v3 A$) (?v4 Unit$)) (=> (and (p$ ?v0) (and (p$ ?v1) (= ?v0 empty$))) (p$ (branch$ ?v2 ?v0 ?v3 ?v4 ?v1)))) :named a3))
(check-sat)
;;;;;;(get-proof)
