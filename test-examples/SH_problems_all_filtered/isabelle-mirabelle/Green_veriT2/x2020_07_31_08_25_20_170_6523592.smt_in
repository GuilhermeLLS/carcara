; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort N$ 0)
(declare-sort A_n_vec$ 0)
(declare-sort N_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_n_vec_a_fun$ 0)
(declare-sort N_a_bool_fun_fun$ 0)
(declare-sort A_n_vec_a_n_vec_fun$ 0)
(declare-sort N_a_n_vec_a_fun_fun$ 0)
(declare-fun f$ () N_a_n_vec_a_fun_fun$)
(declare-fun p$ (N$ A_n_vec_a_fun$) Bool)
(declare-fun uu$ (A_n_vec$) N_a_fun$)
(declare-fun uua$ () N_a_n_vec_a_fun_fun$)
(declare-fun uub$ (A_n_vec_a_n_vec_fun$) N_a_n_vec_a_fun_fun$)
(declare-fun fun_app$ (N_a_fun$ N$) A$)
(declare-fun vec_nth$ (A_n_vec$) N_a_fun$)
(declare-fun fun_app$a (A_n_vec_a_fun$ A_n_vec$) A$)
(declare-fun fun_app$b (N_a_n_vec_a_fun_fun$ N$) A_n_vec_a_fun$)
(declare-fun fun_app$c (A_n_vec_a_n_vec_fun$ A_n_vec$) A_n_vec$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (N_a_bool_fun_fun$ N$) A_bool_fun$)
(declare-fun vec_lambda$ (N_a_fun$) A_n_vec$)
(assert (! (forall ((?v0 A_n_vec$) (?v1 N$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (fun_app$a (fun_app$b f$ ?v1) ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 N$) (?v1 A_n_vec$)) (! (= (fun_app$a (fun_app$b uua$ ?v0) ?v1) (fun_app$ (vec_nth$ (vec_lambda$ (uu$ ?v1))) ?v0)) :pattern ((fun_app$a (fun_app$b uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_n_vec_a_n_vec_fun$) (?v1 N$) (?v2 A_n_vec$)) (! (= (fun_app$a (fun_app$b (uub$ ?v0) ?v1) ?v2) (fun_app$ (vec_nth$ (fun_app$c ?v0 ?v2)) ?v1)) :pattern ((fun_app$a (fun_app$b (uub$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (not (forall ((?v0 N$)) (p$ ?v0 (fun_app$b uua$ ?v0)))) :named a3))
(assert (! (forall ((?v0 N$)) (exists ((?v1 A_n_vec_a_fun$)) (p$ ?v0 ?v1))) :named a4))
(assert (! (=> (forall ((?v0 N_a_n_vec_a_fun_fun$)) (=> (forall ((?v1 N$)) (p$ ?v1 (fun_app$b ?v0 ?v1))) false)) false) :named a5))
(assert (! (forall ((?v0 N$)) (p$ ?v0 (fun_app$b f$ ?v0))) :named a6))
(assert (! (forall ((?v0 N$)) (p$ ?v0 (fun_app$b uua$ ?v0))) :named a7))
(assert (! (=> (exists ((?v0 A_n_vec_a_n_vec_fun$)) (forall ((?v1 N$)) (p$ ?v1 (fun_app$b (uub$ ?v0) ?v1)))) (forall ((?v0 N$)) (exists ((?v1 A_n_vec_a_fun$)) (p$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A_n_vec$)) (= (vec_lambda$ (vec_nth$ ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 N_a_fun$) (?v1 N$)) (= (fun_app$ (vec_nth$ (vec_lambda$ ?v0)) ?v1) (fun_app$ ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_n_vec$) (?v1 N_a_fun$)) (= (forall ((?v2 N$)) (= (fun_app$ (vec_nth$ ?v0) ?v2) (fun_app$ ?v1 ?v2))) (= (vec_lambda$ ?v1) ?v0))) :named a11))
(assert (! (forall ((?v0 A_n_vec$)) (= (vec_lambda$ (vec_nth$ ?v0)) ?v0)) :named a12))
(assert (! (forall ((?v0 N_a_fun$) (?v1 N_a_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) (= (vec_lambda$ ?v0) (vec_lambda$ ?v1)))) :named a13))
(assert (! (forall ((?v0 N_a_bool_fun_fun$)) (= (forall ((?v1 N$)) (exists ((?v2 A$)) (fun_app$d (fun_app$e ?v0 ?v1) ?v2))) (exists ((?v1 A_n_vec$)) (forall ((?v2 N$)) (fun_app$d (fun_app$e ?v0 ?v2) (fun_app$ (vec_nth$ ?v1) ?v2)))))) :named a14))
(check-sat)
;;;;(get-proof)
