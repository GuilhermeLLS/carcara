; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort Real_set$ 0)
(declare-sort Real_real_fun$ 0)
(declare-fun c$ () Real)
(declare-fun d$ () Real)
(declare-fun f$ (A$) A$)
(declare-fun g$ (Real) A$)
(declare-fun i$ () A$)
(declare-fun uu$ () Real_real_fun$)
(declare-fun uua$ () Real_real_fun$)
(declare-fun plus$ (A$ A$) A$)
(declare-fun gamma$ (Real) A$)
(declare-fun image$ (Real_real_fun$ Real_set$) Real_set$)
(declare-fun inner$ (A$ A$) Real)
(declare-fun scaleR$ (Real A$) A$)
(declare-fun fun_app$ (Real_real_fun$ Real) Real)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(declare-fun continuous_on$ (Real_set$ Real_real_fun$) Bool)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (inner$ (f$ (plus$ (scaleR$ ?v0 i$) (g$ ?v0))) i$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uua$ ?v0) (inner$ (gamma$ ?v0) i$)) :pattern ((fun_app$ uua$ ?v0)))) :named a1))
(assert (! (not (continuous_on$ (atLeastAtMost$ c$ d$) uu$)) :named a2))
(assert (! (<= c$ d$) :named a3))
(assert (! (= (image$ uua$ (atLeastAtMost$ 0.0 1.0)) (atLeastAtMost$ c$ d$)) :named a4))
(assert (! (continuous_on$ (image$ uua$ (atLeastAtMost$ 0.0 1.0)) uu$) :named a5))
(check-sat)
;;;;(get-proof)
