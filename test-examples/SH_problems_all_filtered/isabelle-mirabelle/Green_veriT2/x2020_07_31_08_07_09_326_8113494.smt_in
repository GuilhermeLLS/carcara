; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort Real_set$ 0)
(declare-sort Real_a_fun$ 0)
(declare-sort Real_filter$ 0)
(declare-fun a$ () Real)
(declare-fun b$ () Real)
(declare-fun f$ () Real_a_fun$)
(declare-fun s$ () Real_set$)
(declare-fun x$ () Real)
(declare-fun minus$ (Real_set$ Real_set$) Real_set$)
(declare-fun finite$ (Real_set$) Bool)
(declare-fun member$ (Real Real_set$) Bool)
(declare-fun at_within$ (Real Real_set$) Real_filter$)
(declare-fun continuous$ (Real_filter$ Real_a_fun$) Bool)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(declare-fun finite_product_sigma_finite_axioms$ (Real_set$) Bool)
(assert (! (not (finite$ s$)) :named a0))
(assert (! (finite$ s$) :named a1))
(assert (! (member$ x$ (minus$ (atLeastAtMost$ a$ b$) s$)) :named a2))
(assert (! (continuous$ (at_within$ x$ (minus$ (atLeastAtMost$ a$ b$) s$)) f$) :named a3))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$)) (=> (finite$ ?v0) (finite$ (minus$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$)) (=> (finite$ ?v0) (= (finite$ (minus$ ?v1 ?v0)) (finite$ ?v1)))) :named a5))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_set$)) (=> (and (finite$ ?v0) (not (finite$ ?v1))) (not (finite$ (minus$ ?v1 ?v0))))) :named a6))
(assert (! (forall ((?v0 Real_set$)) (! (= (finite_product_sigma_finite_axioms$ ?v0) (finite$ ?v0)) :pattern ((finite_product_sigma_finite_axioms$ ?v0)))) :named a7))
(assert (! (forall ((?v0 Real_set$)) (=> (finite$ ?v0) (finite_product_sigma_finite_axioms$ ?v0))) :named a8))
(check-sat)
;;;;(get-proof)
