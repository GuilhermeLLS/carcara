; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_set$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_real_fun$ 0)
(declare-sort B_real_fun$ 0)
(declare-sort B_a_real_fun_fun$ 0)
(declare-fun f$ () B_a_real_fun_fun$)
(declare-fun p$ (B$ A_real_fun$) Bool)
(declare-fun uu$ (A$) B_b_fun$)
(declare-fun sum$ (B_b_fun$ B_set$) B$)
(declare-fun uua$ () B_a_real_fun_fun$)
(declare-fun uub$ (A_b_fun$) B_a_real_fun_fun$)
(declare-fun uuc$ (B$ B_real_fun$ B_real_fun$) B_b_fun$)
(declare-fun uud$ (B$ B_b_fun$) B_b_fun$)
(declare-fun uue$ (B_real_fun$) B_b_fun$)
(declare-fun uuf$ (B$) B_b_fun$)
(declare-fun basis$ () B_set$)
(declare-fun inner$ (B$) B_real_fun$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun scaleR$ (Real) B_b_fun$)
(declare-fun fun_app$ (B_b_fun$ B$) B$)
(declare-fun fun_app$a (A_real_fun$ A$) Real)
(declare-fun fun_app$b (B_a_real_fun_fun$ B$) A_real_fun$)
(declare-fun fun_app$c (B_real_fun$ B$) Real)
(declare-fun fun_app$d (A_b_fun$ A$) B$)
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (fun_app$ (scaleR$ (fun_app$a (fun_app$b f$ ?v1) ?v0)) ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$a (fun_app$b uua$ ?v0) ?v1) (fun_app$c (inner$ (sum$ (uu$ ?v1) basis$)) ?v0)) :pattern ((fun_app$a (fun_app$b uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$ (uuf$ ?v0) ?v1) (fun_app$ (scaleR$ (fun_app$c (inner$ ?v0) ?v1)) ?v1)) :pattern ((fun_app$ (uuf$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B_real_fun$) (?v1 B$)) (! (= (fun_app$ (uue$ ?v0) ?v1) (fun_app$ (scaleR$ (fun_app$c ?v0 ?v1)) ?v1)) :pattern ((fun_app$ (uue$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$ (uud$ ?v0 ?v1) ?v2) (fun_app$ (scaleR$ (fun_app$c (inner$ ?v2) ?v0)) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (uud$ ?v0 ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B$) (?v2 A$)) (! (= (fun_app$a (fun_app$b (uub$ ?v0) ?v1) ?v2) (fun_app$c (inner$ (fun_app$d ?v0 ?v2)) ?v1)) :pattern ((fun_app$a (fun_app$b (uub$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$) (?v2 B_real_fun$) (?v3 B$)) (! (= (fun_app$ (uuc$ ?v0 ?v1 ?v2) ?v3) (ite (= ?v3 ?v0) (fun_app$ (scaleR$ (fun_app$c ?v1 ?v0)) ?v0) (fun_app$ (scaleR$ (fun_app$c ?v2 ?v3)) ?v3))) :pattern ((fun_app$ (uuc$ ?v0 ?v1 ?v2) ?v3)))) :named a6))
(assert (! (not (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (p$ ?v0 (fun_app$b uua$ ?v0))))) :named a7))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (exists ((?v1 A_real_fun$)) (p$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (p$ ?v0 (fun_app$b f$ ?v0)))) :named a9))
(assert (! (=> (forall ((?v0 B_a_real_fun_fun$)) (=> (forall ((?v1 B$)) (=> (member$ ?v1 basis$) (p$ ?v1 (fun_app$b ?v0 ?v1)))) false)) false) :named a10))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (p$ ?v0 (fun_app$b uua$ ?v0)))) :named a11))
(assert (! (=> (exists ((?v0 A_b_fun$)) (forall ((?v1 B$)) (=> (member$ ?v1 basis$) (p$ ?v1 (fun_app$b (uub$ ?v0) ?v1))))) (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (exists ((?v1 A_real_fun$)) (p$ ?v0 ?v1))))) :named a12))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (p$ ?v0 (fun_app$b uua$ ?v0)))) :named a13))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_real_fun$) (?v3 B_real_fun$)) (=> (and (member$ ?v0 basis$) (member$ ?v1 basis$)) (= (fun_app$c (inner$ (sum$ (uuc$ ?v0 ?v2 ?v3) basis$)) ?v1) (ite (= ?v1 ?v0) (fun_app$c ?v2 ?v1) (fun_app$c ?v3 ?v1))))) :named a14))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$)) (=> (member$ ?v0 basis$) (= (sum$ (uud$ ?v0 ?v1) basis$) (fun_app$ ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$)) (=> (member$ ?v0 basis$) (= (fun_app$c (inner$ (sum$ (uue$ ?v1) basis$)) ?v0) (fun_app$c ?v1 ?v0)))) :named a16))
(assert (! (forall ((?v0 B$)) (= (sum$ (uuf$ ?v0) basis$) ?v0)) :named a17))
(assert (! (forall ((?v0 B_real_fun$) (?v1 B$)) (= (= (sum$ (uue$ ?v0) basis$) ?v1) (forall ((?v2 B$)) (=> (member$ ?v2 basis$) (= (fun_app$c ?v0 ?v2) (fun_app$c (inner$ ?v1) ?v2)))))) :named a18))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$)) (= (= ?v0 (sum$ (uue$ ?v1) basis$)) (forall ((?v2 B$)) (=> (member$ ?v2 basis$) (= (fun_app$c ?v1 ?v2) (fun_app$c (inner$ ?v0) ?v2)))))) :named a19))
(check-sat)
;;;;(get-proof)
