; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_set$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort Real_set$ 0)
(declare-sort A_real_fun$ 0)
(declare-sort B_real_fun$ 0)
(declare-sort Real_b_fun$ 0)
(declare-sort Real_real_fun$ 0)
(declare-sort B_a_real_fun_fun$ 0)
(declare-fun f$ () B_a_real_fun_fun$)
(declare-fun p$ (B$ A_real_fun$) Bool)
(declare-fun uu$ (A$) B_b_fun$)
(declare-fun sum$ (B_b_fun$ B_set$) B$)
(declare-fun uua$ () B_a_real_fun_fun$)
(declare-fun uub$ (A_b_fun$) B_a_real_fun_fun$)
(declare-fun uuc$ (Real Real_real_fun$ Real_real_fun$) Real_real_fun$)
(declare-fun uud$ (B$ B_real_fun$ B_real_fun$) B_b_fun$)
(declare-fun uue$ (Real Real_b_fun$) Real_b_fun$)
(declare-fun uuf$ (Real Real_real_fun$) Real_real_fun$)
(declare-fun uug$ (B$ B_real_fun$) B_real_fun$)
(declare-fun uuh$ (B$ B_b_fun$) B_b_fun$)
(declare-fun uui$ (Real_real_fun$) Real_real_fun$)
(declare-fun uuj$ (B_real_fun$) B_b_fun$)
(declare-fun uuk$ (Real) Real_real_fun$)
(declare-fun uul$ (B$) B_b_fun$)
(declare-fun uum$ (B_real_fun$ Real) B_real_fun$)
(declare-fun uun$ (B_b_fun$ B$) B_real_fun$)
(declare-fun sum$a (Real_real_fun$ Real_set$) Real)
(declare-fun sum$b (Real_b_fun$ Real_set$) B$)
(declare-fun sum$c (B_real_fun$ B_set$) Real)
(declare-fun basis$ () B_set$)
(declare-fun inner$ (B$) B_real_fun$)
(declare-fun basis$a () Real_set$)
(declare-fun inner$a (Real) Real_real_fun$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun scaleR$ (Real) B_b_fun$)
(declare-fun fun_app$ (B_b_fun$ B$) B$)
(declare-fun member$a (Real Real_set$) Bool)
(declare-fun scaleR$a (Real) Real_real_fun$)
(declare-fun fun_app$a (A_real_fun$ A$) Real)
(declare-fun fun_app$b (B_a_real_fun_fun$ B$) A_real_fun$)
(declare-fun fun_app$c (B_real_fun$ B$) Real)
(declare-fun fun_app$d (Real_real_fun$ Real) Real)
(declare-fun fun_app$e (Real_b_fun$ Real) B$)
(declare-fun fun_app$f (A_b_fun$ A$) B$)
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (fun_app$ (scaleR$ (fun_app$a (fun_app$b f$ ?v1) ?v0)) ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$a (fun_app$b uua$ ?v0) ?v1) (fun_app$c (inner$ (sum$ (uu$ ?v1) basis$)) ?v0)) :pattern ((fun_app$a (fun_app$b uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Real) (?v1 Real)) (! (= (fun_app$d (uuk$ ?v0) ?v1) (fun_app$d (scaleR$a (fun_app$d (inner$a ?v0) ?v1)) ?v1)) :pattern ((fun_app$d (uuk$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$ (uul$ ?v0) ?v1) (fun_app$ (scaleR$ (fun_app$c (inner$ ?v0) ?v1)) ?v1)) :pattern ((fun_app$ (uul$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real)) (! (= (fun_app$d (uui$ ?v0) ?v1) (fun_app$d (scaleR$a (fun_app$d ?v0 ?v1)) ?v1)) :pattern ((fun_app$d (uui$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 B_real_fun$) (?v1 B$)) (! (= (fun_app$ (uuj$ ?v0) ?v1) (fun_app$ (scaleR$ (fun_app$c ?v0 ?v1)) ?v1)) :pattern ((fun_app$ (uuj$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 Real) (?v1 Real_real_fun$) (?v2 Real)) (! (= (fun_app$d (uuf$ ?v0 ?v1) ?v2) (fun_app$d (scaleR$a (fun_app$d (inner$a ?v2) ?v0)) (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (uuf$ ?v0 ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 Real) (?v1 Real_b_fun$) (?v2 Real)) (! (= (fun_app$e (uue$ ?v0 ?v1) ?v2) (fun_app$ (scaleR$ (fun_app$d (inner$a ?v2) ?v0)) (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (uue$ ?v0 ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$) (?v2 B$)) (! (= (fun_app$c (uug$ ?v0 ?v1) ?v2) (fun_app$d (scaleR$a (fun_app$c (inner$ ?v2) ?v0)) (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (uug$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$ (uuh$ ?v0 ?v1) ?v2) (fun_app$ (scaleR$ (fun_app$c (inner$ ?v2) ?v0)) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (uuh$ ?v0 ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 B_real_fun$) (?v1 Real) (?v2 B$)) (! (= (fun_app$c (uum$ ?v0 ?v1) ?v2) (fun_app$d (inner$a (fun_app$c ?v0 ?v2)) ?v1)) :pattern ((fun_app$c (uum$ ?v0 ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B$)) (! (= (fun_app$c (uun$ ?v0 ?v1) ?v2) (fun_app$c (inner$ (fun_app$ ?v0 ?v2)) ?v1)) :pattern ((fun_app$c (uun$ ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B$) (?v2 A$)) (! (= (fun_app$a (fun_app$b (uub$ ?v0) ?v1) ?v2) (fun_app$c (inner$ (fun_app$f ?v0 ?v2)) ?v1)) :pattern ((fun_app$a (fun_app$b (uub$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 Real) (?v1 Real_real_fun$) (?v2 Real_real_fun$) (?v3 Real)) (! (= (fun_app$d (uuc$ ?v0 ?v1 ?v2) ?v3) (ite (= ?v3 ?v0) (fun_app$d (scaleR$a (fun_app$d ?v1 ?v0)) ?v0) (fun_app$d (scaleR$a (fun_app$d ?v2 ?v3)) ?v3))) :pattern ((fun_app$d (uuc$ ?v0 ?v1 ?v2) ?v3)))) :named a13))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$) (?v2 B_real_fun$) (?v3 B$)) (! (= (fun_app$ (uud$ ?v0 ?v1 ?v2) ?v3) (ite (= ?v3 ?v0) (fun_app$ (scaleR$ (fun_app$c ?v1 ?v0)) ?v0) (fun_app$ (scaleR$ (fun_app$c ?v2 ?v3)) ?v3))) :pattern ((fun_app$ (uud$ ?v0 ?v1 ?v2) ?v3)))) :named a14))
(assert (! (not (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (p$ ?v0 (fun_app$b uua$ ?v0))))) :named a15))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (exists ((?v1 A_real_fun$)) (p$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (p$ ?v0 (fun_app$b f$ ?v0)))) :named a17))
(assert (! (=> (forall ((?v0 B_a_real_fun_fun$)) (=> (forall ((?v1 B$)) (=> (member$ ?v1 basis$) (p$ ?v1 (fun_app$b ?v0 ?v1)))) false)) false) :named a18))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (p$ ?v0 (fun_app$b uua$ ?v0)))) :named a19))
(assert (! (=> (exists ((?v0 A_b_fun$)) (forall ((?v1 B$)) (=> (member$ ?v1 basis$) (p$ ?v1 (fun_app$b (uub$ ?v0) ?v1))))) (forall ((?v0 B$)) (=> (member$ ?v0 basis$) (exists ((?v1 A_real_fun$)) (p$ ?v0 ?v1))))) :named a20))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Real_real_fun$) (?v3 Real_real_fun$)) (=> (and (member$a ?v0 basis$a) (member$a ?v1 basis$a)) (= (fun_app$d (inner$a (sum$a (uuc$ ?v0 ?v2 ?v3) basis$a)) ?v1) (ite (= ?v1 ?v0) (fun_app$d ?v2 ?v1) (fun_app$d ?v3 ?v1))))) :named a21))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_real_fun$) (?v3 B_real_fun$)) (=> (and (member$ ?v0 basis$) (member$ ?v1 basis$)) (= (fun_app$c (inner$ (sum$ (uud$ ?v0 ?v2 ?v3) basis$)) ?v1) (ite (= ?v1 ?v0) (fun_app$c ?v2 ?v1) (fun_app$c ?v3 ?v1))))) :named a22))
(assert (! (forall ((?v0 Real) (?v1 Real_b_fun$)) (=> (member$a ?v0 basis$a) (= (sum$b (uue$ ?v0 ?v1) basis$a) (fun_app$e ?v1 ?v0)))) :named a23))
(assert (! (forall ((?v0 Real) (?v1 Real_real_fun$)) (=> (member$a ?v0 basis$a) (= (sum$a (uuf$ ?v0 ?v1) basis$a) (fun_app$d ?v1 ?v0)))) :named a24))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$)) (=> (member$ ?v0 basis$) (= (sum$c (uug$ ?v0 ?v1) basis$) (fun_app$c ?v1 ?v0)))) :named a25))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$)) (=> (member$ ?v0 basis$) (= (sum$ (uuh$ ?v0 ?v1) basis$) (fun_app$ ?v1 ?v0)))) :named a26))
(assert (! (forall ((?v0 Real) (?v1 Real_real_fun$)) (=> (member$a ?v0 basis$a) (= (fun_app$d (inner$a (sum$a (uui$ ?v1) basis$a)) ?v0) (fun_app$d ?v1 ?v0)))) :named a27))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$)) (=> (member$ ?v0 basis$) (= (fun_app$c (inner$ (sum$ (uuj$ ?v1) basis$)) ?v0) (fun_app$c ?v1 ?v0)))) :named a28))
(assert (! (forall ((?v0 Real)) (= (sum$a (uuk$ ?v0) basis$a) ?v0)) :named a29))
(assert (! (forall ((?v0 B$)) (= (sum$ (uul$ ?v0) basis$) ?v0)) :named a30))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real)) (= (= (sum$a (uui$ ?v0) basis$a) ?v1) (forall ((?v2 Real)) (=> (member$a ?v2 basis$a) (= (fun_app$d ?v0 ?v2) (fun_app$d (inner$a ?v1) ?v2)))))) :named a31))
(assert (! (forall ((?v0 B_real_fun$) (?v1 B$)) (= (= (sum$ (uuj$ ?v0) basis$) ?v1) (forall ((?v2 B$)) (=> (member$ ?v2 basis$) (= (fun_app$c ?v0 ?v2) (fun_app$c (inner$ ?v1) ?v2)))))) :named a32))
(assert (! (forall ((?v0 Real) (?v1 Real_real_fun$)) (= (= ?v0 (sum$a (uui$ ?v1) basis$a)) (forall ((?v2 Real)) (=> (member$a ?v2 basis$a) (= (fun_app$d ?v1 ?v2) (fun_app$d (inner$a ?v0) ?v2)))))) :named a33))
(assert (! (forall ((?v0 B$) (?v1 B_real_fun$)) (= (= ?v0 (sum$ (uuj$ ?v1) basis$)) (forall ((?v2 B$)) (=> (member$ ?v2 basis$) (= (fun_app$c ?v1 ?v2) (fun_app$c (inner$ ?v0) ?v2)))))) :named a34))
(assert (! (forall ((?v0 B_real_fun$) (?v1 B_set$) (?v2 Real)) (= (fun_app$d (inner$a (sum$c ?v0 ?v1)) ?v2) (sum$c (uum$ ?v0 ?v2) ?v1))) :named a35))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_set$) (?v2 B$)) (= (fun_app$c (inner$ (sum$ ?v0 ?v1)) ?v2) (sum$c (uun$ ?v0 ?v2) ?v1))) :named a36))
(check-sat)
;;;;(get-proof)
