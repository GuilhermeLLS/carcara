; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort Real_set$ 0)
(declare-sort A_set_set$ 0)
(declare-sort Real_a_fun$ 0)
(declare-sort A_set_set_set$ 0)
(declare-sort Real_real_fun$ 0)
(declare-fun c$ () Real)
(declare-fun d$ () Real)
(declare-fun f$ (A$) A$)
(declare-fun g$ () Real_a_fun$)
(declare-fun i$ () A$)
(declare-fun f$a () Real_real_fun$)
(declare-fun uu$ () Real_real_fun$)
(declare-fun uua$ () Real_real_fun$)
(declare-fun uub$ (Real_real_fun$ Real_real_fun$) Real_real_fun$)
(declare-fun uuc$ (Real_real_fun$ Real_a_fun$) Real_a_fun$)
(declare-fun uud$ (Real_real_fun$ Real_real_fun$) Real_real_fun$)
(declare-fun uue$ (Real_a_fun$ Real_a_fun$) Real_real_fun$)
(declare-fun norm$ (A$) Real)
(declare-fun plus$ (A$ A$) A$)
(declare-fun gamma$ () Real_a_fun$)
(declare-fun image$ (Real_real_fun$ Real_set$) Real_set$)
(declare-fun inner$ (A$ A$) Real)
(declare-fun plus$a (A_set_set$ A_set_set$) A_set_set$)
(declare-fun plus$b (A_set_set_set$ A_set_set_set$) A_set_set_set$)
(declare-fun plus$c (A_set$ A_set$) A_set$)
(declare-fun inner$a (Real) Real_real_fun$)
(declare-fun member$ (A_set_set$ A_set_set_set$) Bool)
(declare-fun scaleR$ (Real A$) A$)
(declare-fun fun_app$ (Real_real_fun$ Real) Real)
(declare-fun member$a (A_set$ A_set_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun scaleR$a (Real) Real_real_fun$)
(declare-fun fun_app$a (Real_a_fun$ Real) A$)
(declare-fun atLeastAtMost$ (Real Real) Real_set$)
(declare-fun continuous_on$ (Real_set$ Real_real_fun$) Bool)
(declare-fun continuous_on$a (Real_set$ Real_a_fun$) Bool)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (inner$ (f$ (plus$ (scaleR$ ?v0 i$) (fun_app$a g$ ?v0))) i$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uua$ ?v0) (inner$ (fun_app$a gamma$ ?v0) i$)) :pattern ((fun_app$ uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_real_fun$) (?v2 Real)) (! (= (fun_app$ (uub$ ?v0 ?v1) ?v2) (fun_app$ (scaleR$a (fun_app$ ?v0 ?v2)) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (uub$ ?v0 ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_a_fun$) (?v2 Real)) (! (= (fun_app$a (uuc$ ?v0 ?v1) ?v2) (scaleR$ (fun_app$ ?v0 ?v2) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (uuc$ ?v0 ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Real_real_fun$) (?v1 Real_real_fun$) (?v2 Real)) (! (= (fun_app$ (uud$ ?v0 ?v1) ?v2) (fun_app$ (inner$a (fun_app$ ?v0 ?v2)) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (uud$ ?v0 ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 Real_a_fun$) (?v1 Real_a_fun$) (?v2 Real)) (! (= (fun_app$ (uue$ ?v0 ?v1) ?v2) (inner$ (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$ (uue$ ?v0 ?v1) ?v2)))) :named a5))
(assert (! (not (continuous_on$ (atLeastAtMost$ c$ d$) uu$)) :named a6))
(assert (! (<= c$ d$) :named a7))
(assert (! (forall ((?v0 Real)) (= (inner$ (fun_app$a g$ ?v0) i$) 0.0)) :named a8))
(assert (! (= (image$ uua$ (atLeastAtMost$ 0.0 1.0)) (atLeastAtMost$ c$ d$)) :named a9))
(assert (! (forall ((?v0 Real)) (= (fun_app$a gamma$ ?v0) (plus$ (scaleR$ (fun_app$ f$a ?v0) i$) (fun_app$a g$ (fun_app$ f$a ?v0))))) :named a10))
(assert (! (continuous_on$ (image$ uua$ (atLeastAtMost$ 0.0 1.0)) uu$) :named a11))
(assert (! (continuous_on$ (atLeastAtMost$ 0.0 1.0) uua$) :named a12))
(assert (! (= (norm$ i$) 1.0) :named a13))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_real_fun$) (?v2 Real_real_fun$)) (=> (and (continuous_on$ ?v0 ?v1) (continuous_on$ ?v0 ?v2)) (continuous_on$ ?v0 (uub$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_real_fun$) (?v2 Real_a_fun$)) (=> (and (continuous_on$ ?v0 ?v1) (continuous_on$a ?v0 ?v2)) (continuous_on$a ?v0 (uuc$ ?v1 ?v2)))) :named a15))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_real_fun$) (?v2 Real_real_fun$)) (=> (and (continuous_on$ ?v0 ?v1) (continuous_on$ ?v0 ?v2)) (continuous_on$ ?v0 (uud$ ?v1 ?v2)))) :named a16))
(assert (! (forall ((?v0 Real_set$) (?v1 Real_a_fun$) (?v2 Real_a_fun$)) (=> (and (continuous_on$a ?v0 ?v1) (continuous_on$a ?v0 ?v2)) (continuous_on$ ?v0 (uue$ ?v1 ?v2)))) :named a17))
(assert (! (<= (inner$ (fun_app$a gamma$ 0.0) i$) (inner$ (fun_app$a gamma$ 1.0) i$)) :named a18))
(assert (! (forall ((?v0 A_set_set$) (?v1 A_set_set_set$) (?v2 A_set_set$) (?v3 A_set_set_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v2 ?v3)) (member$ (plus$a ?v0 ?v2) (plus$b ?v1 ?v3)))) :named a19))
(assert (! (forall ((?v0 A_set$) (?v1 A_set_set$) (?v2 A_set$) (?v3 A_set_set$)) (=> (and (member$a ?v0 ?v1) (member$a ?v2 ?v3)) (member$a (plus$c ?v0 ?v2) (plus$a ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_set$)) (=> (and (member$b ?v0 ?v1) (member$b ?v2 ?v3)) (member$b (plus$ ?v0 ?v2) (plus$c ?v1 ?v3)))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a23))
(check-sat)
;;;;(get-proof)
