; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort B_a_prod$ 0)
(declare-sort B_b_prod$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort B_b_prod_set$ 0)
(declare-sort A_a_prod_c_fun$ 0)
(declare-sort A_b_prod_c_fun$ 0)
(declare-sort B_a_prod_c_fun$ 0)
(declare-sort B_b_prod_c_fun$ 0)
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_b_b_prod_prod$ 0)
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort A_b_prod_b_prod$ 0)
(declare-sort B_a_b_prod_prod$ 0)
(declare-sort B_b_b_prod_prod$ 0)
(declare-sort B_b_prod_a_prod$ 0)
(declare-sort B_b_prod_b_prod$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort A_b_b_prod_prod_set$ 0)
(declare-sort A_b_prod_a_prod_set$ 0)
(declare-sort A_b_prod_b_prod_set$ 0)
(declare-sort B_a_b_prod_prod_set$ 0)
(declare-sort B_b_b_prod_prod_set$ 0)
(declare-sort B_b_prod_a_prod_set$ 0)
(declare-sort B_b_prod_b_prod_set$ 0)
(declare-sort A_a_b_prod_prod_c_fun$ 0)
(declare-sort A_b_b_prod_prod_c_fun$ 0)
(declare-sort A_b_prod_a_prod_c_fun$ 0)
(declare-sort A_b_prod_b_prod_c_fun$ 0)
(declare-sort B_a_b_prod_prod_c_fun$ 0)
(declare-sort B_b_b_prod_prod_c_fun$ 0)
(declare-sort B_b_prod_a_prod_c_fun$ 0)
(declare-sort B_b_prod_b_prod_c_fun$ 0)
(declare-fun f$ () A_b_prod_c_fun$)
(declare-fun g$ () A_b_prod_c_fun$)
(declare-fun x$ () A$)
(declare-fun g1$ (A$) B$)
(declare-fun g2$ (A$) B$)
(declare-fun uu$ () B_c_fun$)
(declare-fun top$ () B_set$)
(declare-fun uua$ (C$) A_b_prod_c_fun$)
(declare-fun uub$ (C$) B_c_fun$)
(declare-fun uuc$ (B$ B$ C$) A_c_fun$)
(declare-fun uud$ (C$) B_b_prod_c_fun$)
(declare-fun uue$ (B$ B$ C$) B_c_fun$)
(declare-fun uuf$ (C$) B_a_prod_c_fun$)
(declare-fun uug$ (C$) A_c_fun$)
(declare-fun uuh$ (A$ A$ C$) B_c_fun$)
(declare-fun uui$ (C$) A_a_prod_c_fun$)
(declare-fun uuj$ (A$ A$ C$) A_c_fun$)
(declare-fun uuk$ (C$) B_b_b_prod_prod_c_fun$)
(declare-fun uul$ (B_b_prod$ B_b_prod$ C$) B_c_fun$)
(declare-fun uum$ (C$) B_a_b_prod_prod_c_fun$)
(declare-fun uun$ (A_b_prod$ A_b_prod$ C$) B_c_fun$)
(declare-fun uuo$ (C$) B_b_prod_b_prod_c_fun$)
(declare-fun uup$ (B$ B$ C$) B_b_prod_c_fun$)
(declare-fun uuq$ (C$) B_b_prod_a_prod_c_fun$)
(declare-fun uur$ (A$ A$ C$) B_b_prod_c_fun$)
(declare-fun uus$ (C$) A_b_prod_b_prod_c_fun$)
(declare-fun uut$ (B$ B$ C$) A_b_prod_c_fun$)
(declare-fun uuu$ (C$) A_b_prod_a_prod_c_fun$)
(declare-fun uuv$ (A$ A$ C$) A_b_prod_c_fun$)
(declare-fun uuw$ (A$) B_c_fun$)
(declare-fun cbox$ (A$ A$) A_set$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun top$a () B_a_b_prod_prod_set$)
(declare-fun top$b () B_a_prod_set$)
(declare-fun top$c () A_b_b_prod_prod_set$)
(declare-fun top$d () A_a_b_prod_prod_set$)
(declare-fun top$e () A_a_prod_set$)
(declare-fun top$f () B_b_prod_set$)
(declare-fun top$g () A_b_prod_set$)
(declare-fun top$h () A_set$)
(declare-fun zero$ () C$)
(declare-fun cbox$a (B_b_prod$ B_b_prod$) B_b_prod_set$)
(declare-fun cbox$b (B$ B$) B_set$)
(declare-fun cbox$c (A_b_prod$ A_b_prod$) A_b_prod_set$)
(declare-fun cbox$d (B_a_prod$ B_a_prod$) B_a_prod_set$)
(declare-fun cbox$e (A_a_prod$ A_a_prod$) A_a_prod_set$)
(declare-fun cbox$f (B_b_b_prod_prod$ B_b_b_prod_prod$) B_b_b_prod_prod_set$)
(declare-fun cbox$g (B_a_b_prod_prod$ B_a_b_prod_prod$) B_a_b_prod_prod_set$)
(declare-fun cbox$h (B_b_prod_b_prod$ B_b_prod_b_prod$) B_b_prod_b_prod_set$)
(declare-fun cbox$i (B_b_prod_a_prod$ B_b_prod_a_prod$) B_b_prod_a_prod_set$)
(declare-fun cbox$j (A_b_prod_b_prod$ A_b_prod_b_prod$) A_b_prod_b_prod_set$)
(declare-fun cbox$k (A_b_prod_a_prod$ A_b_prod_a_prod$) A_b_prod_a_prod_set$)
(declare-fun pair$a (B$ B$) B_b_prod$)
(declare-fun pair$b (B$ A$) B_a_prod$)
(declare-fun pair$c (A$ A$) A_a_prod$)
(declare-fun pair$d (B$ B_b_prod$) B_b_b_prod_prod$)
(declare-fun pair$e (B$ A_b_prod$) B_a_b_prod_prod$)
(declare-fun pair$f (B_b_prod$ B$) B_b_prod_b_prod$)
(declare-fun pair$g (B_b_prod$ A$) B_b_prod_a_prod$)
(declare-fun pair$h (A_b_prod$ B$) A_b_prod_b_prod$)
(declare-fun pair$i (A_b_prod$ A$) A_b_prod_a_prod$)
(declare-fun pair$j (A$ B_b_prod$) A_b_b_prod_prod$)
(declare-fun pair$k (A$ A_b_prod$) A_a_b_prod_prod$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun fun_app$ (B_c_fun$ B$) C$)
(declare-fun member$a (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun member$c (B_b_prod$ B_b_prod_set$) Bool)
(declare-fun member$d (B_a_prod$ B_a_prod_set$) Bool)
(declare-fun member$e (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$f (B_b_b_prod_prod$ B_b_b_prod_prod_set$) Bool)
(declare-fun member$g (B_a_b_prod_prod$ B_a_b_prod_prod_set$) Bool)
(declare-fun member$h (B_b_prod_b_prod$ B_b_prod_b_prod_set$) Bool)
(declare-fun member$i (B_b_prod_a_prod$ B_b_prod_a_prod_set$) Bool)
(declare-fun member$j (A_b_prod_b_prod$ A_b_prod_b_prod_set$) Bool)
(declare-fun member$k (A_b_prod_a_prod$ A_b_prod_a_prod_set$) Bool)
(declare-fun member$l (A_b_b_prod_prod$ A_b_b_prod_prod_set$) Bool)
(declare-fun member$m (A_a_b_prod_prod$ A_a_b_prod_prod_set$) Bool)
(declare-fun fun_app$a (A_b_prod_c_fun$ A_b_prod$) C$)
(declare-fun fun_app$b (B_b_prod_c_fun$ B_b_prod$) C$)
(declare-fun fun_app$c (A_c_fun$ A$) C$)
(declare-fun fun_app$d (B_b_prod_b_prod_c_fun$ B_b_prod_b_prod$) C$)
(declare-fun fun_app$e (B_b_prod_a_prod_c_fun$ B_b_prod_a_prod$) C$)
(declare-fun fun_app$f (A_b_prod_b_prod_c_fun$ A_b_prod_b_prod$) C$)
(declare-fun fun_app$g (A_b_prod_a_prod_c_fun$ A_b_prod_a_prod$) C$)
(declare-fun fun_app$h (B_b_b_prod_prod_c_fun$ B_b_b_prod_prod$) C$)
(declare-fun fun_app$i (B_a_b_prod_prod_c_fun$ B_a_b_prod_prod$) C$)
(declare-fun fun_app$j (B_a_prod_c_fun$ B_a_prod$) C$)
(declare-fun fun_app$k (A_a_prod_c_fun$ A_a_prod$) C$)
(declare-fun integral$ (A_set$ A_c_fun$) C$)
(declare-fun integral$a (B_b_prod_set$ B_b_prod_c_fun$) C$)
(declare-fun integral$b (B_set$ B_c_fun$) C$)
(declare-fun integral$c (A_b_prod_set$ A_b_prod_c_fun$) C$)
(declare-fun integral$d (B_a_b_prod_prod_set$ B_a_b_prod_prod_c_fun$) C$)
(declare-fun integral$e (B_a_prod_set$ B_a_prod_c_fun$) C$)
(declare-fun integral$f (A_b_b_prod_prod_set$ A_b_b_prod_prod_c_fun$) C$)
(declare-fun integral$g (A_a_b_prod_prod_set$ A_a_b_prod_prod_c_fun$) C$)
(declare-fun integral$h (A_a_prod_set$ A_a_prod_c_fun$) C$)
(declare-fun integral$i (B_b_b_prod_prod_set$ B_b_b_prod_prod_c_fun$) C$)
(declare-fun integral$j (B_b_prod_b_prod_set$ B_b_prod_b_prod_c_fun$) C$)
(declare-fun integral$k (B_b_prod_a_prod_set$ B_b_prod_a_prod_c_fun$) C$)
(declare-fun integral$l (A_b_prod_b_prod_set$ A_b_prod_b_prod_c_fun$) C$)
(declare-fun integral$m (A_b_prod_a_prod_set$ A_b_prod_a_prod_c_fun$) C$)
(declare-fun has_integral$ (B_c_fun$ C$ B_set$) Bool)
(declare-fun has_integral$a (B_a_b_prod_prod_c_fun$ C$ B_a_b_prod_prod_set$) Bool)
(declare-fun has_integral$b (B_a_prod_c_fun$ C$ B_a_prod_set$) Bool)
(declare-fun has_integral$c (A_b_b_prod_prod_c_fun$ C$ A_b_b_prod_prod_set$) Bool)
(declare-fun has_integral$d (A_a_b_prod_prod_c_fun$ C$ A_a_b_prod_prod_set$) Bool)
(declare-fun has_integral$e (A_a_prod_c_fun$ C$ A_a_prod_set$) Bool)
(declare-fun has_integral$f (B_b_prod_c_fun$ C$ B_b_prod_set$) Bool)
(declare-fun has_integral$g (A_b_prod_c_fun$ C$ A_b_prod_set$) Bool)
(declare-fun has_integral$h (A_c_fun$ C$ A_set$) Bool)
(declare-fun integrable_on$ (B_c_fun$ B_set$) Bool)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a f$ (pair$ x$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (uuw$ ?v0) ?v1) (fun_app$a f$ (pair$ ?v0 ?v1))) :pattern ((fun_app$ (uuw$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 C$) (?v3 B_b_prod$)) (! (= (fun_app$b (uur$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uug$ ?v2))) :pattern ((fun_app$b (uur$ ?v0 ?v1 ?v2) ?v3)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 C$) (?v3 A_b_prod$)) (! (= (fun_app$a (uuv$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uug$ ?v2))) :pattern ((fun_app$a (uuv$ ?v0 ?v1 ?v2) ?v3)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uuh$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uug$ ?v2))) :pattern ((fun_app$ (uuh$ ?v0 ?v1 ?v2) ?v3)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 C$) (?v3 A$)) (! (= (fun_app$c (uuj$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uug$ ?v2))) :pattern ((fun_app$c (uuj$ ?v0 ?v1 ?v2) ?v3)))) :named a5))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uul$ ?v0 ?v1 ?v2) ?v3) (integral$a (cbox$a ?v0 ?v1) (uud$ ?v2))) :pattern ((fun_app$ (uul$ ?v0 ?v1 ?v2) ?v3)))) :named a6))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 C$) (?v3 B_b_prod$)) (! (= (fun_app$b (uup$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uub$ ?v2))) :pattern ((fun_app$b (uup$ ?v0 ?v1 ?v2) ?v3)))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 C$) (?v3 A_b_prod$)) (! (= (fun_app$a (uut$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uub$ ?v2))) :pattern ((fun_app$a (uut$ ?v0 ?v1 ?v2) ?v3)))) :named a8))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uue$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uub$ ?v2))) :pattern ((fun_app$ (uue$ ?v0 ?v1 ?v2) ?v3)))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 C$) (?v3 A$)) (! (= (fun_app$c (uuc$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uub$ ?v2))) :pattern ((fun_app$c (uuc$ ?v0 ?v1 ?v2) ?v3)))) :named a10))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uun$ ?v0 ?v1 ?v2) ?v3) (integral$c (cbox$c ?v0 ?v1) (uua$ ?v2))) :pattern ((fun_app$ (uun$ ?v0 ?v1 ?v2) ?v3)))) :named a11))
(assert (! (forall ((?v0 C$) (?v1 B_b_prod_b_prod$)) (! (= (fun_app$d (uuo$ ?v0) ?v1) ?v0) :pattern ((fun_app$d (uuo$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 C$) (?v1 B_b_prod_a_prod$)) (! (= (fun_app$e (uuq$ ?v0) ?v1) ?v0) :pattern ((fun_app$e (uuq$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 C$) (?v1 A_b_prod_b_prod$)) (! (= (fun_app$f (uus$ ?v0) ?v1) ?v0) :pattern ((fun_app$f (uus$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 C$) (?v1 A_b_prod_a_prod$)) (! (= (fun_app$g (uuu$ ?v0) ?v1) ?v0) :pattern ((fun_app$g (uuu$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 C$) (?v1 B_b_b_prod_prod$)) (! (= (fun_app$h (uuk$ ?v0) ?v1) ?v0) :pattern ((fun_app$h (uuk$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 C$) (?v1 B_a_b_prod_prod$)) (! (= (fun_app$i (uum$ ?v0) ?v1) ?v0) :pattern ((fun_app$i (uum$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 C$) (?v1 B_b_prod$)) (! (= (fun_app$b (uud$ ?v0) ?v1) ?v0) :pattern ((fun_app$b (uud$ ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 C$) (?v1 B_a_prod$)) (! (= (fun_app$j (uuf$ ?v0) ?v1) ?v0) :pattern ((fun_app$j (uuf$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 C$) (?v1 A_b_prod$)) (! (= (fun_app$a (uua$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 C$) (?v1 A_a_prod$)) (! (= (fun_app$k (uui$ ?v0) ?v1) ?v0) :pattern ((fun_app$k (uui$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 C$) (?v1 B$)) (! (= (fun_app$ (uub$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 C$) (?v1 A$)) (! (= (fun_app$c (uug$ ?v0) ?v1) ?v0) :pattern ((fun_app$c (uug$ ?v0) ?v1)))) :named a23))
(assert (! (not (has_integral$ uu$ (integral$b top$ uu$) (cbox$b (g1$ x$) (g2$ x$)))) :named a24))
(assert (! (= (integral$b (cbox$b (g1$ x$) (g2$ x$)) uu$) (integral$b top$ uu$)) :named a25))
(assert (! (has_integral$ uu$ (integral$b (cbox$b (g1$ x$) (g2$ x$)) uu$) (cbox$b (g1$ x$) (g2$ x$))) :named a26))
(assert (! (forall ((?v0 B$)) (=> (not (member$ ?v0 (cbox$b (g1$ x$) (g2$ x$)))) (= (fun_app$a f$ (pair$ x$ ?v0)) zero$))) :named a27))
(assert (! (integrable_on$ uu$ (cbox$b (g1$ x$) (g2$ x$))) :named a28))
(assert (! (forall ((?v0 B_a_b_prod_prod_c_fun$) (?v1 C$) (?v2 B_a_b_prod_prod_set$)) (=> (has_integral$a ?v0 ?v1 ?v2) (= (integral$d ?v2 ?v0) ?v1))) :named a29))
(assert (! (forall ((?v0 B_a_prod_c_fun$) (?v1 C$) (?v2 B_a_prod_set$)) (=> (has_integral$b ?v0 ?v1 ?v2) (= (integral$e ?v2 ?v0) ?v1))) :named a30))
(assert (! (forall ((?v0 A_b_b_prod_prod_c_fun$) (?v1 C$) (?v2 A_b_b_prod_prod_set$)) (=> (has_integral$c ?v0 ?v1 ?v2) (= (integral$f ?v2 ?v0) ?v1))) :named a31))
(assert (! (forall ((?v0 A_a_b_prod_prod_c_fun$) (?v1 C$) (?v2 A_a_b_prod_prod_set$)) (=> (has_integral$d ?v0 ?v1 ?v2) (= (integral$g ?v2 ?v0) ?v1))) :named a32))
(assert (! (forall ((?v0 A_a_prod_c_fun$) (?v1 C$) (?v2 A_a_prod_set$)) (=> (has_integral$e ?v0 ?v1 ?v2) (= (integral$h ?v2 ?v0) ?v1))) :named a33))
(assert (! (forall ((?v0 B_b_prod_c_fun$) (?v1 C$) (?v2 B_b_prod_set$)) (=> (has_integral$f ?v0 ?v1 ?v2) (= (integral$a ?v2 ?v0) ?v1))) :named a34))
(assert (! (forall ((?v0 A_b_prod_c_fun$) (?v1 C$) (?v2 A_b_prod_set$)) (=> (has_integral$g ?v0 ?v1 ?v2) (= (integral$c ?v2 ?v0) ?v1))) :named a35))
(assert (! (forall ((?v0 A_c_fun$) (?v1 C$) (?v2 A_set$)) (=> (has_integral$h ?v0 ?v1 ?v2) (= (integral$ ?v2 ?v0) ?v1))) :named a36))
(assert (! (forall ((?v0 B_c_fun$) (?v1 C$) (?v2 B_set$)) (=> (has_integral$ ?v0 ?v1 ?v2) (= (integral$b ?v2 ?v0) ?v1))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$) (?v4 A$) (?v5 B$)) (= (member$a (pair$ ?v0 ?v1) (cbox$c (pair$ ?v2 ?v3) (pair$ ?v4 ?v5))) (and (member$b ?v0 (cbox$ ?v2 ?v4)) (member$ ?v1 (cbox$b ?v3 ?v5))))) :named a38))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$) (?v4 B$) (?v5 B$)) (= (member$c (pair$a ?v0 ?v1) (cbox$a (pair$a ?v2 ?v3) (pair$a ?v4 ?v5))) (and (member$ ?v0 (cbox$b ?v2 ?v4)) (member$ ?v1 (cbox$b ?v3 ?v5))))) :named a39))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 B$) (?v5 A$)) (= (member$d (pair$b ?v0 ?v1) (cbox$d (pair$b ?v2 ?v3) (pair$b ?v4 ?v5))) (and (member$ ?v0 (cbox$b ?v2 ?v4)) (member$b ?v1 (cbox$ ?v3 ?v5))))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A$) (?v5 A$)) (= (member$e (pair$c ?v0 ?v1) (cbox$e (pair$c ?v2 ?v3) (pair$c ?v4 ?v5))) (and (member$b ?v0 (cbox$ ?v2 ?v4)) (member$b ?v1 (cbox$ ?v3 ?v5))))) :named a41))
(assert (! (forall ((?v0 B$) (?v1 B_b_prod$) (?v2 B$) (?v3 B_b_prod$) (?v4 B$) (?v5 B_b_prod$)) (= (member$f (pair$d ?v0 ?v1) (cbox$f (pair$d ?v2 ?v3) (pair$d ?v4 ?v5))) (and (member$ ?v0 (cbox$b ?v2 ?v4)) (member$c ?v1 (cbox$a ?v3 ?v5))))) :named a42))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$) (?v4 B$) (?v5 A_b_prod$)) (= (member$g (pair$e ?v0 ?v1) (cbox$g (pair$e ?v2 ?v3) (pair$e ?v4 ?v5))) (and (member$ ?v0 (cbox$b ?v2 ?v4)) (member$a ?v1 (cbox$c ?v3 ?v5))))) :named a43))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B$) (?v2 B_b_prod$) (?v3 B$) (?v4 B_b_prod$) (?v5 B$)) (= (member$h (pair$f ?v0 ?v1) (cbox$h (pair$f ?v2 ?v3) (pair$f ?v4 ?v5))) (and (member$c ?v0 (cbox$a ?v2 ?v4)) (member$ ?v1 (cbox$b ?v3 ?v5))))) :named a44))
(assert (! (forall ((?v0 B_b_prod$) (?v1 A$) (?v2 B_b_prod$) (?v3 A$) (?v4 B_b_prod$) (?v5 A$)) (= (member$i (pair$g ?v0 ?v1) (cbox$i (pair$g ?v2 ?v3) (pair$g ?v4 ?v5))) (and (member$c ?v0 (cbox$a ?v2 ?v4)) (member$b ?v1 (cbox$ ?v3 ?v5))))) :named a45))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_prod$) (?v3 B$) (?v4 A_b_prod$) (?v5 B$)) (= (member$j (pair$h ?v0 ?v1) (cbox$j (pair$h ?v2 ?v3) (pair$h ?v4 ?v5))) (and (member$a ?v0 (cbox$c ?v2 ?v4)) (member$ ?v1 (cbox$b ?v3 ?v5))))) :named a46))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod$) (?v3 A$) (?v4 A_b_prod$) (?v5 A$)) (= (member$k (pair$i ?v0 ?v1) (cbox$k (pair$i ?v2 ?v3) (pair$i ?v4 ?v5))) (and (member$a ?v0 (cbox$c ?v2 ?v4)) (member$b ?v1 (cbox$ ?v3 ?v5))))) :named a47))
(assert (! (forall ((?v0 B$)) (= (fun_app$a f$ (pair$ x$ ?v0)) (ite (member$ ?v0 (cbox$b (g1$ x$) (g2$ x$))) (fun_app$a g$ (pair$ x$ ?v0)) zero$))) :named a48))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$) (?v4 C$)) (= (integral$c (cbox$c (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (uua$ ?v4)) (integral$ (cbox$ ?v0 ?v2) (uuc$ ?v1 ?v3 ?v4)))) :named a49))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$) (?v4 C$)) (= (integral$a (cbox$a (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (uud$ ?v4)) (integral$b (cbox$b ?v0 ?v2) (uue$ ?v1 ?v3 ?v4)))) :named a50))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 C$)) (= (integral$e (cbox$d (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (uuf$ ?v4)) (integral$b (cbox$b ?v0 ?v2) (uuh$ ?v1 ?v3 ?v4)))) :named a51))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 C$)) (= (integral$h (cbox$e (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (uui$ ?v4)) (integral$ (cbox$ ?v0 ?v2) (uuj$ ?v1 ?v3 ?v4)))) :named a52))
(assert (! (forall ((?v0 B$) (?v1 B_b_prod$) (?v2 B$) (?v3 B_b_prod$) (?v4 C$)) (= (integral$i (cbox$f (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (uuk$ ?v4)) (integral$b (cbox$b ?v0 ?v2) (uul$ ?v1 ?v3 ?v4)))) :named a53))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$) (?v4 C$)) (= (integral$d (cbox$g (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (uum$ ?v4)) (integral$b (cbox$b ?v0 ?v2) (uun$ ?v1 ?v3 ?v4)))) :named a54))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B$) (?v2 B_b_prod$) (?v3 B$) (?v4 C$)) (= (integral$j (cbox$h (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (uuo$ ?v4)) (integral$a (cbox$a ?v0 ?v2) (uup$ ?v1 ?v3 ?v4)))) :named a55))
(assert (! (forall ((?v0 B_b_prod$) (?v1 A$) (?v2 B_b_prod$) (?v3 A$) (?v4 C$)) (= (integral$k (cbox$i (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (uuq$ ?v4)) (integral$a (cbox$a ?v0 ?v2) (uur$ ?v1 ?v3 ?v4)))) :named a56))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_prod$) (?v3 B$) (?v4 C$)) (= (integral$l (cbox$j (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (uus$ ?v4)) (integral$c (cbox$c ?v0 ?v2) (uut$ ?v1 ?v3 ?v4)))) :named a57))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod$) (?v3 A$) (?v4 C$)) (= (integral$m (cbox$k (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (uuu$ ?v4)) (integral$c (cbox$c ?v0 ?v2) (uuv$ ?v1 ?v3 ?v4)))) :named a58))
(assert (! (forall ((?v0 A$)) (integrable_on$ (uuw$ ?v0) top$)) :named a59))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a61))
(assert (! (forall ((?v0 A$) (?v1 B_b_prod$) (?v2 A$) (?v3 B_b_prod$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a62))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$k ?v0 ?v1) (pair$k ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a63))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a64))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a65))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a66))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a67))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a68))
(assert (! (forall ((?v0 A$) (?v1 B_b_prod$) (?v2 A$) (?v3 B_b_prod$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a69))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$k ?v0 ?v1) (pair$k ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a70))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a71))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a72))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a73))
(assert (! (forall ((?v0 B_a_b_prod_prod$)) (member$g ?v0 top$a)) :named a74))
(assert (! (forall ((?v0 B_a_prod$)) (member$d ?v0 top$b)) :named a75))
(assert (! (forall ((?v0 A_b_b_prod_prod$)) (member$l ?v0 top$c)) :named a76))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (member$m ?v0 top$d)) :named a77))
(assert (! (forall ((?v0 A_a_prod$)) (member$e ?v0 top$e)) :named a78))
(assert (! (forall ((?v0 B_b_prod$)) (member$c ?v0 top$f)) :named a79))
(assert (! (forall ((?v0 A_b_prod$)) (member$a ?v0 top$g)) :named a80))
(assert (! (forall ((?v0 A$)) (member$b ?v0 top$h)) :named a81))
(assert (! (forall ((?v0 B$)) (member$ ?v0 top$)) :named a82))
(assert (! (forall ((?v0 B_a_b_prod_prod$)) (= (member$g ?v0 top$a) true)) :named a83))
(assert (! (forall ((?v0 B_a_prod$)) (= (member$d ?v0 top$b) true)) :named a84))
(assert (! (forall ((?v0 A_b_b_prod_prod$)) (= (member$l ?v0 top$c) true)) :named a85))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (= (member$m ?v0 top$d) true)) :named a86))
(assert (! (forall ((?v0 A_a_prod$)) (= (member$e ?v0 top$e) true)) :named a87))
(assert (! (forall ((?v0 B_b_prod$)) (= (member$c ?v0 top$f) true)) :named a88))
(assert (! (forall ((?v0 A_b_prod$)) (= (member$a ?v0 top$g) true)) :named a89))
(assert (! (forall ((?v0 A$)) (= (member$b ?v0 top$h) true)) :named a90))
(assert (! (forall ((?v0 B$)) (= (member$ ?v0 top$) true)) :named a91))
(check-sat)
;;;;(get-proof)
