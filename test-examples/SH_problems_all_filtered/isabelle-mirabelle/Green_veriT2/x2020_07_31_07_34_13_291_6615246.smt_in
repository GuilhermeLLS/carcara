; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort B_a_prod$ 0)
(declare-sort B_b_prod$ 0)
(declare-sort A_measure$ 0)
(declare-sort B_measure$ 0)
(declare-sort C_measure$ 0)
(declare-sort B_c_fun_set$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort A_a_c_fun_fun$ 0)
(declare-sort A_b_c_fun_fun$ 0)
(declare-sort B_a_c_fun_fun$ 0)
(declare-sort B_b_c_fun_fun$ 0)
(declare-sort A_a_prod_c_fun$ 0)
(declare-sort A_b_prod_c_fun$ 0)
(declare-sort B_a_prod_c_fun$ 0)
(declare-sort B_b_prod_c_fun$ 0)
(declare-sort A_a_a_prod_prod$ 0)
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_b_a_prod_prod$ 0)
(declare-sort A_b_b_prod_prod$ 0)
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort A_b_prod_b_prod$ 0)
(declare-sort B_a_a_prod_prod$ 0)
(declare-sort B_a_b_prod_prod$ 0)
(declare-sort B_b_a_prod_prod$ 0)
(declare-sort B_b_b_prod_prod$ 0)
(declare-sort A_a_prod_measure$ 0)
(declare-sort A_b_prod_measure$ 0)
(declare-sort B_a_prod_measure$ 0)
(declare-sort B_b_prod_measure$ 0)
(declare-sort A_b_prod_c_fun_set$ 0)
(declare-sort A_a_a_prod_prod_set$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort A_b_a_prod_prod_set$ 0)
(declare-sort A_b_b_prod_prod_set$ 0)
(declare-sort A_b_prod_a_prod_set$ 0)
(declare-sort B_a_b_prod_prod_set$ 0)
(declare-sort A_a_b_prod_c_fun_fun$ 0)
(declare-sort A_a_prod_b_c_fun_fun$ 0)
(declare-sort A_b_prod_a_c_fun_fun$ 0)
(declare-sort A_b_prod_b_c_fun_fun$ 0)
(declare-sort B_a_a_prod_c_fun_fun$ 0)
(declare-sort B_a_b_prod_c_fun_fun$ 0)
(declare-sort B_a_prod_b_c_fun_fun$ 0)
(declare-sort B_b_a_prod_c_fun_fun$ 0)
(declare-sort B_b_b_prod_c_fun_fun$ 0)
(declare-sort B_b_prod_b_c_fun_fun$ 0)
(declare-sort A_a_a_prod_prod_c_fun$ 0)
(declare-sort A_a_b_prod_prod_c_fun$ 0)
(declare-sort A_a_prod_b_prod_c_fun$ 0)
(declare-sort A_b_a_prod_prod_c_fun$ 0)
(declare-sort A_b_b_prod_prod_c_fun$ 0)
(declare-sort A_b_prod_a_prod_c_fun$ 0)
(declare-sort A_b_prod_b_prod_c_fun$ 0)
(declare-sort B_a_a_prod_prod_c_fun$ 0)
(declare-sort B_a_b_prod_prod_c_fun$ 0)
(declare-sort B_a_prod_b_prod_c_fun$ 0)
(declare-sort B_b_a_prod_prod_c_fun$ 0)
(declare-sort B_b_b_prod_prod_c_fun$ 0)
(declare-sort B_b_prod_b_prod_c_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-sort A_a_a_prod_prod_measure$ 0)
(declare-sort A_a_b_prod_prod_measure$ 0)
(declare-sort A_a_prod_b_prod_measure$ 0)
(declare-sort A_b_a_prod_prod_measure$ 0)
(declare-sort A_b_b_prod_prod_measure$ 0)
(declare-sort A_b_prod_a_prod_measure$ 0)
(declare-sort A_b_prod_b_prod_measure$ 0)
(declare-sort B_a_a_prod_prod_measure$ 0)
(declare-sort B_a_b_prod_prod_measure$ 0)
(declare-sort B_a_prod_b_prod_measure$ 0)
(declare-sort B_b_a_prod_prod_measure$ 0)
(declare-sort B_b_b_prod_prod_measure$ 0)
(declare-sort B_b_prod_b_prod_measure$ 0)
(declare-sort A_b_prod_a_b_prod_c_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_c_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_measure$ 0)
(declare-fun f$ () A_b_prod_c_fun$)
(declare-fun uu$ () B_a_c_fun_fun$)
(declare-fun top$ () A_set$)
(declare-fun uua$ () B_c_fun$)
(declare-fun uub$ (A_b_prod_c_fun$) A_b_c_fun_fun$)
(declare-fun uuc$ (A_b_prod_c_fun$) A_c_fun$)
(declare-fun uud$ (A_b_prod_a_prod_c_fun$) A_b_prod_a_c_fun_fun$)
(declare-fun uue$ (A_b_prod_a_prod_c_fun$) A_b_prod_c_fun$)
(declare-fun uuf$ (A_b_prod_b_prod_c_fun$) A_b_prod_b_c_fun_fun$)
(declare-fun uug$ (A_b_prod_b_prod_c_fun$) A_b_prod_c_fun$)
(declare-fun uuh$ (A_b_prod_a_b_prod_prod_c_fun$) A_b_prod_a_b_prod_c_fun_fun$)
(declare-fun uui$ (A_b_prod_a_b_prod_prod_c_fun$) A_b_prod_c_fun$)
(declare-fun uuj$ (B_b_prod_c_fun$) B_b_c_fun_fun$)
(declare-fun uuk$ (B_b_prod_c_fun$) B_c_fun$)
(declare-fun uul$ (B_a_prod_c_fun$) B_a_c_fun_fun$)
(declare-fun uum$ (B_a_prod_c_fun$) B_c_fun$)
(declare-fun uun$ (A_a_prod_c_fun$) A_a_c_fun_fun$)
(declare-fun uuo$ (A_a_prod_c_fun$) A_c_fun$)
(declare-fun uup$ (B_b_b_prod_prod_c_fun$) B_b_b_prod_c_fun_fun$)
(declare-fun uuq$ (B_b_b_prod_prod_c_fun$) B_c_fun$)
(declare-fun uur$ (B_b_a_prod_prod_c_fun$) B_b_a_prod_c_fun_fun$)
(declare-fun uus$ (B_b_a_prod_prod_c_fun$) B_c_fun$)
(declare-fun uut$ (B_a_a_prod_prod_c_fun$) B_a_a_prod_c_fun_fun$)
(declare-fun uuu$ (B_a_a_prod_prod_c_fun$) B_c_fun$)
(declare-fun uuv$ (A_b_c_fun_fun$) A_c_fun$)
(declare-fun uuw$ (A_b_prod_a_c_fun_fun$) A_b_prod_c_fun$)
(declare-fun uux$ (A_b_prod_b_c_fun_fun$) A_b_prod_c_fun$)
(declare-fun uuy$ (A_b_prod_a_b_prod_c_fun_fun$) A_b_prod_c_fun$)
(declare-fun uuz$ (B_b_c_fun_fun$) B_c_fun$)
(declare-fun uva$ (B_a_c_fun_fun$) B_c_fun$)
(declare-fun uvb$ (A_a_c_fun_fun$) A_c_fun$)
(declare-fun uvc$ (B_b_b_prod_c_fun_fun$) B_c_fun$)
(declare-fun uvd$ (B_b_a_prod_c_fun_fun$) B_c_fun$)
(declare-fun uve$ (B_a_a_prod_c_fun_fun$) B_c_fun$)
(declare-fun uvf$ (A_b_c_fun_fun$) B_a_c_fun_fun$)
(declare-fun uvg$ (A_b_c_fun_fun$) B_c_fun$)
(declare-fun uvh$ (A_a_b_prod_c_fun_fun$) A_b_prod_a_c_fun_fun$)
(declare-fun uvi$ (A_a_b_prod_c_fun_fun$) A_b_prod_c_fun$)
(declare-fun uvj$ (B_a_b_prod_c_fun_fun$) A_b_prod_b_c_fun_fun$)
(declare-fun uvk$ (B_a_b_prod_c_fun_fun$) A_b_prod_c_fun$)
(declare-fun uvl$ (A_b_prod_a_b_prod_c_fun_fun$) A_b_prod_a_b_prod_c_fun_fun$)
(declare-fun uvm$ (A_b_prod_a_b_prod_c_fun_fun$) A_b_prod_c_fun$)
(declare-fun uvn$ (B_b_c_fun_fun$) B_b_c_fun_fun$)
(declare-fun uvo$ (B_b_c_fun_fun$) B_c_fun$)
(declare-fun uvp$ (B_a_c_fun_fun$) A_b_c_fun_fun$)
(declare-fun uvq$ (B_a_c_fun_fun$) A_c_fun$)
(declare-fun uvr$ (A_a_c_fun_fun$) A_a_c_fun_fun$)
(declare-fun uvs$ (A_a_c_fun_fun$) A_c_fun$)
(declare-fun uvt$ (B_b_prod_b_c_fun_fun$) B_b_b_prod_c_fun_fun$)
(declare-fun uvu$ (B_b_prod_b_c_fun_fun$) B_c_fun$)
(declare-fun uvv$ (B_a_prod_b_c_fun_fun$) B_b_a_prod_c_fun_fun$)
(declare-fun uvw$ (B_a_prod_b_c_fun_fun$) B_c_fun$)
(declare-fun uvx$ (A_a_prod_b_c_fun_fun$) B_a_a_prod_c_fun_fun$)
(declare-fun uvy$ (A_a_prod_b_c_fun_fun$) B_c_fun$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun top$a () A_b_prod_set$)
(declare-fun top$b () B_set$)
(declare-fun top$c () A_b_prod_a_prod_set$)
(declare-fun top$d () B_a_b_prod_prod_set$)
(declare-fun top$e () A_a_b_prod_prod_set$)
(declare-fun top$f () A_a_prod_set$)
(declare-fun top$g () A_b_b_prod_prod_set$)
(declare-fun top$h () A_b_a_prod_prod_set$)
(declare-fun top$i () A_a_a_prod_prod_set$)
(declare-fun borel$ () C_measure$)
(declare-fun pair$a (A_b_prod$ A_b_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun pair$b (A_b_prod$ B$) A_b_prod_b_prod$)
(declare-fun pair$c (A_b_prod$ A$) A_b_prod_a_prod$)
(declare-fun pair$d (B$ B_b_prod$) B_b_b_prod_prod$)
(declare-fun pair$e (B$ B_a_prod$) B_b_a_prod_prod$)
(declare-fun pair$f (B$ A_a_prod$) B_a_a_prod_prod$)
(declare-fun pair$g (B$ B$) B_b_prod$)
(declare-fun pair$h (B$ A$) B_a_prod$)
(declare-fun pair$i (A$ A$) A_a_prod$)
(declare-fun space$ (A_b_prod_measure$) A_b_prod_set$)
(declare-fun lborel$ () A_a_prod_measure$)
(declare-fun member$ (A_b_prod_c_fun$ A_b_prod_c_fun_set$) Bool)
(declare-fun space$a (B_measure$) B_set$)
(declare-fun space$b (A_measure$) A_set$)
(declare-fun space$c (A_b_prod_a_prod_measure$) A_b_prod_a_prod_set$)
(declare-fun space$d (B_a_b_prod_prod_measure$) B_a_b_prod_prod_set$)
(declare-fun space$e (A_a_b_prod_prod_measure$) A_a_b_prod_prod_set$)
(declare-fun space$f (A_a_prod_measure$) A_a_prod_set$)
(declare-fun space$g (A_b_b_prod_prod_measure$) A_b_b_prod_prod_set$)
(declare-fun space$h (A_b_a_prod_prod_measure$) A_b_a_prod_prod_set$)
(declare-fun space$i (A_a_a_prod_prod_measure$) A_a_a_prod_prod_set$)
(declare-fun fun_app$ (B_c_fun$ B$) C$)
(declare-fun lborel$a () B_a_prod_measure$)
(declare-fun lborel$b () B_b_prod_measure$)
(declare-fun lborel$c () A_measure$)
(declare-fun lborel$d () B_measure$)
(declare-fun lborel$e () A_b_prod_measure$)
(declare-fun lborel$f () A_a_b_prod_prod_measure$)
(declare-fun lborel$g () B_a_b_prod_prod_measure$)
(declare-fun lborel$h () A_b_prod_a_prod_measure$)
(declare-fun lborel$i () A_b_prod_b_prod_measure$)
(declare-fun lborel$j () A_b_prod_a_b_prod_prod_measure$)
(declare-fun lborel$k () A_b_b_prod_prod_measure$)
(declare-fun lborel$l () A_b_a_prod_prod_measure$)
(declare-fun lborel$m () A_a_a_prod_prod_measure$)
(declare-fun member$a (B_c_fun$ B_c_fun_set$) Bool)
(declare-fun member$b (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun member$c (B$ B_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun member$e (A_b_prod_a_prod$ A_b_prod_a_prod_set$) Bool)
(declare-fun member$f (B_a_b_prod_prod$ B_a_b_prod_prod_set$) Bool)
(declare-fun member$g (A_a_b_prod_prod$ A_a_b_prod_prod_set$) Bool)
(declare-fun member$h (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$i (A_b_b_prod_prod$ A_b_b_prod_prod_set$) Bool)
(declare-fun member$j (A_b_a_prod_prod$ A_b_a_prod_prod_set$) Bool)
(declare-fun member$k (A_a_a_prod_prod$ A_a_a_prod_prod_set$) Bool)
(declare-fun fun_app$a (B_a_c_fun_fun$ B$) A_c_fun$)
(declare-fun fun_app$b (B_a_a_prod_c_fun_fun$ B$) A_a_prod_c_fun$)
(declare-fun fun_app$c (B_b_a_prod_c_fun_fun$ B$) B_a_prod_c_fun$)
(declare-fun fun_app$d (B_b_b_prod_c_fun_fun$ B$) B_b_prod_c_fun$)
(declare-fun fun_app$e (A_c_fun$ A$) C$)
(declare-fun fun_app$f (A_a_c_fun_fun$ A$) A_c_fun$)
(declare-fun fun_app$g (A_b_c_fun_fun$ A$) B_c_fun$)
(declare-fun fun_app$h (B_b_c_fun_fun$ B$) B_c_fun$)
(declare-fun fun_app$i (A_b_prod_c_fun$ A_b_prod$) C$)
(declare-fun fun_app$j (A_b_prod_a_b_prod_c_fun_fun$ A_b_prod$) A_b_prod_c_fun$)
(declare-fun fun_app$k (A_b_prod_b_c_fun_fun$ A_b_prod$) B_c_fun$)
(declare-fun fun_app$l (A_b_prod_a_c_fun_fun$ A_b_prod$) A_c_fun$)
(declare-fun fun_app$m (B_b_prod_c_fun$ B_b_prod$) C$)
(declare-fun fun_app$n (B_b_prod_b_c_fun_fun$ B_b_prod$) B_c_fun$)
(declare-fun fun_app$o (B_a_prod_c_fun$ B_a_prod$) C$)
(declare-fun fun_app$p (B_a_prod_b_c_fun_fun$ B_a_prod$) B_c_fun$)
(declare-fun fun_app$q (A_a_prod_c_fun$ A_a_prod$) C$)
(declare-fun fun_app$r (A_a_prod_b_c_fun_fun$ A_a_prod$) B_c_fun$)
(declare-fun fun_app$s (B_a_b_prod_c_fun_fun$ B$) A_b_prod_c_fun$)
(declare-fun fun_app$t (A_a_b_prod_c_fun_fun$ A$) A_b_prod_c_fun$)
(declare-fun fun_app$u (A_b_prod_a_b_prod_prod_c_fun$ A_b_prod_a_b_prod_prod$) C$)
(declare-fun fun_app$v (A_b_prod_b_prod_c_fun$ A_b_prod_b_prod$) C$)
(declare-fun fun_app$w (A_b_prod_a_prod_c_fun$ A_b_prod_a_prod$) C$)
(declare-fun fun_app$x (B_b_b_prod_prod_c_fun$ B_b_b_prod_prod$) C$)
(declare-fun fun_app$y (B_b_a_prod_prod_c_fun$ B_b_a_prod_prod$) C$)
(declare-fun fun_app$z (B_a_a_prod_prod_c_fun$ B_a_a_prod_prod$) C$)
(declare-fun integral$ (A_set$ A_c_fun$) C$)
(declare-fun case_prod$ (A_b_c_fun_fun$) A_b_prod_c_fun$)
(declare-fun fun_app$aa (B_a_b_prod_prod_c_fun$ B_a_b_prod_prod$) C$)
(declare-fun fun_app$ab (A_a_b_prod_prod_c_fun$ A_a_b_prod_prod$) C$)
(declare-fun fun_app$ac (A_b_b_prod_prod_c_fun$ A_b_b_prod_prod$) C$)
(declare-fun fun_app$ad (A_b_a_prod_prod_c_fun$ A_b_a_prod_prod$) C$)
(declare-fun fun_app$ae (A_a_a_prod_prod_c_fun$ A_a_a_prod_prod$) C$)
(declare-fun case_prod$a (A_b_prod_a_c_fun_fun$) A_b_prod_a_prod_c_fun$)
(declare-fun case_prod$b (A_b_prod_b_c_fun_fun$) A_b_prod_b_prod_c_fun$)
(declare-fun case_prod$c (A_b_prod_a_b_prod_c_fun_fun$) A_b_prod_a_b_prod_prod_c_fun$)
(declare-fun case_prod$d (B_b_c_fun_fun$) B_b_prod_c_fun$)
(declare-fun case_prod$e (B_a_c_fun_fun$) B_a_prod_c_fun$)
(declare-fun case_prod$f (A_a_c_fun_fun$) A_a_prod_c_fun$)
(declare-fun case_prod$g (B_b_b_prod_c_fun_fun$) B_b_b_prod_prod_c_fun$)
(declare-fun case_prod$h (B_b_a_prod_c_fun_fun$) B_b_a_prod_prod_c_fun$)
(declare-fun case_prod$i (B_a_a_prod_c_fun_fun$) B_a_a_prod_prod_c_fun$)
(declare-fun case_prod$j (A_a_b_prod_c_fun_fun$) A_a_b_prod_prod_c_fun$)
(declare-fun case_prod$k (B_a_b_prod_c_fun_fun$) B_a_b_prod_prod_c_fun$)
(declare-fun case_prod$l (B_b_prod_b_c_fun_fun$) B_b_prod_b_prod_c_fun$)
(declare-fun case_prod$m (B_a_prod_b_c_fun_fun$) B_a_prod_b_prod_c_fun$)
(declare-fun case_prod$n (A_a_prod_b_c_fun_fun$) A_a_prod_b_prod_c_fun$)
(declare-fun integrable$ (A_b_prod_measure$ A_b_prod_c_fun$) Bool)
(declare-fun measurable$ (A_b_prod_measure$ C_measure$) A_b_prod_c_fun_set$)
(declare-fun integrable$a (B_measure$ B_c_fun$) Bool)
(declare-fun integrable$b (A_measure$ A_c_fun$) Bool)
(declare-fun integrable$c (A_b_prod_a_prod_measure$ A_b_prod_a_prod_c_fun$) Bool)
(declare-fun integrable$d (B_a_b_prod_prod_measure$ B_a_b_prod_prod_c_fun$) Bool)
(declare-fun integrable$e (A_a_b_prod_prod_measure$ A_a_b_prod_prod_c_fun$) Bool)
(declare-fun integrable$f (A_a_prod_measure$ A_a_prod_c_fun$) Bool)
(declare-fun integrable$g (A_b_b_prod_prod_measure$ A_b_b_prod_prod_c_fun$) Bool)
(declare-fun integrable$h (A_b_a_prod_prod_measure$ A_b_a_prod_prod_c_fun$) Bool)
(declare-fun integrable$i (A_a_a_prod_prod_measure$ A_a_a_prod_prod_c_fun$) Bool)
(declare-fun integrable$j (A_b_prod_b_prod_measure$ A_b_prod_b_prod_c_fun$) Bool)
(declare-fun integrable$k (A_b_prod_a_b_prod_prod_measure$ A_b_prod_a_b_prod_prod_c_fun$) Bool)
(declare-fun integrable$l (B_b_prod_measure$ B_b_prod_c_fun$) Bool)
(declare-fun integrable$m (B_a_prod_measure$ B_a_prod_c_fun$) Bool)
(declare-fun integrable$n (B_b_b_prod_prod_measure$ B_b_b_prod_prod_c_fun$) Bool)
(declare-fun integrable$o (B_b_a_prod_prod_measure$ B_b_a_prod_prod_c_fun$) Bool)
(declare-fun integrable$p (B_a_a_prod_prod_measure$ B_a_a_prod_prod_c_fun$) Bool)
(declare-fun integrable$q (B_b_prod_b_prod_measure$ B_b_prod_b_prod_c_fun$) Bool)
(declare-fun integrable$r (B_a_prod_b_prod_measure$ B_a_prod_b_prod_c_fun$) Bool)
(declare-fun integrable$s (A_a_prod_b_prod_measure$ A_a_prod_b_prod_c_fun$) Bool)
(declare-fun measurable$a (B_measure$ C_measure$) B_c_fun_set$)
(declare-fun pair_measure$ (A_measure$ B_measure$) A_b_prod_measure$)
(declare-fun integrable_on$ (A_b_prod_c_fun$ A_b_prod_set$) Bool)
(declare-fun pair_measure$a (A_measure$ A_measure$) A_a_prod_measure$)
(declare-fun pair_measure$b (B_measure$ A_measure$) B_a_prod_measure$)
(declare-fun pair_measure$c (B_measure$ B_measure$) B_b_prod_measure$)
(declare-fun pair_measure$d (A_measure$ A_b_prod_measure$) A_a_b_prod_prod_measure$)
(declare-fun pair_measure$e (B_measure$ A_b_prod_measure$) B_a_b_prod_prod_measure$)
(declare-fun pair_measure$f (A_b_prod_measure$ A_measure$) A_b_prod_a_prod_measure$)
(declare-fun pair_measure$g (A_b_prod_measure$ B_measure$) A_b_prod_b_prod_measure$)
(declare-fun pair_measure$h (A_b_prod_measure$ A_b_prod_measure$) A_b_prod_a_b_prod_prod_measure$)
(declare-fun pair_measure$i (A_measure$ B_b_prod_measure$) A_b_b_prod_prod_measure$)
(declare-fun pair_measure$j (B_measure$ B_b_prod_measure$) B_b_b_prod_prod_measure$)
(declare-fun pair_measure$k (B_measure$ B_a_prod_measure$) B_b_a_prod_prod_measure$)
(declare-fun pair_measure$l (B_measure$ A_a_prod_measure$) B_a_a_prod_prod_measure$)
(declare-fun pair_measure$m (B_b_prod_measure$ B_measure$) B_b_prod_b_prod_measure$)
(declare-fun pair_measure$n (B_a_prod_measure$ B_measure$) B_a_prod_b_prod_measure$)
(declare-fun pair_measure$o (A_a_prod_measure$ B_measure$) A_a_prod_b_prod_measure$)
(declare-fun integrable_on$a (B_c_fun$ B_set$) Bool)
(declare-fun integrable_on$b (A_c_fun$ A_set$) Bool)
(declare-fun integrable_on$c (A_b_prod_a_prod_c_fun$ A_b_prod_a_prod_set$) Bool)
(declare-fun integrable_on$d (B_a_b_prod_prod_c_fun$ B_a_b_prod_prod_set$) Bool)
(declare-fun integrable_on$e (A_a_b_prod_prod_c_fun$ A_a_b_prod_prod_set$) Bool)
(declare-fun integrable_on$f (A_a_prod_c_fun$ A_a_prod_set$) Bool)
(declare-fun integrable_on$g (A_b_b_prod_prod_c_fun$ A_b_b_prod_prod_set$) Bool)
(declare-fun integrable_on$h (A_b_a_prod_prod_c_fun$ A_b_a_prod_prod_set$) Bool)
(declare-fun integrable_on$i (A_a_a_prod_prod_c_fun$ A_a_a_prod_prod_set$) Bool)
(declare-fun lebesgue_integral$ (A_a_prod_measure$ A_a_prod_c_fun$) C$)
(declare-fun pair_sigma_finite$ (A_measure$ A_measure$) Bool)
(declare-fun lebesgue_integral$a (B_a_prod_measure$ B_a_prod_c_fun$) C$)
(declare-fun lebesgue_integral$b (B_b_prod_measure$ B_b_prod_c_fun$) C$)
(declare-fun lebesgue_integral$c (A_measure$ A_c_fun$) C$)
(declare-fun lebesgue_integral$d (B_measure$ B_c_fun$) C$)
(declare-fun lebesgue_integral$e (A_b_prod_measure$ A_b_prod_c_fun$) C$)
(declare-fun pair_sigma_finite$a (A_measure$ B_measure$) Bool)
(declare-fun pair_sigma_finite$b (B_measure$ A_measure$) Bool)
(declare-fun pair_sigma_finite$c (B_measure$ B_measure$) Bool)
(declare-fun pair_sigma_finite$d (A_measure$ A_b_prod_measure$) Bool)
(declare-fun pair_sigma_finite$e (B_measure$ A_b_prod_measure$) Bool)
(declare-fun pair_sigma_finite$f (A_b_prod_measure$ A_measure$) Bool)
(declare-fun pair_sigma_finite$g (A_b_prod_measure$ B_measure$) Bool)
(declare-fun pair_sigma_finite$h (A_b_prod_measure$ A_b_prod_measure$) Bool)
(declare-fun pair_sigma_finite$i (A_measure$ B_b_prod_measure$) Bool)
(declare-fun has_bochner_integral$ (A_b_prod_measure$ A_b_prod_c_fun$ C$) Bool)
(declare-fun sigma_finite_measure$ (A_a_prod_measure$) Bool)
(declare-fun has_bochner_integral$a (B_measure$ B_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$b (A_measure$ A_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$c (A_b_prod_a_prod_measure$ A_b_prod_a_prod_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$d (B_a_b_prod_prod_measure$ B_a_b_prod_prod_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$e (A_a_b_prod_prod_measure$ A_a_b_prod_prod_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$f (A_a_prod_measure$ A_a_prod_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$g (A_b_b_prod_prod_measure$ A_b_b_prod_prod_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$h (A_b_a_prod_prod_measure$ A_b_a_prod_prod_c_fun$ C$) Bool)
(declare-fun has_bochner_integral$i (A_a_a_prod_prod_measure$ A_a_a_prod_prod_c_fun$ C$) Bool)
(declare-fun sigma_finite_measure$a (B_a_prod_measure$) Bool)
(declare-fun sigma_finite_measure$b (B_b_prod_measure$) Bool)
(declare-fun sigma_finite_measure$c (A_b_prod_measure$) Bool)
(declare-fun sigma_finite_measure$d (A_a_b_prod_prod_measure$) Bool)
(declare-fun sigma_finite_measure$e (B_a_b_prod_prod_measure$) Bool)
(declare-fun sigma_finite_measure$f (A_b_prod_a_prod_measure$) Bool)
(declare-fun sigma_finite_measure$g (A_b_prod_b_prod_measure$) Bool)
(declare-fun sigma_finite_measure$h (A_b_prod_a_b_prod_prod_measure$) Bool)
(declare-fun sigma_finite_measure$i (A_b_b_prod_prod_measure$) Bool)
(declare-fun simple_bochner_integrable$ (A_b_prod_measure$ A_b_prod_c_fun$) Bool)
(declare-fun simple_bochner_integrable$a (B_measure$ B_c_fun$) Bool)
(declare-fun simple_bochner_integrable$b (A_measure$ A_c_fun$) Bool)
(declare-fun simple_bochner_integrable$c (A_b_prod_a_prod_measure$ A_b_prod_a_prod_c_fun$) Bool)
(declare-fun simple_bochner_integrable$d (B_a_b_prod_prod_measure$ B_a_b_prod_prod_c_fun$) Bool)
(declare-fun simple_bochner_integrable$e (A_a_b_prod_prod_measure$ A_a_b_prod_prod_c_fun$) Bool)
(declare-fun simple_bochner_integrable$f (A_a_prod_measure$ A_a_prod_c_fun$) Bool)
(declare-fun simple_bochner_integrable$g (A_b_b_prod_prod_measure$ A_b_b_prod_prod_c_fun$) Bool)
(declare-fun simple_bochner_integrable$h (A_b_a_prod_prod_measure$ A_b_a_prod_prod_c_fun$) Bool)
(declare-fun simple_bochner_integrable$i (A_a_a_prod_prod_measure$ A_a_a_prod_prod_c_fun$) Bool)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uua$ ?v0) (integral$ top$ (fun_app$a uu$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_a_prod_b_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uvy$ ?v0) ?v1) (lebesgue_integral$ lborel$ (fun_app$b (uvx$ ?v0) ?v1))) :pattern ((fun_app$ (uvy$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B_a_prod_b_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uvw$ ?v0) ?v1) (lebesgue_integral$a lborel$a (fun_app$c (uvv$ ?v0) ?v1))) :pattern ((fun_app$ (uvw$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B_b_prod_b_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uvu$ ?v0) ?v1) (lebesgue_integral$b lborel$b (fun_app$d (uvt$ ?v0) ?v1))) :pattern ((fun_app$ (uvu$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_c_fun_fun$) (?v1 A$)) (! (= (fun_app$e (uvs$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$f (uvr$ ?v0) ?v1))) :pattern ((fun_app$e (uvs$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 B_a_c_fun_fun$) (?v1 A$)) (! (= (fun_app$e (uvq$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$g (uvp$ ?v0) ?v1))) :pattern ((fun_app$e (uvq$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 B_b_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uvo$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$h (uvn$ ?v0) ?v1))) :pattern ((fun_app$ (uvo$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_c_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uvm$ ?v0) ?v1) (lebesgue_integral$e lborel$e (fun_app$j (uvl$ ?v0) ?v1))) :pattern ((fun_app$i (uvm$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 B_a_b_prod_c_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uvk$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$k (uvj$ ?v0) ?v1))) :pattern ((fun_app$i (uvk$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A_a_b_prod_c_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uvi$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$l (uvh$ ?v0) ?v1))) :pattern ((fun_app$i (uvi$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uvg$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$a (uvf$ ?v0) ?v1))) :pattern ((fun_app$ (uvg$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 B_a_a_prod_prod_c_fun$) (?v1 B$)) (! (= (fun_app$ (uuu$ ?v0) ?v1) (lebesgue_integral$ lborel$ (fun_app$b (uut$ ?v0) ?v1))) :pattern ((fun_app$ (uuu$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 B_b_a_prod_prod_c_fun$) (?v1 B$)) (! (= (fun_app$ (uus$ ?v0) ?v1) (lebesgue_integral$a lborel$a (fun_app$c (uur$ ?v0) ?v1))) :pattern ((fun_app$ (uus$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 B_b_b_prod_prod_c_fun$) (?v1 B$)) (! (= (fun_app$ (uuq$ ?v0) ?v1) (lebesgue_integral$b lborel$b (fun_app$d (uup$ ?v0) ?v1))) :pattern ((fun_app$ (uuq$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_prod_c_fun$) (?v1 A$)) (! (= (fun_app$e (uuo$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$f (uun$ ?v0) ?v1))) :pattern ((fun_app$e (uuo$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 B_a_prod_c_fun$) (?v1 B$)) (! (= (fun_app$ (uum$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$a (uul$ ?v0) ?v1))) :pattern ((fun_app$ (uum$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 B_b_prod_c_fun$) (?v1 B$)) (! (= (fun_app$ (uuk$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$h (uuj$ ?v0) ?v1))) :pattern ((fun_app$ (uuk$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_c_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uui$ ?v0) ?v1) (lebesgue_integral$e lborel$e (fun_app$j (uuh$ ?v0) ?v1))) :pattern ((fun_app$i (uui$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 A_b_prod_b_prod_c_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uug$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$k (uuf$ ?v0) ?v1))) :pattern ((fun_app$i (uug$ ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 A_b_prod_a_prod_c_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uue$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$l (uud$ ?v0) ?v1))) :pattern ((fun_app$i (uue$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A_b_prod_c_fun$) (?v1 A$)) (! (= (fun_app$e (uuc$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$g (uub$ ?v0) ?v1))) :pattern ((fun_app$e (uuc$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_c_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uuy$ ?v0) ?v1) (lebesgue_integral$e lborel$e (fun_app$j ?v0 ?v1))) :pattern ((fun_app$i (uuy$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 A_b_prod_b_c_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uux$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$k ?v0 ?v1))) :pattern ((fun_app$i (uux$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 A_b_prod_a_c_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$i (uuw$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$l ?v0 ?v1))) :pattern ((fun_app$i (uuw$ ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 B_b_b_prod_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uvc$ ?v0) ?v1) (lebesgue_integral$b lborel$b (fun_app$d ?v0 ?v1))) :pattern ((fun_app$ (uvc$ ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 B_b_a_prod_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uvd$ ?v0) ?v1) (lebesgue_integral$a lborel$a (fun_app$c ?v0 ?v1))) :pattern ((fun_app$ (uvd$ ?v0) ?v1)))) :named a25))
(assert (! (forall ((?v0 B_a_a_prod_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uve$ ?v0) ?v1) (lebesgue_integral$ lborel$ (fun_app$b ?v0 ?v1))) :pattern ((fun_app$ (uve$ ?v0) ?v1)))) :named a26))
(assert (! (forall ((?v0 B_b_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uuz$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$h ?v0 ?v1))) :pattern ((fun_app$ (uuz$ ?v0) ?v1)))) :named a27))
(assert (! (forall ((?v0 B_a_c_fun_fun$) (?v1 B$)) (! (= (fun_app$ (uva$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$a ?v0 ?v1))) :pattern ((fun_app$ (uva$ ?v0) ?v1)))) :named a28))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 A$)) (! (= (fun_app$e (uuv$ ?v0) ?v1) (lebesgue_integral$d lborel$d (fun_app$g ?v0 ?v1))) :pattern ((fun_app$e (uuv$ ?v0) ?v1)))) :named a29))
(assert (! (forall ((?v0 A_a_c_fun_fun$) (?v1 A$)) (! (= (fun_app$e (uvb$ ?v0) ?v1) (lebesgue_integral$c lborel$c (fun_app$f ?v0 ?v1))) :pattern ((fun_app$e (uvb$ ?v0) ?v1)))) :named a30))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$e (fun_app$a uu$ ?v0) ?v1) (fun_app$i f$ (pair$ ?v1 ?v0))) :pattern ((fun_app$e (fun_app$a uu$ ?v0) ?v1)))) :named a31))
(assert (! (forall ((?v0 B_b_prod_b_c_fun_fun$) (?v1 B$) (?v2 B_b_prod$)) (! (= (fun_app$m (fun_app$d (uvt$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$n ?v0 ?v2) ?v1)) :pattern ((fun_app$m (fun_app$d (uvt$ ?v0) ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 B_a_prod_b_c_fun_fun$) (?v1 B$) (?v2 B_a_prod$)) (! (= (fun_app$o (fun_app$c (uvv$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$p ?v0 ?v2) ?v1)) :pattern ((fun_app$o (fun_app$c (uvv$ ?v0) ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_c_fun_fun$) (?v1 A_b_prod$) (?v2 A_b_prod$)) (! (= (fun_app$i (fun_app$j (uvl$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$j ?v0 ?v2) ?v1)) :pattern ((fun_app$i (fun_app$j (uvl$ ?v0) ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 A_a_prod_b_c_fun_fun$) (?v1 B$) (?v2 A_a_prod$)) (! (= (fun_app$q (fun_app$b (uvx$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$r ?v0 ?v2) ?v1)) :pattern ((fun_app$q (fun_app$b (uvx$ ?v0) ?v1) ?v2)))) :named a35))
(assert (! (forall ((?v0 B_a_b_prod_c_fun_fun$) (?v1 A_b_prod$) (?v2 B$)) (! (= (fun_app$ (fun_app$k (uvj$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$s ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$k (uvj$ ?v0) ?v1) ?v2)))) :named a36))
(assert (! (forall ((?v0 B_b_c_fun_fun$) (?v1 B$) (?v2 B$)) (! (= (fun_app$ (fun_app$h (uvn$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$h ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$h (uvn$ ?v0) ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 B_a_c_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$ (fun_app$g (uvp$ ?v0) ?v1) ?v2) (fun_app$e (fun_app$a ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$g (uvp$ ?v0) ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_b_prod_c_fun_fun$) (?v1 A_b_prod$) (?v2 A$)) (! (= (fun_app$e (fun_app$l (uvh$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$t ?v0 ?v2) ?v1)) :pattern ((fun_app$e (fun_app$l (uvh$ ?v0) ?v1) ?v2)))) :named a39))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 B$) (?v2 A$)) (! (= (fun_app$e (fun_app$a (uvf$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$g ?v0 ?v2) ?v1)) :pattern ((fun_app$e (fun_app$a (uvf$ ?v0) ?v1) ?v2)))) :named a40))
(assert (! (forall ((?v0 A_a_c_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$e (fun_app$f (uvr$ ?v0) ?v1) ?v2) (fun_app$e (fun_app$f ?v0 ?v2) ?v1)) :pattern ((fun_app$e (fun_app$f (uvr$ ?v0) ?v1) ?v2)))) :named a41))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_c_fun$) (?v1 A_b_prod$) (?v2 A_b_prod$)) (! (= (fun_app$i (fun_app$j (uuh$ ?v0) ?v1) ?v2) (fun_app$u ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$i (fun_app$j (uuh$ ?v0) ?v1) ?v2)))) :named a42))
(assert (! (forall ((?v0 A_b_prod_b_prod_c_fun$) (?v1 A_b_prod$) (?v2 B$)) (! (= (fun_app$ (fun_app$k (uuf$ ?v0) ?v1) ?v2) (fun_app$v ?v0 (pair$b ?v1 ?v2))) :pattern ((fun_app$ (fun_app$k (uuf$ ?v0) ?v1) ?v2)))) :named a43))
(assert (! (forall ((?v0 A_b_prod_a_prod_c_fun$) (?v1 A_b_prod$) (?v2 A$)) (! (= (fun_app$e (fun_app$l (uud$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (pair$c ?v1 ?v2))) :pattern ((fun_app$e (fun_app$l (uud$ ?v0) ?v1) ?v2)))) :named a44))
(assert (! (forall ((?v0 B_b_b_prod_prod_c_fun$) (?v1 B$) (?v2 B_b_prod$)) (! (= (fun_app$m (fun_app$d (uup$ ?v0) ?v1) ?v2) (fun_app$x ?v0 (pair$d ?v1 ?v2))) :pattern ((fun_app$m (fun_app$d (uup$ ?v0) ?v1) ?v2)))) :named a45))
(assert (! (forall ((?v0 B_b_a_prod_prod_c_fun$) (?v1 B$) (?v2 B_a_prod$)) (! (= (fun_app$o (fun_app$c (uur$ ?v0) ?v1) ?v2) (fun_app$y ?v0 (pair$e ?v1 ?v2))) :pattern ((fun_app$o (fun_app$c (uur$ ?v0) ?v1) ?v2)))) :named a46))
(assert (! (forall ((?v0 B_a_a_prod_prod_c_fun$) (?v1 B$) (?v2 A_a_prod$)) (! (= (fun_app$q (fun_app$b (uut$ ?v0) ?v1) ?v2) (fun_app$z ?v0 (pair$f ?v1 ?v2))) :pattern ((fun_app$q (fun_app$b (uut$ ?v0) ?v1) ?v2)))) :named a47))
(assert (! (forall ((?v0 B_b_prod_c_fun$) (?v1 B$) (?v2 B$)) (! (= (fun_app$ (fun_app$h (uuj$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (pair$g ?v1 ?v2))) :pattern ((fun_app$ (fun_app$h (uuj$ ?v0) ?v1) ?v2)))) :named a48))
(assert (! (forall ((?v0 B_a_prod_c_fun$) (?v1 B$) (?v2 A$)) (! (= (fun_app$e (fun_app$a (uul$ ?v0) ?v1) ?v2) (fun_app$o ?v0 (pair$h ?v1 ?v2))) :pattern ((fun_app$e (fun_app$a (uul$ ?v0) ?v1) ?v2)))) :named a49))
(assert (! (forall ((?v0 A_b_prod_c_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$ (fun_app$g (uub$ ?v0) ?v1) ?v2) (fun_app$i ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$g (uub$ ?v0) ?v1) ?v2)))) :named a50))
(assert (! (forall ((?v0 A_a_prod_c_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$e (fun_app$f (uun$ ?v0) ?v1) ?v2) (fun_app$q ?v0 (pair$i ?v1 ?v2))) :pattern ((fun_app$e (fun_app$f (uun$ ?v0) ?v1) ?v2)))) :named a51))
(assert (! (not (integrable$ (pair_measure$ lborel$c lborel$d) f$)) :named a52))
(assert (! (integrable$ lborel$e f$) :named a53))
(assert (! (= (pair_measure$a lborel$c lborel$c) lborel$) :named a54))
(assert (! (= (pair_measure$b lborel$d lborel$c) lborel$a) :named a55))
(assert (! (= (pair_measure$c lborel$d lborel$d) lborel$b) :named a56))
(assert (! (= (pair_measure$ lborel$c lborel$d) lborel$e) :named a57))
(assert (! (= (pair_measure$d lborel$c lborel$e) lborel$f) :named a58))
(assert (! (= (pair_measure$e lborel$d lborel$e) lborel$g) :named a59))
(assert (! (= (pair_measure$f lborel$e lborel$c) lborel$h) :named a60))
(assert (! (= (pair_measure$g lborel$e lborel$d) lborel$i) :named a61))
(assert (! (= (pair_measure$h lborel$e lborel$e) lborel$j) :named a62))
(assert (! (= (pair_measure$i lborel$c lborel$b) lborel$k) :named a63))
(assert (! (member$ f$ (measurable$ lborel$e borel$)) :named a64))
(assert (! (sigma_finite_measure$ (pair_measure$a lborel$c lborel$c)) :named a65))
(assert (! (sigma_finite_measure$a (pair_measure$b lborel$d lborel$c)) :named a66))
(assert (! (sigma_finite_measure$b (pair_measure$c lborel$d lborel$d)) :named a67))
(assert (! (sigma_finite_measure$c (pair_measure$ lborel$c lborel$d)) :named a68))
(assert (! (sigma_finite_measure$d (pair_measure$d lborel$c lborel$e)) :named a69))
(assert (! (sigma_finite_measure$e (pair_measure$e lborel$d lborel$e)) :named a70))
(assert (! (sigma_finite_measure$f (pair_measure$f lborel$e lborel$c)) :named a71))
(assert (! (sigma_finite_measure$g (pair_measure$g lborel$e lborel$d)) :named a72))
(assert (! (sigma_finite_measure$h (pair_measure$h lborel$e lborel$e)) :named a73))
(assert (! (sigma_finite_measure$i (pair_measure$i lborel$c lborel$b)) :named a74))
(assert (! (member$a uua$ (measurable$a lborel$d borel$)) :named a75))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (=> (simple_bochner_integrable$ ?v0 ?v1) (integrable$ ?v0 ?v1))) :named a76))
(assert (! (forall ((?v0 B_measure$) (?v1 B_c_fun$)) (=> (simple_bochner_integrable$a ?v0 ?v1) (integrable$a ?v0 ?v1))) :named a77))
(assert (! (forall ((?v0 A_measure$) (?v1 A_c_fun$)) (=> (simple_bochner_integrable$b ?v0 ?v1) (integrable$b ?v0 ?v1))) :named a78))
(assert (! (forall ((?v0 A_b_prod_a_prod_measure$) (?v1 A_b_prod_a_prod_c_fun$)) (=> (simple_bochner_integrable$c ?v0 ?v1) (integrable$c ?v0 ?v1))) :named a79))
(assert (! (forall ((?v0 B_a_b_prod_prod_measure$) (?v1 B_a_b_prod_prod_c_fun$)) (=> (simple_bochner_integrable$d ?v0 ?v1) (integrable$d ?v0 ?v1))) :named a80))
(assert (! (forall ((?v0 A_a_b_prod_prod_measure$) (?v1 A_a_b_prod_prod_c_fun$)) (=> (simple_bochner_integrable$e ?v0 ?v1) (integrable$e ?v0 ?v1))) :named a81))
(assert (! (forall ((?v0 A_a_prod_measure$) (?v1 A_a_prod_c_fun$)) (=> (simple_bochner_integrable$f ?v0 ?v1) (integrable$f ?v0 ?v1))) :named a82))
(assert (! (forall ((?v0 A_b_b_prod_prod_measure$) (?v1 A_b_b_prod_prod_c_fun$)) (=> (simple_bochner_integrable$g ?v0 ?v1) (integrable$g ?v0 ?v1))) :named a83))
(assert (! (forall ((?v0 A_b_a_prod_prod_measure$) (?v1 A_b_a_prod_prod_c_fun$)) (=> (simple_bochner_integrable$h ?v0 ?v1) (integrable$h ?v0 ?v1))) :named a84))
(assert (! (forall ((?v0 A_a_a_prod_prod_measure$) (?v1 A_a_a_prod_prod_c_fun$)) (=> (simple_bochner_integrable$i ?v0 ?v1) (integrable$i ?v0 ?v1))) :named a85))
(assert (! (forall ((?v0 A_b_prod_c_fun$)) (=> (integrable$ (pair_measure$ lborel$c lborel$d) ?v0) (integrable$b lborel$c (uuc$ ?v0)))) :named a86))
(assert (! (forall ((?v0 A_b_prod_a_prod_c_fun$)) (=> (integrable$c (pair_measure$f lborel$e lborel$c) ?v0) (integrable$ lborel$e (uue$ ?v0)))) :named a87))
(assert (! (forall ((?v0 A_b_prod_b_prod_c_fun$)) (=> (integrable$j (pair_measure$g lborel$e lborel$d) ?v0) (integrable$ lborel$e (uug$ ?v0)))) :named a88))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_c_fun$)) (=> (integrable$k (pair_measure$h lborel$e lborel$e) ?v0) (integrable$ lborel$e (uui$ ?v0)))) :named a89))
(assert (! (forall ((?v0 B_b_prod_c_fun$)) (=> (integrable$l (pair_measure$c lborel$d lborel$d) ?v0) (integrable$a lborel$d (uuk$ ?v0)))) :named a90))
(assert (! (forall ((?v0 B_a_prod_c_fun$)) (=> (integrable$m (pair_measure$b lborel$d lborel$c) ?v0) (integrable$a lborel$d (uum$ ?v0)))) :named a91))
(assert (! (forall ((?v0 A_a_prod_c_fun$)) (=> (integrable$f (pair_measure$a lborel$c lborel$c) ?v0) (integrable$b lborel$c (uuo$ ?v0)))) :named a92))
(assert (! (forall ((?v0 B_b_b_prod_prod_c_fun$)) (=> (integrable$n (pair_measure$j lborel$d lborel$b) ?v0) (integrable$a lborel$d (uuq$ ?v0)))) :named a93))
(assert (! (forall ((?v0 B_b_a_prod_prod_c_fun$)) (=> (integrable$o (pair_measure$k lborel$d lborel$a) ?v0) (integrable$a lborel$d (uus$ ?v0)))) :named a94))
(assert (! (forall ((?v0 B_a_a_prod_prod_c_fun$)) (=> (integrable$p (pair_measure$l lborel$d lborel$) ?v0) (integrable$a lborel$d (uuu$ ?v0)))) :named a95))
(assert (! (forall ((?v0 A_b_c_fun_fun$)) (=> (integrable$ (pair_measure$ lborel$c lborel$d) (case_prod$ ?v0)) (integrable$b lborel$c (uuv$ ?v0)))) :named a96))
(assert (! (forall ((?v0 A_b_prod_a_c_fun_fun$)) (=> (integrable$c (pair_measure$f lborel$e lborel$c) (case_prod$a ?v0)) (integrable$ lborel$e (uuw$ ?v0)))) :named a97))
(assert (! (forall ((?v0 A_b_prod_b_c_fun_fun$)) (=> (integrable$j (pair_measure$g lborel$e lborel$d) (case_prod$b ?v0)) (integrable$ lborel$e (uux$ ?v0)))) :named a98))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_c_fun_fun$)) (=> (integrable$k (pair_measure$h lborel$e lborel$e) (case_prod$c ?v0)) (integrable$ lborel$e (uuy$ ?v0)))) :named a99))
(assert (! (forall ((?v0 B_b_c_fun_fun$)) (=> (integrable$l (pair_measure$c lborel$d lborel$d) (case_prod$d ?v0)) (integrable$a lborel$d (uuz$ ?v0)))) :named a100))
(assert (! (forall ((?v0 B_a_c_fun_fun$)) (=> (integrable$m (pair_measure$b lborel$d lborel$c) (case_prod$e ?v0)) (integrable$a lborel$d (uva$ ?v0)))) :named a101))
(assert (! (forall ((?v0 A_a_c_fun_fun$)) (=> (integrable$f (pair_measure$a lborel$c lborel$c) (case_prod$f ?v0)) (integrable$b lborel$c (uvb$ ?v0)))) :named a102))
(assert (! (forall ((?v0 B_b_b_prod_c_fun_fun$)) (=> (integrable$n (pair_measure$j lborel$d lborel$b) (case_prod$g ?v0)) (integrable$a lborel$d (uvc$ ?v0)))) :named a103))
(assert (! (forall ((?v0 B_b_a_prod_c_fun_fun$)) (=> (integrable$o (pair_measure$k lborel$d lborel$a) (case_prod$h ?v0)) (integrable$a lborel$d (uvd$ ?v0)))) :named a104))
(assert (! (forall ((?v0 B_a_a_prod_c_fun_fun$)) (=> (integrable$p (pair_measure$l lborel$d lborel$) (case_prod$i ?v0)) (integrable$a lborel$d (uve$ ?v0)))) :named a105))
(assert (! (forall ((?v0 A_b_c_fun_fun$)) (=> (integrable$ (pair_measure$ lborel$c lborel$d) (case_prod$ ?v0)) (integrable$a lborel$d (uvg$ ?v0)))) :named a106))
(assert (! (forall ((?v0 A_a_b_prod_c_fun_fun$)) (=> (integrable$e (pair_measure$d lborel$c lborel$e) (case_prod$j ?v0)) (integrable$ lborel$e (uvi$ ?v0)))) :named a107))
(assert (! (forall ((?v0 B_a_b_prod_c_fun_fun$)) (=> (integrable$d (pair_measure$e lborel$d lborel$e) (case_prod$k ?v0)) (integrable$ lborel$e (uvk$ ?v0)))) :named a108))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_c_fun_fun$)) (=> (integrable$k (pair_measure$h lborel$e lborel$e) (case_prod$c ?v0)) (integrable$ lborel$e (uvm$ ?v0)))) :named a109))
(assert (! (forall ((?v0 B_b_c_fun_fun$)) (=> (integrable$l (pair_measure$c lborel$d lborel$d) (case_prod$d ?v0)) (integrable$a lborel$d (uvo$ ?v0)))) :named a110))
(assert (! (forall ((?v0 B_a_c_fun_fun$)) (=> (integrable$m (pair_measure$b lborel$d lborel$c) (case_prod$e ?v0)) (integrable$b lborel$c (uvq$ ?v0)))) :named a111))
(assert (! (forall ((?v0 A_a_c_fun_fun$)) (=> (integrable$f (pair_measure$a lborel$c lborel$c) (case_prod$f ?v0)) (integrable$b lborel$c (uvs$ ?v0)))) :named a112))
(assert (! (forall ((?v0 B_b_prod_b_c_fun_fun$)) (=> (integrable$q (pair_measure$m lborel$b lborel$d) (case_prod$l ?v0)) (integrable$a lborel$d (uvu$ ?v0)))) :named a113))
(assert (! (forall ((?v0 B_a_prod_b_c_fun_fun$)) (=> (integrable$r (pair_measure$n lborel$a lborel$d) (case_prod$m ?v0)) (integrable$a lborel$d (uvw$ ?v0)))) :named a114))
(assert (! (forall ((?v0 A_a_prod_b_c_fun_fun$)) (=> (integrable$s (pair_measure$o lborel$ lborel$d) (case_prod$n ?v0)) (integrable$a lborel$d (uvy$ ?v0)))) :named a115))
(assert (! (pair_sigma_finite$ lborel$c lborel$c) :named a116))
(assert (! (pair_sigma_finite$a lborel$c lborel$d) :named a117))
(assert (! (pair_sigma_finite$b lborel$d lborel$c) :named a118))
(assert (! (pair_sigma_finite$c lborel$d lborel$d) :named a119))
(assert (! (pair_sigma_finite$d lborel$c lborel$e) :named a120))
(assert (! (pair_sigma_finite$e lborel$d lborel$e) :named a121))
(assert (! (pair_sigma_finite$f lborel$e lborel$c) :named a122))
(assert (! (pair_sigma_finite$g lborel$e lborel$d) :named a123))
(assert (! (pair_sigma_finite$h lborel$e lborel$e) :named a124))
(assert (! (pair_sigma_finite$i lborel$c lborel$b) :named a125))
(assert (! (forall ((?v0 A_b_prod_c_fun$)) (=> (integrable$ lborel$e ?v0) (integrable_on$ ?v0 top$a))) :named a126))
(assert (! (forall ((?v0 B_c_fun$)) (=> (integrable$a lborel$d ?v0) (integrable_on$a ?v0 top$b))) :named a127))
(assert (! (forall ((?v0 A_c_fun$)) (=> (integrable$b lborel$c ?v0) (integrable_on$b ?v0 top$))) :named a128))
(assert (! (forall ((?v0 A_b_prod_a_prod_c_fun$)) (=> (integrable$c lborel$h ?v0) (integrable_on$c ?v0 top$c))) :named a129))
(assert (! (forall ((?v0 B_a_b_prod_prod_c_fun$)) (=> (integrable$d lborel$g ?v0) (integrable_on$d ?v0 top$d))) :named a130))
(assert (! (forall ((?v0 A_a_b_prod_prod_c_fun$)) (=> (integrable$e lborel$f ?v0) (integrable_on$e ?v0 top$e))) :named a131))
(assert (! (forall ((?v0 A_a_prod_c_fun$)) (=> (integrable$f lborel$ ?v0) (integrable_on$f ?v0 top$f))) :named a132))
(assert (! (forall ((?v0 A_b_b_prod_prod_c_fun$)) (=> (integrable$g lborel$k ?v0) (integrable_on$g ?v0 top$g))) :named a133))
(assert (! (forall ((?v0 A_b_a_prod_prod_c_fun$)) (=> (integrable$h lborel$l ?v0) (integrable_on$h ?v0 top$h))) :named a134))
(assert (! (forall ((?v0 A_a_a_prod_prod_c_fun$)) (=> (integrable$i lborel$m ?v0) (integrable_on$i ?v0 top$i))) :named a135))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_measure$) (?v2 A_b_prod_c_fun$) (?v3 A_b_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_b_prod$)) (=> (member$b ?v4 (space$ ?v1)) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v4))))) (= (integrable$ ?v0 ?v2) (integrable$ ?v1 ?v3)))) :named a136))
(assert (! (forall ((?v0 B_measure$) (?v1 B_measure$) (?v2 B_c_fun$) (?v3 B_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$c ?v4 (space$a ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (integrable$a ?v0 ?v2) (integrable$a ?v1 ?v3)))) :named a137))
(assert (! (forall ((?v0 A_measure$) (?v1 A_measure$) (?v2 A_c_fun$) (?v3 A_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$d ?v4 (space$b ?v1)) (= (fun_app$e ?v2 ?v4) (fun_app$e ?v3 ?v4))))) (= (integrable$b ?v0 ?v2) (integrable$b ?v1 ?v3)))) :named a138))
(assert (! (forall ((?v0 A_b_prod_a_prod_measure$) (?v1 A_b_prod_a_prod_measure$) (?v2 A_b_prod_a_prod_c_fun$) (?v3 A_b_prod_a_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_b_prod_a_prod$)) (=> (member$e ?v4 (space$c ?v1)) (= (fun_app$w ?v2 ?v4) (fun_app$w ?v3 ?v4))))) (= (integrable$c ?v0 ?v2) (integrable$c ?v1 ?v3)))) :named a139))
(assert (! (forall ((?v0 B_a_b_prod_prod_measure$) (?v1 B_a_b_prod_prod_measure$) (?v2 B_a_b_prod_prod_c_fun$) (?v3 B_a_b_prod_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B_a_b_prod_prod$)) (=> (member$f ?v4 (space$d ?v1)) (= (fun_app$aa ?v2 ?v4) (fun_app$aa ?v3 ?v4))))) (= (integrable$d ?v0 ?v2) (integrable$d ?v1 ?v3)))) :named a140))
(assert (! (forall ((?v0 A_a_b_prod_prod_measure$) (?v1 A_a_b_prod_prod_measure$) (?v2 A_a_b_prod_prod_c_fun$) (?v3 A_a_b_prod_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_a_b_prod_prod$)) (=> (member$g ?v4 (space$e ?v1)) (= (fun_app$ab ?v2 ?v4) (fun_app$ab ?v3 ?v4))))) (= (integrable$e ?v0 ?v2) (integrable$e ?v1 ?v3)))) :named a141))
(assert (! (forall ((?v0 A_a_prod_measure$) (?v1 A_a_prod_measure$) (?v2 A_a_prod_c_fun$) (?v3 A_a_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_a_prod$)) (=> (member$h ?v4 (space$f ?v1)) (= (fun_app$q ?v2 ?v4) (fun_app$q ?v3 ?v4))))) (= (integrable$f ?v0 ?v2) (integrable$f ?v1 ?v3)))) :named a142))
(assert (! (forall ((?v0 A_b_b_prod_prod_measure$) (?v1 A_b_b_prod_prod_measure$) (?v2 A_b_b_prod_prod_c_fun$) (?v3 A_b_b_prod_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_b_b_prod_prod$)) (=> (member$i ?v4 (space$g ?v1)) (= (fun_app$ac ?v2 ?v4) (fun_app$ac ?v3 ?v4))))) (= (integrable$g ?v0 ?v2) (integrable$g ?v1 ?v3)))) :named a143))
(assert (! (forall ((?v0 A_b_a_prod_prod_measure$) (?v1 A_b_a_prod_prod_measure$) (?v2 A_b_a_prod_prod_c_fun$) (?v3 A_b_a_prod_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_b_a_prod_prod$)) (=> (member$j ?v4 (space$h ?v1)) (= (fun_app$ad ?v2 ?v4) (fun_app$ad ?v3 ?v4))))) (= (integrable$h ?v0 ?v2) (integrable$h ?v1 ?v3)))) :named a144))
(assert (! (forall ((?v0 A_a_a_prod_prod_measure$) (?v1 A_a_a_prod_prod_measure$) (?v2 A_a_a_prod_prod_c_fun$) (?v3 A_a_a_prod_prod_c_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_a_a_prod_prod$)) (=> (member$k ?v4 (space$i ?v1)) (= (fun_app$ae ?v2 ?v4) (fun_app$ae ?v3 ?v4))))) (= (integrable$i ?v0 ?v2) (integrable$i ?v1 ?v3)))) :named a145))
(assert (! (forall ((?v0 A_b_prod_measure$) (?v1 A_b_prod_c_fun$)) (=> (and (integrable$ ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$ ?v0 ?v1 ?v2) false))) false)) :named a146))
(assert (! (forall ((?v0 B_measure$) (?v1 B_c_fun$)) (=> (and (integrable$a ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$a ?v0 ?v1 ?v2) false))) false)) :named a147))
(assert (! (forall ((?v0 A_measure$) (?v1 A_c_fun$)) (=> (and (integrable$b ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$b ?v0 ?v1 ?v2) false))) false)) :named a148))
(assert (! (forall ((?v0 A_b_prod_a_prod_measure$) (?v1 A_b_prod_a_prod_c_fun$)) (=> (and (integrable$c ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$c ?v0 ?v1 ?v2) false))) false)) :named a149))
(assert (! (forall ((?v0 B_a_b_prod_prod_measure$) (?v1 B_a_b_prod_prod_c_fun$)) (=> (and (integrable$d ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$d ?v0 ?v1 ?v2) false))) false)) :named a150))
(assert (! (forall ((?v0 A_a_b_prod_prod_measure$) (?v1 A_a_b_prod_prod_c_fun$)) (=> (and (integrable$e ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$e ?v0 ?v1 ?v2) false))) false)) :named a151))
(assert (! (forall ((?v0 A_a_prod_measure$) (?v1 A_a_prod_c_fun$)) (=> (and (integrable$f ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$f ?v0 ?v1 ?v2) false))) false)) :named a152))
(assert (! (forall ((?v0 A_b_b_prod_prod_measure$) (?v1 A_b_b_prod_prod_c_fun$)) (=> (and (integrable$g ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$g ?v0 ?v1 ?v2) false))) false)) :named a153))
(assert (! (forall ((?v0 A_b_a_prod_prod_measure$) (?v1 A_b_a_prod_prod_c_fun$)) (=> (and (integrable$h ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$h ?v0 ?v1 ?v2) false))) false)) :named a154))
(assert (! (forall ((?v0 A_a_a_prod_prod_measure$) (?v1 A_a_a_prod_prod_c_fun$)) (=> (and (integrable$i ?v0 ?v1) (forall ((?v2 C$)) (=> (has_bochner_integral$i ?v0 ?v1 ?v2) false))) false)) :named a155))
(check-sat)
;;;;(get-proof)
