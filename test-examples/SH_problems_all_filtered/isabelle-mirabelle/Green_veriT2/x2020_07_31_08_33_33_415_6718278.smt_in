; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort Num$ 0)
(declare-fun x$ () Real)
(declare-fun one$ () Num$)
(declare-fun times$ (Real Real) Real)
(declare-fun divide$ (Real Real) Real)
(declare-fun less_eq$ (Num$ Num$) Bool)
(declare-fun numeral$ (Num$) Real)
(assert (! (not (<= 0.0 (- (divide$ 1.0 4.0) (times$ x$ x$)))) :named a0))
(assert (! (and (<= (divide$ (- 1.0) 2.0) x$) (<= x$ (divide$ 1.0 2.0))) :named a1))
(assert (! (<= 0.0 (- (divide$ 1.0 4.0) (times$ x$ x$))) :named a2))
(assert (! (forall ((?v0 Num$)) (= (<= (numeral$ ?v0) 1.0) (less_eq$ ?v0 one$))) :named a3))
(assert (! (forall ((?v0 Real) (?v1 Num$) (?v2 Real)) (= (= (divide$ ?v0 (numeral$ ?v1)) ?v2) (ite (not (= (numeral$ ?v1) 0.0)) (= ?v0 (times$ ?v2 (numeral$ ?v1))) (= ?v2 0.0)))) :named a4))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (= ?v0 (divide$ ?v1 (numeral$ ?v2))) (ite (not (= (numeral$ ?v2) 0.0)) (= (times$ ?v0 (numeral$ ?v2)) ?v1) (= ?v0 0.0)))) :named a5))
(assert (! (forall ((?v0 Real) (?v1 Num$) (?v2 Real)) (= (<= (divide$ ?v0 (numeral$ ?v1)) ?v2) (<= ?v0 (times$ ?v2 (numeral$ ?v1))))) :named a6))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (<= ?v0 (divide$ ?v1 (numeral$ ?v2))) (<= (times$ ?v0 (numeral$ ?v2)) ?v1))) :named a7))
(assert (! (forall ((?v0 Real) (?v1 Real)) (=> (not (= ?v0 0.0)) (= (divide$ ?v0 (times$ ?v0 ?v1)) (divide$ 1.0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Real) (?v1 Real)) (=> (not (= ?v0 0.0)) (= (divide$ ?v0 (times$ ?v1 ?v0)) (divide$ 1.0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Real)) (= (<= (divide$ 1.0 ?v0) 0.0) (<= ?v0 0.0))) :named a10))
(assert (! (forall ((?v0 Real)) (= (<= 0.0 (divide$ 1.0 ?v0)) (<= 0.0 ?v0))) :named a11))
(check-sat)
;;;;(get-proof)
