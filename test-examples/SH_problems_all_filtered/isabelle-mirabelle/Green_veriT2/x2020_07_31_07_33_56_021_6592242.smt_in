; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort A_filter$ 0)
(declare-sort A_measure$ 0)
(declare-sort B_measure$ 0)
(declare-sort C_measure$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_c_fun_set$ 0)
(declare-sort A_set_a_set_prod$ 0)
(declare-sort A_set_b_set_prod$ 0)
(declare-sort B_set_a_set_prod$ 0)
(declare-sort B_set_b_set_prod$ 0)
(declare-sort A_c_fun_set_a_set_prod$ 0)
(declare-sort A_c_fun_set_b_set_prod$ 0)
(declare-sort A_set_a_c_fun_set_prod$ 0)
(declare-sort B_set_a_c_fun_set_prod$ 0)
(declare-sort A_set_a_set_a_set_prod_prod$ 0)
(declare-sort A_set_a_set_b_set_prod_prod$ 0)
(declare-sort A_set_b_set_a_set_prod_prod$ 0)
(declare-sort A_set_b_set_b_set_prod_prod$ 0)
(declare-fun f$ (A_b_prod$) C$)
(declare-fun uu$ (A$) B_c_fun$)
(declare-fun top$ () B_set$)
(declare-fun uua$ () A_c_fun$)
(declare-fun uub$ () A_c_fun$)
(declare-fun uuc$ () A_bool_fun$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun top$a () A_set$)
(declare-fun top$b () A_c_fun_set$)
(declare-fun top$c () A_set_a_set_prod$)
(declare-fun top$d () A_set_b_set_prod$)
(declare-fun top$e () B_set_a_set_prod$)
(declare-fun top$f () B_set_b_set_prod$)
(declare-fun top$g () A_set_a_c_fun_set_prod$)
(declare-fun top$h () B_set_a_c_fun_set_prod$)
(declare-fun top$i () A_c_fun_set_a_set_prod$)
(declare-fun top$j () A_c_fun_set_b_set_prod$)
(declare-fun top$k () A_set_b_set_b_set_prod_prod$)
(declare-fun top$l () A_set_b_set_a_set_prod_prod$)
(declare-fun borel$ () C_measure$)
(declare-fun pair$a (A_set$ B_set_b_set_prod$) A_set_b_set_b_set_prod_prod$)
(declare-fun pair$b (A_set$ B_set_a_set_prod$) A_set_b_set_a_set_prod_prod$)
(declare-fun pair$c (A_set$ A_set_b_set_prod$) A_set_a_set_b_set_prod_prod$)
(declare-fun pair$d (A_set$ A_set_a_set_prod$) A_set_a_set_a_set_prod_prod$)
(declare-fun pair$e (A_set$ A_c_fun_set$) A_set_a_c_fun_set_prod$)
(declare-fun pair$f (B_set$ B_set$) B_set_b_set_prod$)
(declare-fun pair$g (B_set$ A_set$) B_set_a_set_prod$)
(declare-fun pair$h (A_set$ B_set$) A_set_b_set_prod$)
(declare-fun pair$i (A_set$ A_set$) A_set_a_set_prod$)
(declare-fun pair$j (B_set$ A_c_fun_set$) B_set_a_c_fun_set_prod$)
(declare-fun pair$k (A_c_fun_set$ A_set$) A_c_fun_set_a_set_prod$)
(declare-fun pair$l (A_c_fun_set$ B_set$) A_c_fun_set_b_set_prod$)
(declare-fun lborel$ () B_measure$)
(declare-fun member$ (A_c_fun$ A_c_fun_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lborel$a () A_measure$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (B$ B_set$) Bool)
(declare-fun fun_app$a (A_c_fun$ A$) C$)
(declare-fun fun_app$b (B_c_fun$ B$) C$)
(declare-fun integral$ (B_set$ B_c_fun$) C$)
(declare-fun ae_filter$ (A_measure$) A_filter$)
(declare-fun integral$a (A_set$ A_c_fun$) C$)
(declare-fun eventually$ (A_bool_fun$ A_filter$) Bool)
(declare-fun integrable$ (A_measure$ A_c_fun$) Bool)
(declare-fun measurable$ (A_measure$ C_measure$) A_c_fun_set$)
(declare-fun integrable_on$ (A_c_fun$ A_set$) Bool)
(declare-fun lebesgue_integral$ (B_measure$ B_c_fun$) C$)
(declare-fun lebesgue_integral$a (A_measure$ A_c_fun$) C$)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uuc$ ?v0) (= (lebesgue_integral$ lborel$ (uu$ ?v0)) (integral$ top$ (uu$ ?v0)))) :pattern ((fun_app$ uuc$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a uub$ ?v0) (integral$ top$ (uu$ ?v0))) :pattern ((fun_app$a uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a uua$ ?v0) (lebesgue_integral$ lborel$ (uu$ ?v0))) :pattern ((fun_app$a uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (f$ (pair$ ?v0 ?v1))) :pattern ((fun_app$b (uu$ ?v0) ?v1)))) :named a3))
(assert (! (not (= (lebesgue_integral$a lborel$a uua$) (integral$a top$a uub$))) :named a4))
(assert (! (= (lebesgue_integral$a lborel$a uua$) (lebesgue_integral$a lborel$a uub$)) :named a5))
(assert (! (= (lebesgue_integral$a lborel$a uub$) (integral$a top$a uub$)) :named a6))
(assert (! (integrable_on$ uub$ top$a) :named a7))
(assert (! (integrable$ lborel$a uua$) :named a8))
(assert (! (integrable$ lborel$a uub$) :named a9))
(assert (! (member$ uub$ (measurable$ lborel$a borel$)) :named a10))
(assert (! (forall ((?v0 A_set$) (?v1 B_set_b_set_prod$) (?v2 A_set$) (?v3 B_set_b_set_prod$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A_set$) (?v1 B_set_a_set_prod$) (?v2 A_set$) (?v3 B_set_a_set_prod$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_set$) (?v1 A_set_b_set_prod$) (?v2 A_set$) (?v3 A_set_b_set_prod$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_set$) (?v1 A_set_a_set_prod$) (?v2 A_set$) (?v3 A_set_a_set_prod$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A_set$) (?v1 A_c_fun_set$) (?v2 A_set$) (?v3 A_c_fun_set$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$) (?v3 B_set$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 B_set$) (?v1 A_set$) (?v2 B_set$) (?v3 A_set$)) (= (= (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_set$) (?v1 B_set$) (?v2 A_set$) (?v3 B_set$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$) (?v3 A_set$)) (= (= (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A_set$) (?v1 B_set_b_set_prod$) (?v2 A_set$) (?v3 B_set_b_set_prod$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a21))
(assert (! (forall ((?v0 A_set$) (?v1 B_set_a_set_prod$) (?v2 A_set$) (?v3 B_set_a_set_prod$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a22))
(assert (! (forall ((?v0 A_set$) (?v1 A_set_b_set_prod$) (?v2 A_set$) (?v3 A_set_b_set_prod$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a23))
(assert (! (forall ((?v0 A_set$) (?v1 A_set_a_set_prod$) (?v2 A_set$) (?v3 A_set_a_set_prod$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a24))
(assert (! (forall ((?v0 A_set$) (?v1 A_c_fun_set$) (?v2 A_set$) (?v3 A_c_fun_set$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a25))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_set$) (?v3 B_set$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a26))
(assert (! (forall ((?v0 B_set$) (?v1 A_set$) (?v2 B_set$) (?v3 A_set$)) (= (= (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a27))
(assert (! (forall ((?v0 A_set$) (?v1 B_set$) (?v2 A_set$) (?v3 B_set$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a28))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$) (?v3 A_set$)) (= (= (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a30))
(assert (! (forall ((?v0 A_c_fun$)) (member$ ?v0 top$b)) :named a31))
(assert (! (forall ((?v0 A$)) (member$a ?v0 top$a)) :named a32))
(assert (! (forall ((?v0 B$)) (member$b ?v0 top$)) :named a33))
(assert (! (forall ((?v0 A_c_fun$)) (= (member$ ?v0 top$b) true)) :named a34))
(assert (! (forall ((?v0 A$)) (= (member$a ?v0 top$a) true)) :named a35))
(assert (! (forall ((?v0 B$)) (= (member$b ?v0 top$) true)) :named a36))
(assert (! (eventually$ uuc$ (ae_filter$ lborel$a)) :named a37))
(assert (! (= top$c (pair$i top$a top$a)) :named a38))
(assert (! (= top$d (pair$h top$a top$)) :named a39))
(assert (! (= top$e (pair$g top$ top$a)) :named a40))
(assert (! (= top$f (pair$f top$ top$)) :named a41))
(assert (! (= top$g (pair$e top$a top$b)) :named a42))
(assert (! (= top$h (pair$j top$ top$b)) :named a43))
(assert (! (= top$i (pair$k top$b top$a)) :named a44))
(assert (! (= top$j (pair$l top$b top$)) :named a45))
(assert (! (= top$k (pair$a top$a top$f)) :named a46))
(assert (! (= top$l (pair$b top$a top$e)) :named a47))
(check-sat)
;;;;(get-proof)
