; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIRA)
(declare-sort Int_real_real_real_prod_fun_prod_set$ 0)
(declare-sort Real_real_prod_real_real_prod_fun_set$ 0)
(declare-fun c$ () Real_real_prod_real_real_prod_fun_set$)
(declare-fun common_sudiv_exists$ (Int_real_real_real_prod_fun_prod_set$ Int_real_real_real_prod_fun_prod_set$) Bool)
(declare-fun two_chain_horizontal_boundary$ (Real_real_prod_real_real_prod_fun_set$) Int_real_real_real_prod_fun_prod_set$)
(assert (! (not (common_sudiv_exists$ (two_chain_horizontal_boundary$ c$) (two_chain_horizontal_boundary$ c$))) :named a0))
(assert (! (common_sudiv_exists$ (two_chain_horizontal_boundary$ c$) (two_chain_horizontal_boundary$ c$)) :named a1))
(check-sat)
;;;;(get-proof)
