; --index-fresh-sorts --proof-version=2 --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=29
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort B_a_prod$ 0)
(declare-sort B_b_prod$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort B_b_prod_set$ 0)
(declare-sort A_a_prod_c_fun$ 0)
(declare-sort A_b_prod_c_fun$ 0)
(declare-sort B_a_prod_c_fun$ 0)
(declare-sort B_b_prod_c_fun$ 0)
(declare-sort A_a_a_prod_prod$ 0)
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_b_a_prod_prod$ 0)
(declare-sort A_b_b_prod_prod$ 0)
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort A_b_prod_b_prod$ 0)
(declare-sort B_a_a_prod_prod$ 0)
(declare-sort B_a_b_prod_prod$ 0)
(declare-sort B_b_b_prod_prod$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort B_a_prod_bool_fun$ 0)
(declare-sort B_b_prod_bool_fun$ 0)
(declare-sort A_a_a_prod_prod_set$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort A_b_a_prod_prod_set$ 0)
(declare-sort A_b_b_prod_prod_set$ 0)
(declare-sort A_b_prod_a_prod_set$ 0)
(declare-sort A_b_prod_b_prod_set$ 0)
(declare-sort B_a_a_prod_prod_set$ 0)
(declare-sort B_a_b_prod_prod_set$ 0)
(declare-sort B_b_b_prod_prod_set$ 0)
(declare-sort A_a_b_prod_prod_c_fun$ 0)
(declare-sort A_b_a_prod_prod_c_fun$ 0)
(declare-sort A_b_b_prod_prod_c_fun$ 0)
(declare-sort A_b_prod_a_prod_c_fun$ 0)
(declare-sort A_b_prod_b_prod_c_fun$ 0)
(declare-sort B_a_b_prod_prod_c_fun$ 0)
(declare-sort B_b_b_prod_prod_c_fun$ 0)
(declare-sort A_b_a_b_prod_prod_prod$ 0)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-sort A_a_a_prod_bool_fun_fun$ 0)
(declare-sort A_a_b_prod_bool_fun_fun$ 0)
(declare-sort A_b_a_prod_bool_fun_fun$ 0)
(declare-sort A_b_b_prod_bool_fun_fun$ 0)
(declare-sort B_a_a_prod_bool_fun_fun$ 0)
(declare-sort B_a_b_prod_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_set$ 0)
(declare-sort A_b_prod_a_b_prod_prod_c_fun$ 0)
(declare-fun a$ () B$)
(declare-fun b$ () B$)
(declare-fun f$ () A_b_prod_c_fun$)
(declare-fun g$ () A_b_prod_c_fun$)
(declare-fun s$ () A_b_prod_set$)
(declare-fun g1$ (B$) A$)
(declare-fun g2$ (B$) A$)
(declare-fun uu$ (B$) A_c_fun$)
(declare-fun top$ () A_set$)
(declare-fun uua$ () B_c_fun$)
(declare-fun uub$ (B$) A_c_fun$)
(declare-fun uuc$ () B_c_fun$)
(declare-fun uud$ (C$) B_b_prod_c_fun$)
(declare-fun uue$ (C$) B_c_fun$)
(declare-fun uuf$ (B$ B$ C$) B_c_fun$)
(declare-fun uug$ (C$) B_a_prod_c_fun$)
(declare-fun uuh$ (C$) A_c_fun$)
(declare-fun uui$ (A$ A$ C$) B_c_fun$)
(declare-fun uuj$ (C$) A_a_prod_c_fun$)
(declare-fun uuk$ (A$ A$ C$) A_c_fun$)
(declare-fun uul$ (C$) A_b_prod_c_fun$)
(declare-fun uum$ (B$ B$ C$) A_c_fun$)
(declare-fun uun$ (C$) A_b_prod_b_prod_c_fun$)
(declare-fun uuo$ (B$ B$ C$) A_b_prod_c_fun$)
(declare-fun uup$ (C$) A_b_prod_a_prod_c_fun$)
(declare-fun uuq$ (A$ A$ C$) A_b_prod_c_fun$)
(declare-fun uur$ (C$) B_a_b_prod_prod_c_fun$)
(declare-fun uus$ (A_b_prod$ A_b_prod$ C$) B_c_fun$)
(declare-fun uut$ (C$) A_a_b_prod_prod_c_fun$)
(declare-fun uuu$ (A_b_prod$ A_b_prod$ C$) A_c_fun$)
(declare-fun uuv$ (C$) A_b_prod_a_b_prod_prod_c_fun$)
(declare-fun uuw$ (A_b_prod$ A_b_prod$ C$) A_b_prod_c_fun$)
(declare-fun uux$ (C$) B_b_b_prod_prod_c_fun$)
(declare-fun uuy$ (B_b_prod$ B_b_prod$ C$) B_c_fun$)
(declare-fun uuz$ (A_b_prod_set$) A_b_bool_fun_fun$)
(declare-fun uva$ (B_b_prod_set$) B_b_bool_fun_fun$)
(declare-fun uvb$ (B_a_prod_set$) B_a_bool_fun_fun$)
(declare-fun uvc$ (A_a_prod_set$) A_a_bool_fun_fun$)
(declare-fun uvd$ (B_a_b_prod_prod_set$) B_a_b_prod_bool_fun_fun$)
(declare-fun uve$ (A_a_b_prod_prod_set$) A_a_b_prod_bool_fun_fun$)
(declare-fun uvf$ (B_a_a_prod_prod_set$) B_a_a_prod_bool_fun_fun$)
(declare-fun uvg$ (A_b_b_prod_prod_set$) A_b_b_prod_bool_fun_fun$)
(declare-fun uvh$ (A_b_a_prod_prod_set$) A_b_a_prod_bool_fun_fun$)
(declare-fun uvi$ (A_a_a_prod_prod_set$) A_a_a_prod_bool_fun_fun$)
(declare-fun uvj$ (B_b_prod_c_fun$ B$) B_c_fun$)
(declare-fun uvk$ (B$ B$ B_b_prod_c_fun$) B_c_fun$)
(declare-fun uvl$ (B_a_prod_c_fun$ B$) A_c_fun$)
(declare-fun uvm$ (A$ A$ B_a_prod_c_fun$) B_c_fun$)
(declare-fun uvn$ (A_a_prod_c_fun$ A$) A_c_fun$)
(declare-fun uvo$ (A$ A$ A_a_prod_c_fun$) A_c_fun$)
(declare-fun uvp$ (A_b_prod_c_fun$ A$) B_c_fun$)
(declare-fun uvq$ (B$ B$ A_b_prod_c_fun$) A_c_fun$)
(declare-fun uvr$ (A_b_prod_b_prod_c_fun$ A_b_prod$) B_c_fun$)
(declare-fun uvs$ (B$ B$ A_b_prod_b_prod_c_fun$) A_b_prod_c_fun$)
(declare-fun uvt$ (A_b_prod_a_prod_c_fun$ A_b_prod$) A_c_fun$)
(declare-fun uvu$ (A$ A$ A_b_prod_a_prod_c_fun$) A_b_prod_c_fun$)
(declare-fun uvv$ (B_a_b_prod_prod_c_fun$ B$) A_b_prod_c_fun$)
(declare-fun uvw$ (A_b_prod$ A_b_prod$ B_a_b_prod_prod_c_fun$) B_c_fun$)
(declare-fun uvx$ (A_a_b_prod_prod_c_fun$ A$) A_b_prod_c_fun$)
(declare-fun uvy$ (A_b_prod$ A_b_prod$ A_a_b_prod_prod_c_fun$) A_c_fun$)
(declare-fun uvz$ (A_b_prod_a_b_prod_prod_c_fun$ A_b_prod$) A_b_prod_c_fun$)
(declare-fun uwa$ (A_b_prod$ A_b_prod$ A_b_prod_a_b_prod_prod_c_fun$) A_b_prod_c_fun$)
(declare-fun uwb$ (B_b_b_prod_prod_c_fun$ B$) B_b_prod_c_fun$)
(declare-fun uwc$ (B_b_prod$ B_b_prod$ B_b_b_prod_prod_c_fun$) B_c_fun$)
(declare-fun cbox$ (A$ A$) A_set$)
(declare-fun pair$ (A$ B$) A_b_prod$)
(declare-fun top$a () A_b_prod_set$)
(declare-fun top$b () B_set$)
(declare-fun zero$ () C$)
(declare-fun cbox$a (B_b_prod$ B_b_prod$) B_b_prod_set$)
(declare-fun cbox$b (A_b_prod$ A_b_prod$) A_b_prod_set$)
(declare-fun cbox$c (B$ B$) B_set$)
(declare-fun cbox$d (B_a_prod$ B_a_prod$) B_a_prod_set$)
(declare-fun cbox$e (A_a_prod$ A_a_prod$) A_a_prod_set$)
(declare-fun cbox$f (A_b_prod_b_prod$ A_b_prod_b_prod$) A_b_prod_b_prod_set$)
(declare-fun cbox$g (A_b_prod_a_prod$ A_b_prod_a_prod$) A_b_prod_a_prod_set$)
(declare-fun cbox$h (B_a_b_prod_prod$ B_a_b_prod_prod$) B_a_b_prod_prod_set$)
(declare-fun cbox$i (A_a_b_prod_prod$ A_a_b_prod_prod$) A_a_b_prod_prod_set$)
(declare-fun cbox$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod$) A_b_prod_a_b_prod_prod_set$)
(declare-fun cbox$k (B_b_b_prod_prod$ B_b_b_prod_prod$) B_b_b_prod_prod_set$)
(declare-fun pair$a (B$ A_b_prod$) B_a_b_prod_prod$)
(declare-fun pair$b (B$ A_a_prod$) B_a_a_prod_prod$)
(declare-fun pair$c (B$ B$) B_b_prod$)
(declare-fun pair$d (B$ A$) B_a_prod$)
(declare-fun pair$e (A$ B_b_prod$) A_b_b_prod_prod$)
(declare-fun pair$f (A$ B_a_prod$) A_b_a_prod_prod$)
(declare-fun pair$g (A$ A_b_prod$) A_a_b_prod_prod$)
(declare-fun pair$h (A$ A_a_prod$) A_a_a_prod_prod$)
(declare-fun pair$i (A$ A$) A_a_prod$)
(declare-fun pair$j (A_b_prod$ A_b_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun pair$k (A_b_prod$ B$) A_b_prod_b_prod$)
(declare-fun pair$l (A_b_prod$ A$) A_b_prod_a_prod$)
(declare-fun pair$m (B$ B_b_prod$) B_b_b_prod_prod$)
(declare-fun pair$n (A$ B_a_b_prod_prod$) A_b_a_b_prod_prod_prod$)
(declare-fun member$ (B_a_b_prod_prod$ B_a_b_prod_prod_set$) Bool)
(declare-fun fun_app$ (B_c_fun$ B$) C$)
(declare-fun member$a (B_a_a_prod_prod$ B_a_a_prod_prod_set$) Bool)
(declare-fun member$b (B_b_prod$ B_b_prod_set$) Bool)
(declare-fun member$c (B_a_prod$ B_a_prod_set$) Bool)
(declare-fun member$d (A_b_b_prod_prod$ A_b_b_prod_prod_set$) Bool)
(declare-fun member$e (A_b_a_prod_prod$ A_b_a_prod_prod_set$) Bool)
(declare-fun member$f (A_a_b_prod_prod$ A_a_b_prod_prod_set$) Bool)
(declare-fun member$g (A_a_a_prod_prod$ A_a_a_prod_prod_set$) Bool)
(declare-fun member$h (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun member$i (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$j (B$ B_set$) Bool)
(declare-fun member$k (A$ A_set$) Bool)
(declare-fun member$l (A_b_prod_b_prod$ A_b_prod_b_prod_set$) Bool)
(declare-fun member$m (A_b_prod_a_prod$ A_b_prod_a_prod_set$) Bool)
(declare-fun member$n (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_set$) Bool)
(declare-fun member$o (B_b_b_prod_prod$ B_b_b_prod_prod_set$) Bool)
(declare-fun fun_app$a (A_c_fun$ A$) C$)
(declare-fun fun_app$b (A_b_prod_c_fun$ A_b_prod$) C$)
(declare-fun fun_app$c (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$d (B_a_b_prod_bool_fun_fun$ B$) A_b_prod_bool_fun$)
(declare-fun fun_app$e (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$f (B_a_a_prod_bool_fun_fun$ B$) A_a_prod_bool_fun$)
(declare-fun fun_app$g (B_bool_fun$ B$) Bool)
(declare-fun fun_app$h (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$i (A_bool_fun$ A$) Bool)
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$k (B_b_prod_bool_fun$ B_b_prod$) Bool)
(declare-fun fun_app$l (A_b_b_prod_bool_fun_fun$ A$) B_b_prod_bool_fun$)
(declare-fun fun_app$m (B_a_prod_bool_fun$ B_a_prod$) Bool)
(declare-fun fun_app$n (A_b_a_prod_bool_fun_fun$ A$) B_a_prod_bool_fun$)
(declare-fun fun_app$o (A_a_b_prod_bool_fun_fun$ A$) A_b_prod_bool_fun$)
(declare-fun fun_app$p (A_a_a_prod_bool_fun_fun$ A$) A_a_prod_bool_fun$)
(declare-fun fun_app$q (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$r (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$s (A_b_prod_a_b_prod_prod_c_fun$ A_b_prod_a_b_prod_prod$) C$)
(declare-fun fun_app$t (A_b_prod_b_prod_c_fun$ A_b_prod_b_prod$) C$)
(declare-fun fun_app$u (A_b_prod_a_prod_c_fun$ A_b_prod_a_prod$) C$)
(declare-fun fun_app$v (B_b_prod_c_fun$ B_b_prod$) C$)
(declare-fun fun_app$w (B_b_b_prod_prod_c_fun$ B_b_b_prod_prod$) C$)
(declare-fun fun_app$x (B_a_b_prod_prod_c_fun$ B_a_b_prod_prod$) C$)
(declare-fun fun_app$y (B_a_prod_c_fun$ B_a_prod$) C$)
(declare-fun fun_app$z (A_a_b_prod_prod_c_fun$ A_a_b_prod_prod$) C$)
(declare-fun integral$ (A_set$ A_c_fun$) C$)
(declare-fun fun_app$aa (A_a_prod_c_fun$ A_a_prod$) C$)
(declare-fun fun_app$ab (A_b_b_prod_prod_c_fun$ A_b_b_prod_prod$) C$)
(declare-fun fun_app$ac (A_b_a_prod_prod_c_fun$ A_b_a_prod_prod$) C$)
(declare-fun integral$a (B_b_prod_set$ B_b_prod_c_fun$) C$)
(declare-fun integral$b (A_b_prod_set$ A_b_prod_c_fun$) C$)
(declare-fun integral$c (B_set$ B_c_fun$) C$)
(declare-fun integral$d (B_a_prod_set$ B_a_prod_c_fun$) C$)
(declare-fun integral$e (A_a_prod_set$ A_a_prod_c_fun$) C$)
(declare-fun integral$f (A_b_prod_b_prod_set$ A_b_prod_b_prod_c_fun$) C$)
(declare-fun integral$g (A_b_prod_a_prod_set$ A_b_prod_a_prod_c_fun$) C$)
(declare-fun integral$h (B_a_b_prod_prod_set$ B_a_b_prod_prod_c_fun$) C$)
(declare-fun integral$i (A_a_b_prod_prod_set$ A_a_b_prod_prod_c_fun$) C$)
(declare-fun integral$j (A_b_prod_a_b_prod_prod_set$ A_b_prod_a_b_prod_prod_c_fun$) C$)
(declare-fun integral$k (B_b_b_prod_prod_set$ B_b_b_prod_prod_c_fun$) C$)
(declare-fun integral$l (A_b_b_prod_prod_set$ A_b_b_prod_prod_c_fun$) C$)
(declare-fun integral$m (A_b_a_prod_prod_set$ A_b_a_prod_prod_c_fun$) C$)
(declare-fun continuous_on$ (B_b_prod_set$ B_b_prod_c_fun$) Bool)
(declare-fun continuous_on$a (B_a_prod_set$ B_a_prod_c_fun$) Bool)
(declare-fun continuous_on$b (A_a_prod_set$ A_a_prod_c_fun$) Bool)
(declare-fun continuous_on$c (A_b_prod_set$ A_b_prod_c_fun$) Bool)
(declare-fun continuous_on$d (A_b_prod_b_prod_set$ A_b_prod_b_prod_c_fun$) Bool)
(declare-fun continuous_on$e (A_b_prod_a_prod_set$ A_b_prod_a_prod_c_fun$) Bool)
(declare-fun continuous_on$f (B_a_b_prod_prod_set$ B_a_b_prod_prod_c_fun$) Bool)
(declare-fun continuous_on$g (A_a_b_prod_prod_set$ A_a_b_prod_prod_c_fun$) Bool)
(declare-fun continuous_on$h (A_b_prod_a_b_prod_prod_set$ A_b_prod_a_b_prod_prod_c_fun$) Bool)
(declare-fun continuous_on$i (B_b_b_prod_prod_set$ B_b_b_prod_prod_c_fun$) Bool)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uua$ ?v0) (integral$ (cbox$ (g1$ ?v0) (g2$ ?v0)) (uu$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uuc$ ?v0) (integral$ top$ (uub$ ?v0))) :pattern ((fun_app$ uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (fun_app$b g$ (pair$ ?v1 ?v0))) :pattern ((fun_app$a (uu$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$a (uub$ ?v0) ?v1) (fun_app$b f$ (pair$ ?v1 ?v0))) :pattern ((fun_app$a (uub$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B_a_b_prod_prod_set$) (?v1 B$) (?v2 A_b_prod$)) (! (= (fun_app$c (fun_app$d (uvd$ ?v0) ?v1) ?v2) (member$ (pair$a ?v1 ?v2) ?v0)) :pattern ((fun_app$c (fun_app$d (uvd$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 B_a_a_prod_prod_set$) (?v1 B$) (?v2 A_a_prod$)) (! (= (fun_app$e (fun_app$f (uvf$ ?v0) ?v1) ?v2) (member$a (pair$b ?v1 ?v2) ?v0)) :pattern ((fun_app$e (fun_app$f (uvf$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 B_b_prod_set$) (?v1 B$) (?v2 B$)) (! (= (fun_app$g (fun_app$h (uva$ ?v0) ?v1) ?v2) (member$b (pair$c ?v1 ?v2) ?v0)) :pattern ((fun_app$g (fun_app$h (uva$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 B_a_prod_set$) (?v1 B$) (?v2 A$)) (! (= (fun_app$i (fun_app$j (uvb$ ?v0) ?v1) ?v2) (member$c (pair$d ?v1 ?v2) ?v0)) :pattern ((fun_app$i (fun_app$j (uvb$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_b_b_prod_prod_set$) (?v1 A$) (?v2 B_b_prod$)) (! (= (fun_app$k (fun_app$l (uvg$ ?v0) ?v1) ?v2) (member$d (pair$e ?v1 ?v2) ?v0)) :pattern ((fun_app$k (fun_app$l (uvg$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_b_a_prod_prod_set$) (?v1 A$) (?v2 B_a_prod$)) (! (= (fun_app$m (fun_app$n (uvh$ ?v0) ?v1) ?v2) (member$e (pair$f ?v1 ?v2) ?v0)) :pattern ((fun_app$m (fun_app$n (uvh$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$) (?v1 A$) (?v2 A_b_prod$)) (! (= (fun_app$c (fun_app$o (uve$ ?v0) ?v1) ?v2) (member$f (pair$g ?v1 ?v2) ?v0)) :pattern ((fun_app$c (fun_app$o (uve$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 A_a_a_prod_prod_set$) (?v1 A$) (?v2 A_a_prod$)) (! (= (fun_app$e (fun_app$p (uvi$ ?v0) ?v1) ?v2) (member$g (pair$h ?v1 ?v2) ?v0)) :pattern ((fun_app$e (fun_app$p (uvi$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_b_prod_set$) (?v1 A$) (?v2 B$)) (! (= (fun_app$g (fun_app$q (uuz$ ?v0) ?v1) ?v2) (member$h (pair$ ?v1 ?v2) ?v0)) :pattern ((fun_app$g (fun_app$q (uuz$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_a_prod_set$) (?v1 A$) (?v2 A$)) (! (= (fun_app$i (fun_app$r (uvc$ ?v0) ?v1) ?v2) (member$i (pair$i ?v1 ?v2) ?v0)) :pattern ((fun_app$i (fun_app$r (uvc$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_c_fun$) (?v1 A_b_prod$) (?v2 A_b_prod$)) (! (= (fun_app$b (uvz$ ?v0 ?v1) ?v2) (fun_app$s ?v0 (pair$j ?v1 ?v2))) :pattern ((fun_app$b (uvz$ ?v0 ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_b_prod_b_prod_c_fun$) (?v1 A_b_prod$) (?v2 B$)) (! (= (fun_app$ (uvr$ ?v0 ?v1) ?v2) (fun_app$t ?v0 (pair$k ?v1 ?v2))) :pattern ((fun_app$ (uvr$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_b_prod_a_prod_c_fun$) (?v1 A_b_prod$) (?v2 A$)) (! (= (fun_app$a (uvt$ ?v0 ?v1) ?v2) (fun_app$u ?v0 (pair$l ?v1 ?v2))) :pattern ((fun_app$a (uvt$ ?v0 ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 B_b_b_prod_prod_c_fun$) (?v1 B$) (?v2 B_b_prod$)) (! (= (fun_app$v (uwb$ ?v0 ?v1) ?v2) (fun_app$w ?v0 (pair$m ?v1 ?v2))) :pattern ((fun_app$v (uwb$ ?v0 ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 B_a_b_prod_prod_c_fun$) (?v1 B$) (?v2 A_b_prod$)) (! (= (fun_app$b (uvv$ ?v0 ?v1) ?v2) (fun_app$x ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$b (uvv$ ?v0 ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 B_b_prod_c_fun$) (?v1 B$) (?v2 B$)) (! (= (fun_app$ (uvj$ ?v0 ?v1) ?v2) (fun_app$v ?v0 (pair$c ?v1 ?v2))) :pattern ((fun_app$ (uvj$ ?v0 ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 B_a_prod_c_fun$) (?v1 B$) (?v2 A$)) (! (= (fun_app$a (uvl$ ?v0 ?v1) ?v2) (fun_app$y ?v0 (pair$d ?v1 ?v2))) :pattern ((fun_app$a (uvl$ ?v0 ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 A_a_b_prod_prod_c_fun$) (?v1 A$) (?v2 A_b_prod$)) (! (= (fun_app$b (uvx$ ?v0 ?v1) ?v2) (fun_app$z ?v0 (pair$g ?v1 ?v2))) :pattern ((fun_app$b (uvx$ ?v0 ?v1) ?v2)))) :named a21))
(assert (! (forall ((?v0 A_b_prod_c_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$ (uvp$ ?v0 ?v1) ?v2) (fun_app$b ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$ (uvp$ ?v0 ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 A_a_prod_c_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$a (uvn$ ?v0 ?v1) ?v2) (fun_app$aa ?v0 (pair$i ?v1 ?v2))) :pattern ((fun_app$a (uvn$ ?v0 ?v1) ?v2)))) :named a23))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod$) (?v2 B_b_b_prod_prod_c_fun$) (?v3 B$)) (! (= (fun_app$ (uwc$ ?v0 ?v1 ?v2) ?v3) (integral$a (cbox$a ?v0 ?v1) (uwb$ ?v2 ?v3))) :pattern ((fun_app$ (uwc$ ?v0 ?v1 ?v2) ?v3)))) :named a24))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_a_b_prod_prod_c_fun$) (?v3 A_b_prod$)) (! (= (fun_app$b (uwa$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uvz$ ?v2 ?v3))) :pattern ((fun_app$b (uwa$ ?v0 ?v1 ?v2) ?v3)))) :named a25))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_a_b_prod_prod_c_fun$) (?v3 A$)) (! (= (fun_app$a (uvy$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uvx$ ?v2 ?v3))) :pattern ((fun_app$a (uvy$ ?v0 ?v1 ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 B_a_b_prod_prod_c_fun$) (?v3 B$)) (! (= (fun_app$ (uvw$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uvv$ ?v2 ?v3))) :pattern ((fun_app$ (uvw$ ?v0 ?v1 ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_b_prod_a_prod_c_fun$) (?v3 A_b_prod$)) (! (= (fun_app$b (uvu$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uvt$ ?v2 ?v3))) :pattern ((fun_app$b (uvu$ ?v0 ?v1 ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 A_b_prod_b_prod_c_fun$) (?v3 A_b_prod$)) (! (= (fun_app$b (uvs$ ?v0 ?v1 ?v2) ?v3) (integral$c (cbox$c ?v0 ?v1) (uvr$ ?v2 ?v3))) :pattern ((fun_app$b (uvs$ ?v0 ?v1 ?v2) ?v3)))) :named a29))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 A_b_prod_c_fun$) (?v3 A$)) (! (= (fun_app$a (uvq$ ?v0 ?v1 ?v2) ?v3) (integral$c (cbox$c ?v0 ?v1) (uvp$ ?v2 ?v3))) :pattern ((fun_app$a (uvq$ ?v0 ?v1 ?v2) ?v3)))) :named a30))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_a_prod_c_fun$) (?v3 A$)) (! (= (fun_app$a (uvo$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uvn$ ?v2 ?v3))) :pattern ((fun_app$a (uvo$ ?v0 ?v1 ?v2) ?v3)))) :named a31))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 B_a_prod_c_fun$) (?v3 B$)) (! (= (fun_app$ (uvm$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uvl$ ?v2 ?v3))) :pattern ((fun_app$ (uvm$ ?v0 ?v1 ?v2) ?v3)))) :named a32))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_b_prod_c_fun$) (?v3 B$)) (! (= (fun_app$ (uvk$ ?v0 ?v1 ?v2) ?v3) (integral$c (cbox$c ?v0 ?v1) (uvj$ ?v2 ?v3))) :pattern ((fun_app$ (uvk$ ?v0 ?v1 ?v2) ?v3)))) :named a33))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 C$) (?v3 A_b_prod$)) (! (= (fun_app$b (uuw$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uul$ ?v2))) :pattern ((fun_app$b (uuw$ ?v0 ?v1 ?v2) ?v3)))) :named a34))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uus$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uul$ ?v2))) :pattern ((fun_app$ (uus$ ?v0 ?v1 ?v2) ?v3)))) :named a35))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 C$) (?v3 A$)) (! (= (fun_app$a (uuu$ ?v0 ?v1 ?v2) ?v3) (integral$b (cbox$b ?v0 ?v1) (uul$ ?v2))) :pattern ((fun_app$a (uuu$ ?v0 ?v1 ?v2) ?v3)))) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 C$) (?v3 A_b_prod$)) (! (= (fun_app$b (uuq$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uuh$ ?v2))) :pattern ((fun_app$b (uuq$ ?v0 ?v1 ?v2) ?v3)))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uui$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uuh$ ?v2))) :pattern ((fun_app$ (uui$ ?v0 ?v1 ?v2) ?v3)))) :named a38))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 C$) (?v3 A$)) (! (= (fun_app$a (uuk$ ?v0 ?v1 ?v2) ?v3) (integral$ (cbox$ ?v0 ?v1) (uuh$ ?v2))) :pattern ((fun_app$a (uuk$ ?v0 ?v1 ?v2) ?v3)))) :named a39))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 C$) (?v3 A_b_prod$)) (! (= (fun_app$b (uuo$ ?v0 ?v1 ?v2) ?v3) (integral$c (cbox$c ?v0 ?v1) (uue$ ?v2))) :pattern ((fun_app$b (uuo$ ?v0 ?v1 ?v2) ?v3)))) :named a40))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uuf$ ?v0 ?v1 ?v2) ?v3) (integral$c (cbox$c ?v0 ?v1) (uue$ ?v2))) :pattern ((fun_app$ (uuf$ ?v0 ?v1 ?v2) ?v3)))) :named a41))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 C$) (?v3 A$)) (! (= (fun_app$a (uum$ ?v0 ?v1 ?v2) ?v3) (integral$c (cbox$c ?v0 ?v1) (uue$ ?v2))) :pattern ((fun_app$a (uum$ ?v0 ?v1 ?v2) ?v3)))) :named a42))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (uuy$ ?v0 ?v1 ?v2) ?v3) (integral$a (cbox$a ?v0 ?v1) (uud$ ?v2))) :pattern ((fun_app$ (uuy$ ?v0 ?v1 ?v2) ?v3)))) :named a43))
(assert (! (forall ((?v0 C$) (?v1 A_b_prod_a_b_prod_prod$)) (! (= (fun_app$s (uuv$ ?v0) ?v1) ?v0) :pattern ((fun_app$s (uuv$ ?v0) ?v1)))) :named a44))
(assert (! (forall ((?v0 C$) (?v1 A_b_prod_b_prod$)) (! (= (fun_app$t (uun$ ?v0) ?v1) ?v0) :pattern ((fun_app$t (uun$ ?v0) ?v1)))) :named a45))
(assert (! (forall ((?v0 C$) (?v1 A_b_prod_a_prod$)) (! (= (fun_app$u (uup$ ?v0) ?v1) ?v0) :pattern ((fun_app$u (uup$ ?v0) ?v1)))) :named a46))
(assert (! (forall ((?v0 C$) (?v1 B_b_b_prod_prod$)) (! (= (fun_app$w (uux$ ?v0) ?v1) ?v0) :pattern ((fun_app$w (uux$ ?v0) ?v1)))) :named a47))
(assert (! (forall ((?v0 C$) (?v1 B_a_b_prod_prod$)) (! (= (fun_app$x (uur$ ?v0) ?v1) ?v0) :pattern ((fun_app$x (uur$ ?v0) ?v1)))) :named a48))
(assert (! (forall ((?v0 C$) (?v1 B_b_prod$)) (! (= (fun_app$v (uud$ ?v0) ?v1) ?v0) :pattern ((fun_app$v (uud$ ?v0) ?v1)))) :named a49))
(assert (! (forall ((?v0 C$) (?v1 B_a_prod$)) (! (= (fun_app$y (uug$ ?v0) ?v1) ?v0) :pattern ((fun_app$y (uug$ ?v0) ?v1)))) :named a50))
(assert (! (forall ((?v0 C$) (?v1 A_a_b_prod_prod$)) (! (= (fun_app$z (uut$ ?v0) ?v1) ?v0) :pattern ((fun_app$z (uut$ ?v0) ?v1)))) :named a51))
(assert (! (forall ((?v0 C$) (?v1 A_b_prod$)) (! (= (fun_app$b (uul$ ?v0) ?v1) ?v0) :pattern ((fun_app$b (uul$ ?v0) ?v1)))) :named a52))
(assert (! (forall ((?v0 C$) (?v1 A_a_prod$)) (! (= (fun_app$aa (uuj$ ?v0) ?v1) ?v0) :pattern ((fun_app$aa (uuj$ ?v0) ?v1)))) :named a53))
(assert (! (forall ((?v0 C$) (?v1 B$)) (! (= (fun_app$ (uue$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uue$ ?v0) ?v1)))) :named a54))
(assert (! (forall ((?v0 C$) (?v1 A$)) (! (= (fun_app$a (uuh$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uuh$ ?v0) ?v1)))) :named a55))
(assert (! (not (= (integral$b s$ g$) (integral$c (cbox$c a$ b$) uua$))) :named a56))
(assert (! (= (integral$b top$a f$) (integral$b s$ g$)) :named a57))
(assert (! (= (integral$b top$a f$) (integral$c top$b uuc$)) :named a58))
(assert (! (= (integral$c top$b uuc$) (integral$c (cbox$c a$ b$) uua$)) :named a59))
(assert (! (forall ((?v0 B$)) (=> (member$j ?v0 (cbox$c a$ b$)) (= (integral$ (cbox$ (g1$ ?v0) (g2$ ?v0)) (uu$ ?v0)) (integral$ top$ (uub$ ?v0))))) :named a60))
(assert (! (forall ((?v0 A_b_prod$)) (= (fun_app$b f$ ?v0) (ite (member$h ?v0 s$) (fun_app$b g$ ?v0) zero$))) :named a61))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$) (?v4 B$) (?v5 B$)) (= (member$b (pair$c ?v0 ?v1) (cbox$a (pair$c ?v2 ?v3) (pair$c ?v4 ?v5))) (and (member$j ?v0 (cbox$c ?v2 ?v4)) (member$j ?v1 (cbox$c ?v3 ?v5))))) :named a62))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 B$) (?v5 A$)) (= (member$c (pair$d ?v0 ?v1) (cbox$d (pair$d ?v2 ?v3) (pair$d ?v4 ?v5))) (and (member$j ?v0 (cbox$c ?v2 ?v4)) (member$k ?v1 (cbox$ ?v3 ?v5))))) :named a63))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$) (?v4 A$) (?v5 B$)) (= (member$h (pair$ ?v0 ?v1) (cbox$b (pair$ ?v2 ?v3) (pair$ ?v4 ?v5))) (and (member$k ?v0 (cbox$ ?v2 ?v4)) (member$j ?v1 (cbox$c ?v3 ?v5))))) :named a64))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A$) (?v5 A$)) (= (member$i (pair$i ?v0 ?v1) (cbox$e (pair$i ?v2 ?v3) (pair$i ?v4 ?v5))) (and (member$k ?v0 (cbox$ ?v2 ?v4)) (member$k ?v1 (cbox$ ?v3 ?v5))))) :named a65))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_prod$) (?v3 B$) (?v4 A_b_prod$) (?v5 B$)) (= (member$l (pair$k ?v0 ?v1) (cbox$f (pair$k ?v2 ?v3) (pair$k ?v4 ?v5))) (and (member$h ?v0 (cbox$b ?v2 ?v4)) (member$j ?v1 (cbox$c ?v3 ?v5))))) :named a66))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod$) (?v3 A$) (?v4 A_b_prod$) (?v5 A$)) (= (member$m (pair$l ?v0 ?v1) (cbox$g (pair$l ?v2 ?v3) (pair$l ?v4 ?v5))) (and (member$h ?v0 (cbox$b ?v2 ?v4)) (member$k ?v1 (cbox$ ?v3 ?v5))))) :named a67))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$) (?v4 B$) (?v5 A_b_prod$)) (= (member$ (pair$a ?v0 ?v1) (cbox$h (pair$a ?v2 ?v3) (pair$a ?v4 ?v5))) (and (member$j ?v0 (cbox$c ?v2 ?v4)) (member$h ?v1 (cbox$b ?v3 ?v5))))) :named a68))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$) (?v4 A$) (?v5 A_b_prod$)) (= (member$f (pair$g ?v0 ?v1) (cbox$i (pair$g ?v2 ?v3) (pair$g ?v4 ?v5))) (and (member$k ?v0 (cbox$ ?v2 ?v4)) (member$h ?v1 (cbox$b ?v3 ?v5))))) :named a69))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$) (?v4 A_b_prod$) (?v5 A_b_prod$)) (= (member$n (pair$j ?v0 ?v1) (cbox$j (pair$j ?v2 ?v3) (pair$j ?v4 ?v5))) (and (member$h ?v0 (cbox$b ?v2 ?v4)) (member$h ?v1 (cbox$b ?v3 ?v5))))) :named a70))
(assert (! (forall ((?v0 B$) (?v1 B_b_prod$) (?v2 B$) (?v3 B_b_prod$) (?v4 B$) (?v5 B_b_prod$)) (= (member$o (pair$m ?v0 ?v1) (cbox$k (pair$m ?v2 ?v3) (pair$m ?v4 ?v5))) (and (member$j ?v0 (cbox$c ?v2 ?v4)) (member$b ?v1 (cbox$a ?v3 ?v5))))) :named a71))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$) (?v4 C$)) (= (integral$a (cbox$a (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (uud$ ?v4)) (integral$c (cbox$c ?v0 ?v2) (uuf$ ?v1 ?v3 ?v4)))) :named a72))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 C$)) (= (integral$d (cbox$d (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (uug$ ?v4)) (integral$c (cbox$c ?v0 ?v2) (uui$ ?v1 ?v3 ?v4)))) :named a73))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 C$)) (= (integral$e (cbox$e (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (uuj$ ?v4)) (integral$ (cbox$ ?v0 ?v2) (uuk$ ?v1 ?v3 ?v4)))) :named a74))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$) (?v4 C$)) (= (integral$b (cbox$b (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (uul$ ?v4)) (integral$ (cbox$ ?v0 ?v2) (uum$ ?v1 ?v3 ?v4)))) :named a75))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_prod$) (?v3 B$) (?v4 C$)) (= (integral$f (cbox$f (pair$k ?v0 ?v1) (pair$k ?v2 ?v3)) (uun$ ?v4)) (integral$b (cbox$b ?v0 ?v2) (uuo$ ?v1 ?v3 ?v4)))) :named a76))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod$) (?v3 A$) (?v4 C$)) (= (integral$g (cbox$g (pair$l ?v0 ?v1) (pair$l ?v2 ?v3)) (uup$ ?v4)) (integral$b (cbox$b ?v0 ?v2) (uuq$ ?v1 ?v3 ?v4)))) :named a77))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$) (?v4 C$)) (= (integral$h (cbox$h (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (uur$ ?v4)) (integral$c (cbox$c ?v0 ?v2) (uus$ ?v1 ?v3 ?v4)))) :named a78))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$) (?v4 C$)) (= (integral$i (cbox$i (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (uut$ ?v4)) (integral$ (cbox$ ?v0 ?v2) (uuu$ ?v1 ?v3 ?v4)))) :named a79))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$) (?v4 C$)) (= (integral$j (cbox$j (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (uuv$ ?v4)) (integral$b (cbox$b ?v0 ?v2) (uuw$ ?v1 ?v3 ?v4)))) :named a80))
(assert (! (forall ((?v0 B$) (?v1 B_b_prod$) (?v2 B$) (?v3 B_b_prod$) (?v4 C$)) (= (integral$k (cbox$k (pair$m ?v0 ?v1) (pair$m ?v2 ?v3)) (uux$ ?v4)) (integral$c (cbox$c ?v0 ?v2) (uuy$ ?v1 ?v3 ?v4)))) :named a81))
(assert (! (forall ((?v0 B$)) (=> (not (member$j ?v0 (cbox$c a$ b$))) (= (integral$ top$ (uub$ ?v0)) zero$))) :named a82))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a83))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a84))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a85))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a86))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a87))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a88))
(assert (! (forall ((?v0 A$) (?v1 B_b_prod$) (?v2 A$) (?v3 B_b_prod$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a89))
(assert (! (forall ((?v0 A$) (?v1 B_a_prod$) (?v2 A$) (?v3 B_a_prod$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a90))
(assert (! (forall ((?v0 A$) (?v1 A_a_prod$) (?v2 A$) (?v3 A_a_prod$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a91))
(assert (! (forall ((?v0 A$) (?v1 B_a_b_prod_prod$) (?v2 A$) (?v3 B_a_b_prod_prod$)) (= (= (pair$n ?v0 ?v1) (pair$n ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a92))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a93))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a94))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a95))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a96))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a97))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a98))
(assert (! (forall ((?v0 A$) (?v1 B_b_prod$) (?v2 A$) (?v3 B_b_prod$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a99))
(assert (! (forall ((?v0 A$) (?v1 B_a_prod$) (?v2 A$) (?v3 B_a_prod$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a100))
(assert (! (forall ((?v0 A$) (?v1 A_a_prod$) (?v2 A$) (?v3 A_a_prod$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a101))
(assert (! (forall ((?v0 A$) (?v1 B_a_b_prod_prod$) (?v2 A$) (?v3 B_a_b_prod_prod$)) (= (= (pair$n ?v0 ?v1) (pair$n ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a102))
(assert (! (forall ((?v0 A_b_prod_set$) (?v1 A_b_prod_set$)) (= (= (uuz$ ?v0) (uuz$ ?v1)) (= ?v0 ?v1))) :named a103))
(assert (! (forall ((?v0 B_b_prod_set$) (?v1 B_b_prod_set$)) (= (= (uva$ ?v0) (uva$ ?v1)) (= ?v0 ?v1))) :named a104))
(assert (! (forall ((?v0 B_a_prod_set$) (?v1 B_a_prod_set$)) (= (= (uvb$ ?v0) (uvb$ ?v1)) (= ?v0 ?v1))) :named a105))
(assert (! (forall ((?v0 A_a_prod_set$) (?v1 A_a_prod_set$)) (= (= (uvc$ ?v0) (uvc$ ?v1)) (= ?v0 ?v1))) :named a106))
(assert (! (forall ((?v0 B_a_b_prod_prod_set$) (?v1 B_a_b_prod_prod_set$)) (= (= (uvd$ ?v0) (uvd$ ?v1)) (= ?v0 ?v1))) :named a107))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$) (?v1 A_a_b_prod_prod_set$)) (= (= (uve$ ?v0) (uve$ ?v1)) (= ?v0 ?v1))) :named a108))
(assert (! (forall ((?v0 B_a_a_prod_prod_set$) (?v1 B_a_a_prod_prod_set$)) (= (= (uvf$ ?v0) (uvf$ ?v1)) (= ?v0 ?v1))) :named a109))
(assert (! (forall ((?v0 A_b_b_prod_prod_set$) (?v1 A_b_b_prod_prod_set$)) (= (= (uvg$ ?v0) (uvg$ ?v1)) (= ?v0 ?v1))) :named a110))
(assert (! (forall ((?v0 A_b_a_prod_prod_set$) (?v1 A_b_a_prod_prod_set$)) (= (= (uvh$ ?v0) (uvh$ ?v1)) (= ?v0 ?v1))) :named a111))
(assert (! (forall ((?v0 A_a_a_prod_prod_set$) (?v1 A_a_a_prod_prod_set$)) (= (= (uvi$ ?v0) (uvi$ ?v1)) (= ?v0 ?v1))) :named a112))
(assert (! (forall ((?v0 B_set$) (?v1 B_c_fun$) (?v2 B_c_fun$)) (=> (forall ((?v3 B$)) (=> (member$j ?v3 ?v0) (= (fun_app$ ?v1 ?v3) (fun_app$ ?v2 ?v3)))) (= (integral$c ?v0 ?v1) (integral$c ?v0 ?v2)))) :named a113))
(assert (! (forall ((?v0 A_set$) (?v1 A_c_fun$) (?v2 A_c_fun$)) (=> (forall ((?v3 A$)) (=> (member$k ?v3 ?v0) (= (fun_app$a ?v1 ?v3) (fun_app$a ?v2 ?v3)))) (= (integral$ ?v0 ?v1) (integral$ ?v0 ?v2)))) :named a114))
(assert (! (forall ((?v0 A_b_prod_set$) (?v1 A_b_prod_c_fun$) (?v2 A_b_prod_c_fun$)) (=> (forall ((?v3 A_b_prod$)) (=> (member$h ?v3 ?v0) (= (fun_app$b ?v1 ?v3) (fun_app$b ?v2 ?v3)))) (= (integral$b ?v0 ?v1) (integral$b ?v0 ?v2)))) :named a115))
(assert (! (forall ((?v0 B_b_prod_set$) (?v1 B_b_prod_c_fun$) (?v2 B_b_prod_c_fun$)) (=> (forall ((?v3 B_b_prod$)) (=> (member$b ?v3 ?v0) (= (fun_app$v ?v1 ?v3) (fun_app$v ?v2 ?v3)))) (= (integral$a ?v0 ?v1) (integral$a ?v0 ?v2)))) :named a116))
(assert (! (forall ((?v0 B_a_prod_set$) (?v1 B_a_prod_c_fun$) (?v2 B_a_prod_c_fun$)) (=> (forall ((?v3 B_a_prod$)) (=> (member$c ?v3 ?v0) (= (fun_app$y ?v1 ?v3) (fun_app$y ?v2 ?v3)))) (= (integral$d ?v0 ?v1) (integral$d ?v0 ?v2)))) :named a117))
(assert (! (forall ((?v0 A_a_prod_set$) (?v1 A_a_prod_c_fun$) (?v2 A_a_prod_c_fun$)) (=> (forall ((?v3 A_a_prod$)) (=> (member$i ?v3 ?v0) (= (fun_app$aa ?v1 ?v3) (fun_app$aa ?v2 ?v3)))) (= (integral$e ?v0 ?v1) (integral$e ?v0 ?v2)))) :named a118))
(assert (! (forall ((?v0 B_a_b_prod_prod_set$) (?v1 B_a_b_prod_prod_c_fun$) (?v2 B_a_b_prod_prod_c_fun$)) (=> (forall ((?v3 B_a_b_prod_prod$)) (=> (member$ ?v3 ?v0) (= (fun_app$x ?v1 ?v3) (fun_app$x ?v2 ?v3)))) (= (integral$h ?v0 ?v1) (integral$h ?v0 ?v2)))) :named a119))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$) (?v1 A_a_b_prod_prod_c_fun$) (?v2 A_a_b_prod_prod_c_fun$)) (=> (forall ((?v3 A_a_b_prod_prod$)) (=> (member$f ?v3 ?v0) (= (fun_app$z ?v1 ?v3) (fun_app$z ?v2 ?v3)))) (= (integral$i ?v0 ?v1) (integral$i ?v0 ?v2)))) :named a120))
(assert (! (forall ((?v0 A_b_b_prod_prod_set$) (?v1 A_b_b_prod_prod_c_fun$) (?v2 A_b_b_prod_prod_c_fun$)) (=> (forall ((?v3 A_b_b_prod_prod$)) (=> (member$d ?v3 ?v0) (= (fun_app$ab ?v1 ?v3) (fun_app$ab ?v2 ?v3)))) (= (integral$l ?v0 ?v1) (integral$l ?v0 ?v2)))) :named a121))
(assert (! (forall ((?v0 A_b_a_prod_prod_set$) (?v1 A_b_a_prod_prod_c_fun$) (?v2 A_b_a_prod_prod_c_fun$)) (=> (forall ((?v3 A_b_a_prod_prod$)) (=> (member$e ?v3 ?v0) (= (fun_app$ac ?v1 ?v3) (fun_app$ac ?v2 ?v3)))) (= (integral$m ?v0 ?v1) (integral$m ?v0 ?v2)))) :named a122))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$) (?v4 B_b_prod_c_fun$)) (=> (continuous_on$ (cbox$a (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) ?v4) (= (integral$a (cbox$a (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) ?v4) (integral$c (cbox$c ?v0 ?v2) (uvk$ ?v1 ?v3 ?v4))))) :named a123))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 B_a_prod_c_fun$)) (=> (continuous_on$a (cbox$d (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) ?v4) (= (integral$d (cbox$d (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) ?v4) (integral$c (cbox$c ?v0 ?v2) (uvm$ ?v1 ?v3 ?v4))))) :named a124))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A_a_prod_c_fun$)) (=> (continuous_on$b (cbox$e (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) ?v4) (= (integral$e (cbox$e (pair$i ?v0 ?v1) (pair$i ?v2 ?v3)) ?v4) (integral$ (cbox$ ?v0 ?v2) (uvo$ ?v1 ?v3 ?v4))))) :named a125))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$) (?v4 A_b_prod_c_fun$)) (=> (continuous_on$c (cbox$b (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) ?v4) (= (integral$b (cbox$b (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) ?v4) (integral$ (cbox$ ?v0 ?v2) (uvq$ ?v1 ?v3 ?v4))))) :named a126))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_prod$) (?v3 B$) (?v4 A_b_prod_b_prod_c_fun$)) (=> (continuous_on$d (cbox$f (pair$k ?v0 ?v1) (pair$k ?v2 ?v3)) ?v4) (= (integral$f (cbox$f (pair$k ?v0 ?v1) (pair$k ?v2 ?v3)) ?v4) (integral$b (cbox$b ?v0 ?v2) (uvs$ ?v1 ?v3 ?v4))))) :named a127))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod$) (?v3 A$) (?v4 A_b_prod_a_prod_c_fun$)) (=> (continuous_on$e (cbox$g (pair$l ?v0 ?v1) (pair$l ?v2 ?v3)) ?v4) (= (integral$g (cbox$g (pair$l ?v0 ?v1) (pair$l ?v2 ?v3)) ?v4) (integral$b (cbox$b ?v0 ?v2) (uvu$ ?v1 ?v3 ?v4))))) :named a128))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$) (?v4 B_a_b_prod_prod_c_fun$)) (=> (continuous_on$f (cbox$h (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) ?v4) (= (integral$h (cbox$h (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) ?v4) (integral$c (cbox$c ?v0 ?v2) (uvw$ ?v1 ?v3 ?v4))))) :named a129))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$) (?v4 A_a_b_prod_prod_c_fun$)) (=> (continuous_on$g (cbox$i (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) ?v4) (= (integral$i (cbox$i (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) ?v4) (integral$ (cbox$ ?v0 ?v2) (uvy$ ?v1 ?v3 ?v4))))) :named a130))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$) (?v4 A_b_prod_a_b_prod_prod_c_fun$)) (=> (continuous_on$h (cbox$j (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) ?v4) (= (integral$j (cbox$j (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) ?v4) (integral$b (cbox$b ?v0 ?v2) (uwa$ ?v1 ?v3 ?v4))))) :named a131))
(assert (! (forall ((?v0 B$) (?v1 B_b_prod$) (?v2 B$) (?v3 B_b_prod$) (?v4 B_b_b_prod_prod_c_fun$)) (=> (continuous_on$i (cbox$k (pair$m ?v0 ?v1) (pair$m ?v2 ?v3)) ?v4) (= (integral$k (cbox$k (pair$m ?v0 ?v1) (pair$m ?v2 ?v3)) ?v4) (integral$c (cbox$c ?v0 ?v2) (uwc$ ?v1 ?v3 ?v4))))) :named a132))
(check-sat)
;;;;(get-proof)
