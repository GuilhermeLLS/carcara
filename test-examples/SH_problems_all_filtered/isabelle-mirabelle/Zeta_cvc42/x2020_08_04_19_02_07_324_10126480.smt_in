; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIRA)
(declare-sort Nat$ 0)
(declare-sort Num$ 0)
(declare-sort Ereal$ 0)
(declare-sort Real_measure$ 0)
(declare-sort Real_real_fun$ 0)
(declare-fun e$ () Real)
(declare-fun ln$ (Real) Real)
(declare-fun uu$ () Real_real_fun$)
(declare-fun one$ () Ereal$)
(declare-fun bit0$ (Num$) Num$)
(declare-fun one$a () Num$)
(declare-fun powr$ (Real Real) Real)
(declare-fun zero$ () Ereal$)
(declare-fun power$ (Real Nat$) Real)
(declare-fun times$ (Real Real) Real)
(declare-fun divide$ (Real Real) Real)
(declare-fun lborel$ () Real_measure$)
(declare-fun fun_app$ (Real_real_fun$ Real) Real)
(declare-fun numeral$ (Num$) Nat$)
(declare-fun interval_lebesgue_integral$ (Real_measure$ Ereal$ Ereal$ Real_real_fun$) Real)
(declare-fun interval_lebesgue_integrable$ (Real_measure$ Ereal$ Ereal$ Real_real_fun$) Bool)
(assert (! (forall ((?v0 Real)) (! (= (fun_app$ uu$ ?v0) (times$ (- (ln$ ?v0)) (powr$ ?v0 e$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (interval_lebesgue_integral$ lborel$ zero$ one$ uu$) (divide$ 1.0 (power$ (+ e$ 1.0) (numeral$ (bit0$ one$a)))))) :named a1))
(assert (! (interval_lebesgue_integrable$ lborel$ zero$ one$ uu$) :named a2))
(assert (! (= (interval_lebesgue_integral$ lborel$ zero$ one$ uu$) (divide$ 1.0 (power$ (+ e$ 1.0) (numeral$ (bit0$ one$a))))) :named a3))
(check-sat)
(get-unsat-core)
