; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIRA)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_b_fun$ 0)
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun f$ (A$) B$)
(declare-fun i$ () B$)
(declare-fun m$ () Real)
(declare-fun uu$ () A_b_fun$)
(declare-fun card$ (A_set$) Nat$)
(declare-fun cbox$ (A$ A$) A_set$)
(declare-fun plus$ (A$ A$) A$)
(declare-fun basis$ () A_set$)
(declare-fun minus$ (A$ A$) A$)
(declare-fun power$ (Real Nat$) Real)
(declare-fun scaleR$ (Real A$) A$)
(declare-fun fun_app$ (A_b_fun$ A$) B$)
(declare-fun inverse$ (Real) Real)
(declare-fun scaleR$a (Real B$) B$)
(declare-fun has_integral$ (A_b_fun$ B$ A_set$) Bool)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) (f$ (plus$ (scaleR$ m$ ?v0) c$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (has_integral$ uu$ (scaleR$a (inverse$ (power$ m$ (card$ basis$))) i$) (cbox$ (scaleR$ (inverse$ m$) (minus$ a$ c$)) (scaleR$ (inverse$ m$) (minus$ b$ c$))))) :named a1))
(assert (! (< 0.0 m$) :named a2))
(assert (! (=> (< 0.0 m$) (has_integral$ uu$ (scaleR$a (inverse$ (power$ m$ (card$ basis$))) i$) (cbox$ (scaleR$ (inverse$ m$) (minus$ a$ c$)) (scaleR$ (inverse$ m$) (minus$ b$ c$))))) :named a3))
(check-sat)
(get-unsat-core)
